name: Release
on:
  push:
    tags: ['v*.*.*']
jobs:
  variables:
    name: Variables
    uses: ./.github/workflows/reusable-variables.yml
    with:
      REF_NAME: main
    secrets: inherit
  release_tag:
    name: Get release tag
    runs-on: ubuntu-latest
    outputs:
      RELEASE_TAG: ${{steps.tag.outputs.RELEASE_TAG}}
    steps:
      - id: tag
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/v}" >> $GITHUB_OUTPUT
  image:
    name: 'Image'
    uses: ./.github/workflows/reusable-ghcr-image.yml
    needs: [variables, release_tag]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        PACKAGE_NAME: [ui, gateway, graphql-server]
        include:
          - PACKAGE_NAME: ui
            BUILD_ARGS: >-
              --build-arg PUBLIC_SUPABASE_URL="${{needs.variables.outputs.PUBLIC_SUPABASE_URL}}"
              --build-arg PUBLIC_SUPABASE_GRAPHQL_URL="${{needs.variables.outputs.PUBLIC_SUPABASE_GRAPHQL_URL}}"
              --build-arg PUBLIC_GATEWAY_URL="${{needs.variables.outputs.PUBLIC_PRODUCTION_GATEWAY_URL}}"
              --build-arg PUBLIC_UI_HOSTNAME="${{needs.variables.outputs.PUBLIC_UI_HOSTNAME}}"
              --build-arg PUBLIC_UI_PORT="${{needs.variables.outputs.PUBLIC_UI_PORT}}"
              --build-arg PUBLIC_SUPABASE_ANON_KEY="${{needs.variables.outputs.PUBLIC_SUPABASE_ANON_KEY}}"
    with:
      GIT_COMMIT_TAG: ${{needs.variables.outputs.GIT_COMMIT_TAG}}
      ENV: ${{needs.variables.outputs.ENV}}
      PACKAGE_NAME: ${{matrix.PACKAGE_NAME}}
      BUILD_ARGS: ${{matrix.BUILD_ARGS}}
      IMAGE_REPOSITORY: stable
      IMAGE_TAGS: >-
        ${{needs.release_tag.outputs.RELEASE_TAG}}
        latest
    secrets: inherit
  helm:
    name: Helm
    needs: [variables, release_tag, image]
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout chart
        uses: actions/checkout@v4
      - name: Install Helm
        uses: azure/setup-helm@v4.2.0
      - name: Helm Package App
        run: helm package k8s/charts/app-chart --version ${{needs.release_tag.outputs.RELEASE_TAG}} --app-version ${{needs.release_tag.outputs.RELEASE_TAG}}
      - name: Login Helm
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin
      - name: Push Helm
        run: helm push app-chart-${{needs.release_tag.outputs.RELEASE_TAG}}.tgz oci://ghcr.io/${{vars.ORG_NAME}}/${{vars.REPO_NAME}}/stable
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: helm
    steps:
      - name: Get release tag
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create
        uses: 'actions/github-script@v7'
        with:
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                body: "## Packages\n[Packages](https://github.com/orgs/${{vars.ORG_NAME}}/packages) see all stable releases",
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: true,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
