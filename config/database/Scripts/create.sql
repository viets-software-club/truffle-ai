create table public.gthb_owner(
  gthb_owner_id bigint generated by default as identity,
  gthb_owner_type gthb_owner_type,
  avatar_url text not null,
  gthb_owner_login text not null,
  gthb_owner_url text not null,
  repositories_total_count bigint not null,
  _created_at timestamp with time zone not null default now(),
  constraint gthb_owner_pkey primary key (gthb_owner_id),
  constraint gthb_owner_gthb_owner_login_uq unique (gthb_owner_login)
)
tablespace pg_default;

create table public.gthb_user(
  gthb_user_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  bio text not null,
  bio_html text not null,
  company text not null,
  company_html text not null,
  created_at timestamp with time zone not null,
  email text not null,
  followers_total_count bigint not null,
  gthb_user_name text not null,
  twitter_username text not null,
  website_url text not null,
  constraint gthb_user_pkey primary key (gthb_user_id),
  constraint gthb_user_gthb_user_id_fkey foreign key (gthb_user_id) references gthb_owner(gthb_owner_id) on delete cascade
)
tablespace pg_default;

create table public.gthb_org(
  gthb_org_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  created_at timestamp with time zone not null,
  gthb_org_description text not null,
  description_html text not null,
  email text not null,
  gthb_org_name text not null,
  twitter_username text not null,
  website_url text not null,
  constraint gthb_org_pkey primary key (gthb_org_id),
  constraint gthb_org_gthb_org_name_uq unique (gthb_org_name),
  constraint gthb_org_gthb_org_id_fkey foreign key (gthb_org_id) references gthb_owner(gthb_owner_id) on delete cascade
)
tablespace pg_default;

create table public.gthb_lang(
  gthb_lang_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  color text not null,
  gthb_lang_name text not null,
  constraint gthb_lang_pkey primary key (gthb_lang_id),
  constraint gthb_lang_gthb_lang_name_uq unique (gthb_lang_name)
)
tablespace pg_default;

create table public.gthb_repo(
  gthb_repo_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  created_at timestamp with time zone not null,
  gthb_repo_description text not null,
  fork_count bigint not null,
  homepage_url text not null,
  is_in_organization boolean not null,
  issues_total_count bigint not null,
  gthb_repo_name text not null,
  gthb_owner_id bigint not null,
  pull_requests_total_count bigint not null,
  gthb_repo_url text not null,
  stargazer_count bigint not null,
  constraint gthb_repo_pkey primary key (gthb_repo_id),
  constraint gthb_repo_gthb_owner_id_fkey foreign key (gthb_owner_id) references gthb_owner(gthb_owner_id) on delete cascade,
  constraint gthb_repo_fields_name_and_gthb_owner_id_uq unique (gthb_repo_name, gthb_owner_id),
  constraint gthb_repo_gthb_repo_name_uq unique (gthb_repo_name)
)
tablespace pg_default;

create table public.gthb_repo_and_gthb_lang(
  gthb_repo_id bigint not null,
  gthb_lang_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  constraint gthb_repo_language_pkey primary key (gthb_repo_id, gthb_lang_id),
  constraint gthb_repo_and_gthb_lang_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id),
  constraint gthb_repo_and_gthb_lang_gthb_lang_id_fkey foreign key (gthb_lang_id) references gthb_lang(gthb_lang_id)
)
tablespace pg_default;

create table public.gthb_repo_issue(
  gthb_repo_issue_id bigint generated by default as identity,
  gthb_repo_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  created_at timestamp with time zone not null,
  html_url text not null,
  body text not null,
  title text not null,
  gthb_repo_issue_state text not null,
  constraint gthb_repo_issue_pkey primary key (gthb_repo_issue_id),
  constraint gthb_repo_issue_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade
)
tablespace pg_default;

create table public.gthb_repo_fork(
  gthb_repo_fork_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  gthb_repo_id bigint not null,
  constraint gthb_repo_fork_pkey primary key (gthb_repo_fork_id),
  constraint gthb_repo_fork_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade
)
tablespace pg_default;

create table public.gthb_star(
  gthb_star_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  gthb_repo_id bigint not null,
  starred_at timestamp with time zone not null,
  gthb_user_id bigint not null,
  constraint gthb_star_pkey primary key (gthb_star_id),
  constraint gthb_star_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade,
  constraint gthb_star_gthb_user_id_fkey foreign key (gthb_user_id) references gthb_user(gthb_user_id) on delete cascade,
  constraint gthb_star_fields_starred_at_and_gthb_user_id_and_gthb_repo_id_uq unique (starred_at, gthb_user_id, gthb_repo_id)
)
tablespace pg_default;

create table public.gthb_star_hist(
  gthb_star_hist_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  gthb_repo_id bigint not null,
  star_date timestamp with time zone not null,
  amount bigint not null,
  constraint gthb_star_hist_pkey primary key (gthb_star_hist_id),
  constraint gthb_star_hist_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade,
  constraint gthb_star_hist_fields_star_date_and_gthb_repo_id_uq unique (star_date, gthb_repo_id)
)
tablespace pg_default;

create table public.gthb_fork_hist(
  gthb_fork_hist_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  gthb_repo_id bigint not null,
  fork_date timestamp with time zone not null,
  amount bigint not null,
  constraint gthb_fork_hist_pkey primary key (gthb_fork_hist_id),
  constraint gthb_fork_hist_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade,
  constraint gthb_fork_hist_fields_fork_date_and_gthb_repo_id_uq unique (fork_date, gthb_repo_id)
)
tablespace pg_default;

create table public.gthb_issue_hist(
  gthb_issue_hist_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  gthb_repo_id bigint not null,
  issue_date timestamp with time zone not null,
  amount bigint not null,
  constraint gthb_issue_hist_pkey primary key (gthb_issue_hist_id),
  constraint gthb_issue_hist_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade,
  constraint gthb_issue_hist_fields_issue_date_and_gthb_repo_id_uq unique (issue_date, gthb_repo_id)
)
tablespace pg_default;

create table public.gthb_trending(
  gthb_trending_id bigint generated by default as identity,
  gthb_repo_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  date_range text not null check (date_range in ('today', 'week', 'month')),
  lang text not null,
  constraint gthb_trending_pkey primary key (gthb_trending_id),
  constraint gthb_trending_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id)
)
tablespace pg_default;

create table public.proj_cat(
  proj_cat_id bigint generated by default as identity,
  proj_cat_name text not null,
  user_id uuid not null,
  constraint proj_cat_pkey primary key (proj_cat_id),
  constraint proj_cat_user_id_fkey foreign key (user_id) references auth.users(id) on delete cascade
)
tablespace pg_default;

create table public.user_whitelist(
  user_whitelist_id bigint generated by default as identity not null,
  _created_at timestamp with time zone null default now(),
  kind text not null check (kind in ('email', 'domain')),
  user_whitelist_value text null,
  constraint user_whitelist_pkey primary key (user_whitelist_id),
  constraint user_whitelist_fields_kind_and_user_whitelist_value_uq unique (kind, user_whitelist_value)
)
tablespace pg_default;

create table public.algo_hn_tag(
  algo_hn_tag_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  title text not null,
  constraint algo_hn_tag_pkey primary key (algo_hn_tag_id),
  constraint algo_hn_tag_title_uq unique (title)
)
tablespace pg_default;

create table public.algo_hn_query(
  algo_hn_query_id bigint generated by default as identity,
  query text not null,
  _created_at timestamp with time zone not null default now(),
  constraint algo_hn_query_pkey primary key (algo_hn_query_id),
  constraint algo_hn_query_query_uq unique (query)
)
tablespace pg_default;

create table public.algo_hn_story(
  algo_hn_story_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  author text not null,
  created_at timestamp with time zone not null,
  algo_hn_story_url text not null,
  object_id bigint not null,
  points bigint not null,
  algo_hn_query_id bigint not null,
  story_text text not null,
  title text not null,
  updated_at timestamp with time zone not null,
  constraint algo_hn_story_pkey primary key (algo_hn_story_id),
  constraint algo_hn_story_algo_hn_query_fkey foreign key (algo_hn_query_id) references algo_hn_query(algo_hn_query_id) on delete cascade,
  constraint algo_hn_story_algo_hn_story_url_uq unique (algo_hn_story_url)
)
tablespace pg_default;

create table public.algo_hn_comment(
  algo_hn_comment_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  author text not null,
  object_id bigint not null,
  algo_hn_query_id bigint not null,
  comment_text text not null,
  story_id bigint not null,
  story_title text not null,
  story_url text not null,
  created_at timestamp with time zone not null,
  updated_at timestamp with time zone not null,
  constraint algo_hn_comment_pkey primary key (algo_hn_comment_id),
  constraint algo_hn_comment_algo_hn_query_fkey foreign key (algo_hn_query_id) references algo_hn_query(algo_hn_query_id) on delete cascade,
  constraint algo_hn_comment_comment_text_uq unique (comment_text)
)
tablespace pg_default;

create table public.proj_repo_metadata(
  proj_repo_metadata_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  proj_repo_id bigint not null,
  algo_hn_eli5 text not null,
  repo_eli5 text not null,
  constraint proj_repo_metadata_pkey primary key (proj_repo_metadata_id),
  constraint proj_repo_metadata_proj_repo_id_fkey foreign key (proj_repo_id) references proj_repo(proj_repo_id) on delete cascade
)
tablespace pg_default;

create table public.user_api_key(
  user_api_key_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  user_api_key uuid not null default gen_random_uuid(),
  user_id uuid not null,
  constraint user_api_key_pkey primary key (user_api_key_id),
  constraint user_api_key_user_id_fkey foreign key (user_id) references auth.users(id) on delete cascade,
  constraint user_api_key_key_key unique (user_api_key),
  constraint user_api_key_user_id_uq unique (user_id)
)
tablespace pg_default;

create table public.twitter_user(
  twitter_user_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  twitter_user_name text not null,
  screen_name text not null,
  twitter_user_description text not null,
  twitter_user_location text not null,
  twitter_user_url text not null,
  followers_count bigint not null,
  constraint twitter_user_pkey primary key (twitter_user_id),
  constraint twitter_user_screen_name_uq unique (screen_name)
)
tablespace pg_default;

create table public.twitter_search(
  twitter_search_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  created_at timestamp with time zone not null,
  search text not null,
  full_text text not null,
  constraint twitter_search_pkey primary key (twitter_search_id),
  constraint twitter_search_search_uq unique (search)
)
tablespace pg_default;

create table public.twitter_search_and_twitter_user(
  twitter_search_id bigint not null,
  twitter_user_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  constraint twitter_search_and_twitter_user_pkey primary key (twitter_search_id, twitter_user_id),
  constraint twitter_search_id_fkey foreign key (twitter_search_id) references twitter_search(twitter_search_id) on delete cascade,
  constraint twitter_user_id_fkey foreign key (twitter_user_id) references twitter_user(twitter_user_id) on delete cascade
);

create table public.sbot_lin_keyword(
  sbot_lin_keyword_id bigint not null,
  keywords text not null,
  _created_at timestamp with time zone not null default now(),
  constraint sbot_lin_keywords_pkey primary key (sbot_lin_keyword_id),
  constraint lin_keywords_uq unique (keywords)
)
tablespace pg_default;

create table public.sbot_lin_ps(
  sbot_lin_ps_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  sbot_lin_ps_name text not null,
  sbot_lin_ps_url text not null,
  sphere text not null,
  sbot_lin_keyword_id text not null,
  followers bigint not null,
  about text not null,
  language text
  not null,
  constraint sbot_lin_ps_pkey primary key (sbot_lin_ps_id),
  constraint sbot_lin_ps_sbot_lin_keyword_id foreign key (sbot_lin_ps_id) references sbot_lin_ps(sbot_lin_ps_id) on delete cascade,
  constraint sbot_lin_ps_fields_sbot_lin_ps_url_and_sbot_lin_ps_name_uq unique (sbot_lin_ps_name, sbot_lin_ps_url)
)
tablespace pg_default;

create table public.sbot_lin_ps_upd(
  sbot_lin_ps_upd_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  sbot_lin_ps_id bigint not null,
  title text not null,
  update_time text not null,
  update_text text not null,
  likes_count bigint not null,
  comments_count bigint not null,
  constraint sbot_lin_ps_upd_pkey primary key (sbot_lin_ps_upd_id),
  constraint sbot_lin_ps_upd_sbot_lin_ps_id_fkey foreign key (sbot_lin_ps_id) references sbot_lin_ps(sbot_lin_ps_id) on delete cascade,
  constraint sbot_lin_ps_upd_title_and_update_text_and_sbot_lin_ps_id_uq unique (title, update_text, sbot_lin_ps_id)
);

create table public.proj_repo(
  proj_repo_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  gthb_repo_id bigint not null,
  note text not null,
  constraint proj_repo_pkey primary key (proj_repo_id),
  constraint proj_repo_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade,
)
tablespace pg_default;

create table public.proj_bookmark(
  proj_bookmark_id bigint generated by default as identity,
  _created_at timestamp with time zone not null default now(),
  proj_repo_id bigint not null,
  user_id uuid not null,
  constraint proj_bookmark_pkey primary key (proj_bookmark_id),
  constraint proj_bookmark_proj_repo_id foreign key (proj_repo_id) references proj_repo(proj_repo_id) on delete cascade,
  constraint proj_bookmark_user_id_fkey foreign key (user_id) references auth.users(id) on delete cascade
)
tablespace pg_default;

create table public.proj_cat_and_proj_bookmark(
  proj_cat_id bigint not null,
  proj_bookmark_id bigint not null,
  constraint proj_cat_and_proj_bookmark_pkey primary key (proj_cat_id, proj_bookmark_id),
  constraint proj_cat_and_proj_bookmark_proj_cat_id_fkey foreign key (proj_cat_id) references proj_cat(proj_cat_id) on delete cascade,
  constraint proj_cat_and_proj_bookmark_proj_bookmark_id_fkey foreign key (proj_bookmark_id) references proj_bookmark(proj_bookmark_id) on delete cascade
)
tablespace pg_default;

create table public.algo_hn_story_and_algo_hn_tag(
  _created_at timestamp with time zone not null default now(),
  algo_hn_story_id bigint not null,
  algo_hn_tag_id bigint not null,
  constraint algo_hn_story_and_algo_hn_tag_pkey primary key (algo_hn_story_id, algo_hn_tag_id),
  constraint algo_hn_story_and_algo_hn_tag_algo_hn_story_fkey foreign key (algo_hn_story_id) references algo_hn_story(algo_hn_story_id) on delete cascade,
  constraint algo_hn_story_and_algo_hn_tag_algo_hn_tag_id_fkey foreign key (algo_hn_tag_id) references algo_hn_tag(algo_hn_tag_id) on delete cascade
)
tablespace pg_default;

create table public.algo_hn_comment_and_algo_hn_tag(
  _created_at timestamp with time zone not null default now(),
  algo_hn_comment_id bigint not null,
  algo_hn_tag_id bigint not null,
  constraint algo_hn_comment_and_algo_hn_tag_pkey primary key (algo_hn_comment_id, algo_hn_tag_id),
  constraint algo_hn_comment_and_algo_hn_tag_algo_hn_comment_fkey foreign key (algo_hn_comment_id) references
    algo_hn_comment(algo_hn_comment_id) on delete cascade,
  constraint algo_hn_comment_and_algo_hn_tag_algo_hn_tag_id_fkey foreign key (algo_hn_tag_id) references algo_hn_tag(algo_hn_tag_id) on delete cascade
)
tablespace pg_default;

create table public.proj_repo_and_algo_hn_query(
  proj_repo_id bigint not null,
  algo_hn_query_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  constraint proj_repo_and_algo_hn_query_pkey primary key (proj_repo_id, algo_hn_query_id),
  constraint proj_repo_and_algo_hn_query_proj_repo_id_fkey foreign key (proj_repo_id) references proj_repo(proj_repo_id) on delete cascade,
  constraint proj_repo_and_algo_hn_query_algo_hn_query_id_fkey foreign key (algo_hn_query_id) references algo_hn_query(algo_hn_query_id) on delete cascade
)
tablespace pg_default;

create table public.proj_repo_and_sbot_lin_ps(
  proj_repo_id bigint not null,
  sbot_lin_ps_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  constraint proj_repo_and_sbot_lin_ps_pkey primary key (proj_repo_id, sbot_lin_ps_id),
  constraint proj_repo_and_sbot_lin_ps_proj_repo_id_fkey foreign key (proj_repo_id) references proj_repo(proj_repo_id) on delete cascade,
  constraint proj_repo_and_sbot_lin_ps_lin_search_id_fkey foreign key (sbot_lin_ps_id) references sbot_lin_ps(sbot_lin_ps_id) on delete cascade
)
tablespace pg_default;

create table public.proj_repo_and_twitter_search(
  proj_repo_id bigint not null,
  twitter_search_id bigint not null,
  _created_at timestamp with time zone not null default now(),
  constraint proj_repo_and_twitter_search_pkey primary key (proj_repo_id, twitter_search_id),
  constraint proj_repo_and_twitter_search_proj_repo_id_fkey foreign key (proj_repo_id) references proj_repo(proj_repo_id) on delete cascade,
  constraint proj_repo_and_twitter_search_twitter_search_id_fkey foreign key (twitter_search_id) references
    twitter_search(twitter_search_id) on delete cascade
)
tablespace pg_default;

create table public.user_admin(
  user_id uuid not null,
  _created_at timestamp with time zone not null default now(),
  constraint user_admin_pkey primary key (user_id),
  constraint user_admin_user_id_fkey foreign key (user_id) references auth.users(id) on delete cascade
)
tablespace pg_default;

create table public.gthb_repo_contr(
  gthb_repo_id bigint not null,
  gthb_owner_id bigint not null,
  contributions bigint not null,
  _created_at timestamp with time zone not null default now(),
  constraint gthb_repo_contr_pkey primary key (gthb_repo_id, gthb_owner_id),
  constraint gthb_repo_contr_gthb_repo_id_fkey foreign key (gthb_repo_id) references gthb_repo(gthb_repo_id) on delete cascade,
  constraint gthb_repo_contr_gthb_owner_id_fkey foreign key (gthb_owner_id) references gthb_owner(gthb_owner_id) on delete cascade
)
tablespace pg_default;
