-- GRANT USAGE ON SCHEMA truffle TO anon, authenticated, service_role;
-- GRANT ALL ON ALL TABLES IN SCHEMA truffle TO anon, authenticated, service_role;
-- GRANT ALL ON ALL ROUTINES IN SCHEMA truffle TO anon, authenticated, service_role;
-- GRANT ALL ON ALL SEQUENCES IN SCHEMA truffle TO anon, authenticated, service_role;
-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA truffle GRANT ALL ON TABLES TO anon, authenticated, service_role;
-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA truffle GRANT ALL ON ROUTINES TO anon, authenticated, service_role;
-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA truffle GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;

-- #1 GitHub Owner (User, Organization) 
create table
  public.github_owner (
    github_owner_id bigint generated by default as identity,
    type text not null check (
      type in ('User', 'Organization')
    ),
    _created_at timestamp with time zone not null default now(),
    constraint github_owner_pkey primary key (github_owner_id)
  ) tablespace pg_default;

-- #2 GitHub User
create table
  public.github_user (
    github_user_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    avatar_url text not null,
    bio text not null,
    bio_html text not null,
    company text not null,
    company_html text not null,
    created_at timestamp with time zone not null,
    email text not null,
    followers_total_count text not null,
    login text not null,
    name text not null,
    repositories_total_count bigint not null,
    twitter_username text not null,
    url text not null,
    website_url text not null,
    constraint github_user_pkey primary key (github_user_id),
    constraint github_user_github_user_id_fkey foreign key (github_user_id) references github_owner (github_owner_id) on delete cascade
  ) tablespace pg_default;

-- #3 GitHub Organization
create table
  public.github_organization (
    github_organization_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    avatar_url text not null,
    created_at timestamp with time zone not null,
    description text not null,
    description_html text not null,
    email text not null,
    login text not null,
    name text not null,
    repositories_total_count bigint not null,
    twitter_username text not null,
    url text not null,
    website_url text not null,
    constraint github_organization_pkey primary key (github_organization_id),
    constraint github_organization_github_organization_id_fkey foreign key (github_organization_id) references github_owner (github_owner_id) on delete cascade,
    constraint github_organization_login_uq unique (login)
  ) tablespace pg_default;

-- #4 GitHub Language
create table
  public.github_language (
    github_language_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    color text not null,
    title text not null,
    constraint github_language_pkey primary key (github_language_id),
    constraint github_language_title_uq unique (title)
  ) tablespace pg_default;

-- #5 GitHub Repo to Language
create table
  public.github_repo_and_github_language (
    github_repo_id bigint not null,
    github_language_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    constraint github_repo_language_pkey primary key (github_repo_id, github_language_id)
  ) tablespace pg_default;

-- #6 GitHub Repo
create table
  public.github_repo (
    github_repo_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    created_at timestamp with time zone not null,
    description text not null,
    fork_count bigint not null,
    homepage_url text not null,
    is_in_organization boolean not null,
    issues_total_count bigint not null,
    name text not null,
    github_owner_id bigint not null,
    pull_requests_total_count bigint not null,
    url text not null,
    stargazer_count bigint not null,
    constraint github_repo_pkey primary key (github_repo_id),
    constraint github_repo_github_owner_id_fkey foreign key (github_owner_id) references github_owner (github_owner_id) on delete cascade,
    constraint github_repo_name_and_github_owner_id_uq unique (name, github_owner_id)
  ) tablespace pg_default;

-- #7 Repo Issue
create table
  public.github_repo_issue (
    github_repo_issue_id bigint generated by default as identity,
    github_repo_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    created_at timestamp with time zone not null,
    html_url text not null,
    body text not null,
    title text not null,
    state text not null,
    constraint github_repo_issue_pkey primary key (github_repo_issue_id),
    constraint github_repo_issue_github_repo_id_fkey foreign key (github_repo_id) references github_repo (github_repo_id) on delete cascade
  ) tablespace pg_default;

-- #8 Repo Forks
create table
  public.github_repo_fork (
    github_repo_fork_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    github_repo_id bigint not null,
    constraint github_repo_fork_pkey primary key (github_repo_fork_id),
    constraint github_repo_fork_github_repo_id_fkey foreign key (github_repo_id) references github_repo (github_repo_id) on delete cascade
  ) tablespace pg_default;

-- #9 GitHub Star
create table
  public.github_star (
    github_star_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    github_repo_id bigint not null,
    starred_at timestamp with time zone not null,
    github_user_id bigint not null,
    constraint github_star_pkey primary key (github_star_id),
    constraint github_star_github_repo_id_fkey foreign key (github_repo_id) references github_repo (github_repo_id) on delete cascade,
    constraint github_star_github_user_id_fkey foreign key (github_user_id) references github_user (github_user_id) on delete cascade,
    constraint github_star_starred_at_and_github_user_id_and_github_repo_id_uq unique(starred_at, github_user_id, github_repo_id)
  ) tablespace pg_default;

-- #10 GitHub Trending
create table
  public.github_trending (
    github_trending_id bigint generated by default as identity,
    github_repo_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    date_range text not null check (date_range in ('today', 'week', 'month')),
    language text not null,
    constraint github_trending_pkey primary key (github_trending_id),
    constraint github_trending_github_repo_id_fkey foreign key (github_repo_id) references github_repo (github_repo_id)
  ) tablespace pg_default;

-- #11 Categories
create table
  public.project_category (
    project_category_id bigint generated by default as identity,
    name text not null,
    user_id uuid not null, 
    constraint project_category_pkey primary key (project_category_id),
    constraint project_category_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  ) tablespace pg_default;

-- #12 Allowed Users
create table
  public.users_whitelist (
    users_whitelist_id bigint generated by default as identity not null,
    _created_at timestamp with time zone null default now(),
    email text null,
    constraint users_whitelist_pkey primary key (users_whitelist_id),
    constraint users_whitelist_email_uq unique (email)
  ) tablespace pg_default;

-- #13 Hackernews Tag
create table
  public.hackernews_tag (
    hackernews_tag_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    title text not null,
    constraint hackernews_tag_pkey primary key (hackernews_tag_id),
    constraint hackernews_tag_title_uq unique (title)
  ) tablespace pg_default;

-- #14 Hackernews Story
create table
  public.hackernews_story (
    hackernews_story_id bigint generated by default as identity,
     _created_at timestamp with time zone not null default now(),
    title text not null,
    url text not null,
    author text not null,
    points bigint not null,
    story_text text not null,
    comments text not null,
    constraint hackernews_story_pkey primary key (hackernews_story_id),
    constraint hackernews_story_url_uq unique (url)
  ) tablespace pg_default;

-- #15 Metadata AI 
create table
  public.project_repo_metadata (
    project_repo_metadata_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    hackernews_eli5 text not null,
    repo_eli5 text not null,
    constraint project_repo_metadata_pkey primary key (project_repo_metadata_id)
  ) tablespace pg_default;

-- #16 User API Key to platform
create table
  public.user_api_key (
    user_api_key_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    key uuid not null default gen_random_uuid (),
    user_id uuid not null,
    constraint user_api_key_pkey primary key (user_api_key_id),
    constraint user_api_key_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade,
    constraint user_api_key_key_key unique (key),
    constraint user_api_key_user_id_uq unique (user_id)
  ) tablespace pg_default;

-- #17 Twitter User
create table
  public.twitter_user (
    twitter_user_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    name text not null,
    screen_name text not null,
    description text not null,
    location text not null,
    url text not null,
    followers_count bigint not null,
    constraint twitter_user_pkey primary key (twitter_user_id),
    constraint twitter_user_screen_name_uq unique (screen_name)
  ) tablespace pg_default;

-- #18 Twitter Search (more info needed?)
create table
  public.twitter_search (
    twitter_search_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    created_at timestamp with time zone not null,
    full_text text not null,
    constraint twitter_search_pkey primary key (twitter_search_id)
  ) tablespace pg_default;

-- #19 Twitter Search User
create table
  public.twitter_search_and_user (
    twitter_search_id bigint not null,
    twitter_user_id bigint not null,
    _created_at timestamp with time zone not null default now(),
    constraint twitter_search_and_user_pkey primary key (twitter_search_id, twitter_user_id),
    constraint twitter_search_id_fkey foreign key (twitter_search_id) references twitter_search (twitter_search_id) on delete cascade,
    constraint twitter_user_id_fkey foreign key (twitter_user_id) references twitter_user (twitter_user_id) on delete cascade
  );

-- #20 LinkedIn Profile Search
create table
  public.linkedin_profile_search (
    linkedin_profile_search_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    name text not null,
    url text not null,
    sphere text not null,
    followers bigint not null,
    about text not null,
    language text not null,
    constraint linkedin_profile_search_pkey primary key (linkedin_profile_search_id),
    constraint linkedin_profile_search_url_and_name_uq unique (url, name) -- ? don't know yet
  ) tablespace pg_default;

-- #21 LinkedIn Profile Search Update
create table
  public.linkedin_profile_search_update (
    linkedin_profile_search_update_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    linkedin_profile_search_id bigint not null,
    title text not null,
    update_time text not null,
    update_text text not null,
    likes_count bigint not null,
    comments_count bigint not null,
    constraint linkedin_profile_search_update_pkey primary key (linkedin_profile_search_update_id),
    constraint linkedin_profile_search_update_linkedin_profile_search_id_fkey foreign key (linkedin_profile_search_id) references linkedin_profile_search (linkedin_profile_search_id) on delete cascade,
    constraint linkedin_profile_search_update_title_and_update_text_and_linkedin_profile_search_id_uq unique (title, update_text, linkedin_profile_search_id)
  );

-- Project table
create table
  public.project_repo (
    project_repo_id bigint generated by default as identity,
    _created_at timestamp with time zone not null default now(),
    github_repo_id bigint not null,
    project_repo_metadata_id bigint not null,
    user_id uuid not null,
    constraint project_repo_pkey primary key (project_repo_id),
    constraint project_repo_github_repo_id_fkey foreign key (github_repo_id) references github_repo (github_repo_id) on delete cascade,
    constraint project_repo_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade,
    constraint project_repo_project_repo_metadata_id_fkey foreign key (project_repo_metadata_id) references  project_repo_metadata (project_repo_metadata_id) on delete cascade
  ) tablespace pg_default;



-- Project Category to Project Repo
create table
  public.project_category_and_project_repo (
    project_category_id bigint not null,
    project_repo_id bigint not null,
    constraint project_category_and_project_repo_pkey primary key (project_category_id, project_repo_id),
    constraint project_category_and_project_repo_project_category_id_fkey foreign key (project_category_id) references project_category (project_category_id) on delete cascade,
    constraint project_category_and_project_repo_project_repo_id_fkey foreign key (project_repo_id) references project_repo (project_repo_id) on delete cascade
  ) tablespace pg_default;

-- Hackernews Story to Tags
create table
  public.hackernews_story_and_hackernews_tag (
    _created_at timestamp with time zone not null default now(),
    hackernews_story_id bigint not null,
    hackernews_tag_id bigint not null,
    constraint hackernews_story_and_hackernews_tag_pkey primary key (hackernews_story_id, hackernews_tag_id),
    constraint hackernews_story_and_hackernews_tag_hackernews_story_fkey foreign key (hackernews_story_id) references hackernews_story (hackernews_story_id) on delete cascade,
    constraint hackernews_story_and_hackernews_tag_hackernews_tag_id_fkey foreign key (hackernews_tag_id) references hackernews_tag (hackernews_tag_id) on delete cascade
  ) tablespace pg_default;

-- Project Repo to Hackernews Story
create table
  public.project_repo_and_hackernews_story (
    project_repo_id bigint not null,
    hackernews_story_id bigint not null,
     _created_at timestamp with time zone not null default now(),
    constraint project_repo_hackernews_story_pkey primary key (project_repo_id, hackernews_story_id),
    constraint project_repo_and_hackernews_story_project_repo_id_fkey foreign key (project_repo_id) references project_repo (project_repo_id) on delete cascade,
    constraint project_repo_and_hackernews_story_hackernews_story_id_fkey foreign key (hackernews_story_id) references hackernews_story (hackernews_story_id) on delete cascade
  ) tablespace pg_default;

-- Project Repo to LinkedIn Search
create table
  public.project_repo_and_linkedin_profile_search (
    project_repo_id bigint not null,
    linkedin_profile_search_id bigint not null,
     _created_at timestamp with time zone not null default now(),
    constraint project_repo_and_linkedin_profile_search_pkey primary key (project_repo_id, linkedin_profile_search_id),
    constraint project_repo_and_linkedin_profile_search_project_repo_id_fkey foreign key (project_repo_id) references project_repo (project_repo_id) on delete cascade,
    constraint project_repo_and_linkedin_profile_search_linkedin_search_id_fkey foreign key (linkedin_profile_search_id) references linkedin_profile_search (linkedin_profile_search_id) on delete cascade
  ) tablespace pg_default;

-- Project Repo to Twitter Search
create table
  public.project_repo_and_twitter_search (
    project_repo_id bigint not null,
    twitter_search_id bigint not null,
     _created_at timestamp with time zone not null default now(),
    constraint project_repo_and_twitter_search_pkey primary key (project_repo_id, twitter_search_id),
    constraint project_repo_and_twitter_search_project_repo_id_fkey foreign key (project_repo_id) references project_repo (project_repo_id) on delete cascade,
    constraint project_repo_and_twitter_search_twitter_search_id_fkey foreign key (twitter_search_id) references twitter_search (twitter_search_id) on delete cascade
  ) tablespace pg_default;