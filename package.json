{
  "name": "truffle-ai",
  "license": "MIT",
  "private": true,
  "config": {
    "env": "./config/variables/source-env-vars.sh"
  },
  "scripts": {
    "prepare": "if [ \"$NODE_ENV\" != \"production\" ] && [ \"$NODE_ENV\" != \"test\" ] && [ \"$NODE_ENV\" != \"build\" ]; then husky install; fi;",
    "test": "",
    "dev": "dev() { for i in \"$@\"; do $npm_package_config_env npm run dev -w \"$i\"; done; }; dev",
    "dev:app": "$npm_package_config_env concurrently -n gateway,server,repo-job,ui -c 'yellow,magenta,blue,green' 'npm run dev -w graphql-gateway' 'npm run dev -w graphql-server' 'npm run dev -w repo-job' 'npm run dev -w ui'",
    "dev:jobs": "$npm_package_config_env concurrently -n repo-job -c 'blue' 'npm run dev -w repo-job'",
    "dev:graphql-backend": "$npm_package_config_env concurrently -n gateway,server -c 'yellow,magenta' 'npm run dev -w graphql-gateway' 'npm run dev -w graphql-server'",
    "build": "build() { for i in \"$@\"; do $npm_package_config_env npm run build -w \"$i\"; done; }; build",
    "build:app": "$npm_package_config_env concurrently -n gateway,server,repo-job,ui -c 'yellow,magenta,blue,green' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server' 'npm run build -w repo-job' 'npm run build -w ui'",
    "build:jobs": "$npm_package_config_env concurrently -n repo-job -c 'blue,cyan' 'npm run build -w repo-job' 'npm run build -w preview-job'",
    "build:graphql-backend": "$npm_package_config_env concurrently -n gateway,server -c 'yellow,magenta' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server'",
    "serve": "serve() { for i in \"$@\"; do $npm_package_config_env npm run serve -w \"$i\"; done; }; serve",
    "serve:app": "$npm_package_config_env concurrently -n gateway,server,ui -c 'yellow,magenta,green' 'sleep 2 && npm run serve -w graphql-gateway' 'npm run serve -w graphql-server' 'npm run serve -w ui'",
    "serve:graphql-backend": "$npm_package_config_env concurrently -n gateway,server -c 'yellow,magenta' 'sleep 2 && npm run serve -w graphql-gateway' 'npm run serve -w graphql-server'",
    "lint": "concurrently -n gateway,server,ui,repo-job,preview-job -c 'yellow,magenta,green,blue,cyan' 'npm run lint -w graphql-gateway' 'npm run lint -w graphql-server' 'npm run lint -w repo-job' 'npm run lint -w ui'",
    "prettier": "prettier --check .",
    "prettier:write": "prettier --write .",
    "prettier:check": "prettier --check .",
    "compose:up": "up() { $npm_package_config_env docker compose -f config/compose/docker-compose.$1.yml --env-file .env.$1 up $2; }; up",
    "compose:down": "down() { $npm_package_config_env docker compose -f config/compose/docker-compose.$1.yml --env-file .env.$1 down $2; }; down",
    "compose:build": "build() { $npm_package_config_env docker compose -f config/compose/docker-compose.$1.yml --env-file .env.$1 build $2; }; build",
    "variables:k8s": "cd config/variables && deno task generate:k8s",
    "variables:env": "cd config/variables && deno task generate:env",
    "doctl:doks-save": "doctl kubernetes cluster kubeconfig save truffle-ai-cluster",
    "terraform": "t() { cd config/terraform/workspace/\"$1\" && TF_VAR_git_commit_tags=$(git log --branches=\"*\" -n 3 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_is_cli=true TF_VAR_image_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_message=\"run from command line\" terraform \"${@:2}\"; }; t",
    "terraform:cluster": "cd config/terraform/workspace/cluster && TF_VAR_git_commit_tags=$(git log --branches=\"*\" -n 3 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_is_cli=true TF_VAR_image_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_message=\"run from command line\" terraform apply -auto-approve",
    "terraform:setup": "cd config/terraform/workspace/setup && TF_VAR_git_commit_tags=$(git log --branches=\"*\" -n 3 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_is_cli=true TF_VAR_image_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_message=\"run from command line\" terraform apply -auto-approve",
    "terraform:initialize": "npm run terraform:cluster; npm run terraform:setup",
    "terraform:production": "cd config/terraform/workspace/production && terraform workspace select production && TF_VAR_git_commit_tags=$(git log --branches=\"*\" -n 3 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_commit_tags=$(git log --branches=\"*\" -n 10 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_is_cli=true TF_VAR_image_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_message=\"run from command line\" terraform apply",
    "terraform:staging": "cd config/terraform/workspace/staging && terraform workspace select staging && TF_VAR_git_commit_tags=$(git log --branches=\"*\" -n 3 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_commit_tags=$(git log --branches=\"*\" -n 10 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_is_cli=true TF_VAR_image_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_message=\"run from command line\" terraform apply",
    "terraform:commit": "cd config/terraform/workspace/commit && TF_VAR_git_commit_tags=$(git log --branches=\"*\" -n 3 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_commit_tags=$(git log --branches=\"*\" -n 10 --format=format:%H | jq -R -s -c 'split(\"\n\")') TF_VAR_is_cli=true TF_VAR_image_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_tag=$(git log --format=\"%H\" -n 1) TF_VAR_git_commit_message=\"run from command line\" terraform apply",
    "terraform:destroy": "npm run terraform production destroy -- -auto-approve && npm run terraform staging destroy -- -auto-approve && npm run terraform commit destroy -- -auto-approve && npm run terraform setup destroy -- -auto-approve && npm run terraform cluster destroy -- -auto-approve",
    "terraform:all": "npm run terraform cluster apply -- -auto-approve && npm run terraform setup apply -- -auto-approve && npm run terraform commit apply -- -auto-approve && npm run terraform staging apply -- -auto-approve && npm run terraform production apply -- -auto-approve"
  },
  "workspaces": [
    "packages/*",
    "config/*"
  ],
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "prettier --write .",
      "eslint --no-error-on-unmatched-pattern"
    ],
    "*.{html,css,scss,sass,md,mdx,yml}": "prettier --write ."
  },
  "devDependencies": {
    "@truffle/eslint-config-base": "0.0.1",
    "@typescript-eslint/eslint-plugin": "^6.7.5",
    "@typescript-eslint/parser": "^6.7.5",
    "concurrently": "^8.0.1",
    "eslint": "^8.51.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-config-sonarjs": "^1.2.0",
    "eslint-import-resolver-typescript": "^3.5.5",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-sonarjs": "^0.19.0",
    "husky": "^8.0.0",
    "lint-staged": "^13.2.2",
    "prettier": "^2.8.8"
  },
  "dependencies": {
    "lodash": "^4.17.21"
  }
}
