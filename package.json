{
  "name": "truffle-ai",
  "license": "MIT",
  "private": true,
  "config": {
    "env": ". ./config/scripts/env/source-env.sh"
  },
  "scripts": {
    "husky:install": "husky install;",
    "test": "npm run prettier:check && npm run lint",
    "alias": "zx << 'EOF'\necho('Run this'); echo(`> ${chalk.cyan('source ./config/alias/aliases.txt')}`);\nEOF",
    "ws": "ws() { $npm_package_config_env && npm run ${@:2} -w \"$1\"; }; ws",
    "helm": "./config/scripts/run-scripts/list.mjs helm",
    "helm:app": "./config/scripts/run-scripts/list.mjs helm:app",
    "helm:app:uninstall": "$npm_package_config_env && ./config/scripts/helm/app/uninstall.mjs",
    "helm:app:uninstall:commit": "$npm_package_config_env && ./config/scripts/helm/app/uninstall-env.mjs commit",
    "helm:app:uninstall:staging": "$npm_package_config_env && ./config/scripts/helm/app/uninstall-env.mjs staging",
    "helm:app:uninstall:production": "$npm_package_config_env && ./config/scripts/helm/app/uninstall-env.mjs production",
    "helm:app:local": "$npm_package_config_env && ./config/scripts/helm/app/local.mjs",
    "helm:app:publish": "$npm_package_config_env && ./config/scripts/helm/app/publish.mjs",
    "helm:ingress": "./config/scripts/run-scripts/list.mjs helm:ingress",
    "helm:ingress:upgrade": "$npm_package_config_env && ./config/scripts/helm/ingress/upgrade.mjs",
    "helm:ingress:ip": "$npm_package_config_env && ./config/scripts/helm/ingress/ip.mjs",
    "helm:list": "./config/scripts/helm/list.mjs",
    "dev": "dev() { for i in \"$@\"; do $npm_package_config_env && npm run dev -w \"$i\"; done; }; dev",
    "dev:app": "$npm_package_config_env && concurrently -n gateway,server,ui -c 'yellow,magenta,cyan' 'npm run dev -w graphql-gateway' 'npm run dev -w graphql-server' 'npm run dev -w ui'",
    "dev:jobs": "$npm_package_config_env && concurrently -n repo-job -c 'green' 'npm run dev -w repo-job'",
    "dev:graphql-backend": "$npm_package_config_env && concurrently -n gateway,server -c 'yellow,magenta' 'npm run dev -w graphql-gateway' 'npm run dev -w graphql-server'",
    "build": "build() { for i in \"$@\"; do $npm_package_config_env && npm run build -w \"$i\"; done; }; build",
    "build:all": "$npm_package_config_env && concurrently -n gateway,server,repo-job,ui -c 'yellow,magenta,cyan,green' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server' 'npm run build -w ui' 'npm run build -w repo-job'",
    "build:app": "$npm_package_config_env && concurrently -n gateway,server,ui -c 'yellow,magenta,cyan' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server' 'npm run build -w ui'",
    "build:jobs": "$npm_package_config_env && concurrently -n repo-job -c 'green' 'npm run build -w repo-job'",
    "build:graphql-backend": "$npm_package_config_env && concurrently -n gateway,server -c 'yellow,magenta' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server'",
    "serve": "serve() { for i in \"$@\"; do $npm_package_config_env && npm run serve -w \"$i\"; done; }; serve",
    "serve:app": "$npm_package_config_env && concurrently -n gateway,server,ui -c 'yellow,magenta,cyan' 'sleep 2 && npm run serve -w graphql-gateway' 'npm run serve -w graphql-server' 'npm run serve -w ui'",
    "serve:graphql-backend": "$npm_package_config_env && concurrently -n gateway,server -c 'yellow,magenta' 'sleep 2 && npm run serve -w graphql-gateway' 'npm run serve -w graphql-server'",
    "lint": "concurrently -n gateway,server,ui,repo-job -c 'yellow,magenta,cyan,green' 'npm run lint -w graphql-gateway' 'npm run lint -w graphql-server' 'npm run lint -w ui' 'npm run lint -w repo-job'",
    "prettier": "./config/scripts/run-scripts/list.mjs prettier",
    "prettier:write": "prettier --write .",
    "prettier:check": "prettier --check .",
    "compose": "./config/scripts/run-scripts/list.mjs compose",
    "compose:up": "up() { $npm_package_config_env && docker compose -f config/compose/docker-compose.$1.yml --env-file .env.$1 up $2; }; up",
    "compose:down": "down() { $npm_package_config_env && docker compose -f config/compose/docker-compose.$1.yml --env-file .env.$1 down $2; }; down",
    "compose:build": "build() { $npm_package_config_env && docker compose -f config/compose/docker-compose.$1.yml --env-file .env.$1 build $2; }; build",
    "variables": "./config/scripts/run-scripts/list.mjs variables",
    "variables:env": "deno task generate:env",
    "variables:values": "deno task generate:values",
    "k8s": "./config/scripts/run-scripts/list.mjs k8s",
    "k8s:production": "$npm_package_config_env && doctl kubernetes cluster kubeconfig save $PRODUCTION_CLUSTER",
    "k8s:staging": "$npm_package_config_env && doctl kubernetes cluster kubeconfig save $TEST_CLUSTER",
    "k8s:commit": "$npm_package_config_env && doctl kubernetes cluster kubeconfig save $TEST_CLUSTER",
    "k8s:namespace": "namespace() { kubectl config set-context --current --namespace=$1; }; namespace",
    "k8s:cluster": "cluster() { kubectl config use-context $1; }; cluster",
    "terraform": "t() { cd config/terraform/workspaces/ \"$1\" terraform \"${@:2}\"; }; t",
    "env": "$npm_package_config_env && ./config/scripts/env/print-env.mjs",
    "env:production": "./config/scripts/env/set-env.mjs production",
    "env:staging": "./config/scripts/env/set-env.mjs staging",
    "env:commit": "./config/scripts/env/set-env.mjs commit"
  },
  "workspaces": [
    "packages/*",
    "config/*"
  ],
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "prettier --write .",
      "eslint --no-error-on-unmatched-pattern"
    ],
    "*.{html,css,scss,sass,md,mdx,yml}": "prettier --write ."
  },
  "devDependencies": {
    "@parcel/transformer-graphql": "^2.10.3",
    "@parcel/transformer-inline-string": "^2.10.3",
    "@trivago/prettier-plugin-sort-imports": "^4.2.1",
    "@truffle/eslint-config-base": "0.0.1",
    "@typescript-eslint/eslint-plugin": "^6.7.5",
    "@typescript-eslint/parser": "^6.7.5",
    "concurrently": "^8.0.1",
    "crypto-browserify": "^3.12.0",
    "eslint": "^8.51.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-config-sonarjs": "^1.2.0",
    "eslint-import-resolver-typescript": "^3.5.5",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-sonarjs": "^0.19.0",
    "husky": "^8.0.0",
    "lint-staged": "^13.2.2",
    "os-browserify": "^0.3.0",
    "prettier": "^3.0.3",
    "prettier-plugin-tailwindcss": "^0.5.6",
    "stream-browserify": "^3.0.0",
    "zx": "^7.2.3"
  }
}
