{
  "name": "truffle-ai",
  "license": "MIT",
  "private": true,
  "config": {
    "env": "./config/envs/source-envs.sh"
  },
  "scripts": {
    "prepare": "if [ \"$NODE_ENV\" != \"production\" ] && [ \"$NODE_ENV\" != \"test\" ] && [ \"$NODE_ENV\" != \"build\" ]; then husky install; fi;",
    "test": "",
    "dev": "$npm_package_config_env && concurrently -n gateway,server,repo-job,ui -c 'yellow,magenta,blue,green' 'npm run dev -w graphql-gateway' 'npm run dev -w graphql-server' 'npm run dev -w repo-job' 'npm run dev -w ui'",
    "dev:backend": "$npm_package_config_env && concurrently -n gateway,server,repo-job -c 'yellow,magenta,blue' 'npm run dev -w graphql-gateway' 'npm run dev -w graphql-server' 'npm run dev -w repo-job'",
    "dev:jobs": "$npm_package_config_env && concurrently -n repo-job -c 'blue' 'npm run dev -w repo-job'",
    "dev:services": "$npm_package_config_env && concurrently -n gateway,server -c 'yellow,magenta' 'npm run dev -w graphql-gateway' 'npm run dev -w graphql-server'",
    "build": "$npm_package_config_env && concurrently -n gateway,server,repo-job,ui -c 'yellow,magenta,blue,green' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server' 'npm run build -w repo-job' 'npm run build -w ui'",
    "build:backend": "$npm_package_config_env && concurrently -n gateway,server,repo-job -c 'yellow,magenta,blue' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server' 'npm run build -w repo-job'",
    "build:jobs": "$npm_package_config_env && concurrently -n repo-job -c 'blue' 'npm run build -w repo-job'",
    "build:services": "$npm_package_config_env && concurrently -n gateway,server -c 'yellow,magenta' 'npm run build -w graphql-gateway' 'npm run build -w graphql-server'",
    "serve": "$npm_package_config_env && concurrently -n gateway,server,ui -c 'yellow,magenta,green' 'sleep 2 && npm run serve -w graphql-gateway' 'npm run serve -w graphql-server' 'npm run serve -w ui'",
    "serve:services": "$npm_package_config_env && concurrently -n gateway,server -c 'yellow,magenta' 'sleep 2 && npm run serve -w graphql-gateway' 'npm run serve -w graphql-server'",
    "jobs": "$npm_package_config_env && concurrently -n repo-job -c blue 'npm run start -w repo-job'",
    "lint": "concurrently -n gateway,server,repo-job,ui -c 'yellow,magenta,blue,green' 'npm run lint -w graphql-gateway' 'npm run lint -w graphql-server' 'npm run lint -w repo-job' 'npm run lint -w ui'",
    "lint:backend": "concurrently -n gateway,server,repo-job -c 'yellow,magenta,blue' 'npm run lint -w graphql-gateway' 'npm run lint -w graphql-server' 'npm run lint -w repo-job'",
    "lint:jobs": "concurrently -n repo-job -c 'blue' 'npm run lint -w repo-job'",
    "lint:services": "concurrently -n gateway,server -c 'yellow,magenta' 'npm run lint -w graphql-gateway' 'npm run lint -w graphql-server'",
    "prettier:fix": "prettier --write .",
    "prettier:check": "prettier --check .",
    "compose-up:production": "$npm_package_config_env && docker compose -f config/docker-compose/docker-compose.production.yml --env-file .env.production up",
    "compose-up:staging": "$npm_package_config_env && docker compose -f config/docker-compose/docker-compose.staging.yml --env-file .env.staging up",
    "compose-up:commit": "$npm_package_config_env && docker compose -f config/docker-compose/docker-compose.commit.yml --env-file .env.commit up",
    "compose-build:production": "$npm_package_config_env && docker compose -f config/docker-compose/docker-compose.production.yml --env-file .env.production build",
    "compose-build:staging": "$npm_package_config_env && docker compose -f config/docker-compose/docker-compose.staging.yml --env-file .env.staging build",
    "compose-build:commit": "$npm_package_config_env && docker compose -f config/docker-compose/docker-compose.commit.yml --env-file .env.commit build",
    "generate:k8s": "cd config/envs && deno task generate:k8s",
    "generate:envs": "cd config/envs && deno task generate:envs",
    "doctl:connect": "doctl kubernetes cluster kubeconfig save truffle-ai-cluster",
    "terraform:create-cluster": "cd config/terraform && TF_VAR_git_commit_tag=exp$(git log --format=\"%H\" -n 1 | head -c16) TF_VAR_git_commit_message=\"run from command line\" terraform apply -target=module.doks-cluster",
    "terraform:init-cluster": "cd config/terraform && TF_VAR_git_commit_tag=exp$(git log --format=\"%H\" -n 1 | head -c16) TF_VAR_git_commit_message=\"run from command line\" terraform apply -target=module.init-doks-cluster",
    "terraform:apply": "cd config/terraform && TF_VAR_git_commit_tag=exp$(git log --format=\"%H\" -n 1 | head -c16) TF_VAR_git_commit_message=\"run from command line\" terraform apply",
    "terraform:plan": "cd config/terraform && TF_VAR_git_commit_tag=exp$(git log --format=\"%H\" -n 1 | head -c16) TF_VAR_git_commit_message=\"run from command line\" terraform plan"
  },
  "workspaces": [
    "packages/*",
    "config/*"
  ],
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "prettier --write .",
      "eslint --no-error-on-unmatched-pattern"
    ],
    "*.{html,css,scss,sass,md,mdx,yml}": "prettier --write ."
  },
  "devDependencies": {
    "@truffle/eslint-config-base": "0.0.1",
    "@typescript-eslint/eslint-plugin": "^6.7.5",
    "@typescript-eslint/parser": "^6.7.5",
    "concurrently": "^8.0.1",
    "eslint": "^8.51.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-config-sonarjs": "^1.2.0",
    "eslint-import-resolver-typescript": "^3.5.5",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-sonarjs": "^0.19.0",
    "husky": "^8.0.0",
    "lint-staged": "^13.2.2",
    "prettier": "^2.8.8"
  },
  "dependencies": {
    "lodash": "^4.17.21"
  }
}
