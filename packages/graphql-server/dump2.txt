(*data.ProjectData)(0xc00024c3c0)({
 GithubData: (data.GithubData) {
  ContributorCount: (int) 352,
  RepoPtr: (*github.GetRepository)(0xc000250000)({
   Repository: (struct { RepositoryTopics github.GetRepositoryRepositoryTopics "graphql:\"repositoryTopics(first: 10)\""; DefaultBranchRef struct { Name githubv4.String }; CreatedAt githubv4.DateTime; Description githubv4.String; ForkCount githubv4.Int; HomepageUrl githubv4.URI; IsInOrganization githubv4.Boolean; Issues struct { TotalCount githubv4.Int }; Languages github.GetRepositoryLanguages "graphql:\"languages(first: 100)\""; Name githubv4.String; Owner github.GetRepositoryOwner; PullRequests struct { TotalCount githubv4.Int }; Url githubv4.URI; StargazerCount githubv4.Int }) {
    RepositoryTopics: (github.GetRepositoryRepositoryTopics) {
     Edges: ([]struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) (len=10 cap=16) {
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=9) "minecraft",
         StargazerCount: (githubv4.Int) 23211
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=6) "bukkit",
         StargazerCount: (githubv4.Int) 67
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=16) "minecraft-server",
         StargazerCount: (githubv4.Int) 80
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=13) "minecraft-api",
         StargazerCount: (githubv4.Int) 38
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=21) "minecraft-performance",
         StargazerCount: (githubv4.Int) 5
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=5) "tacos",
         StargazerCount: (githubv4.Int) 1
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=4) "java",
         StargazerCount: (githubv4.Int) 153958
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=5) "paper",
         StargazerCount: (githubv4.Int) 77
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=9) "paper-api",
         StargazerCount: (githubv4.Int) 0
        }
       }
      },
      (struct { Node struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } } }) {
       Node: (struct { Topic struct { Name githubv4.String; StargazerCount githubv4.Int } }) {
        Topic: (struct { Name githubv4.String; StargazerCount githubv4.Int }) {
         Name: (githubv4.String) (len=13) "hacktoberfest",
         StargazerCount: (githubv4.Int) 31109
        }
       }
      }
     }
    },
    DefaultBranchRef: (struct { Name githubv4.String }) {
     Name: (githubv4.String) (len=6) "master"
    },
    CreatedAt: (githubv4.DateTime) 2016-01-22 05:40:19 +0000 UTC,
    Description: (githubv4.String) (len=111) "The most widely used, high performance Minecraft server that aims to fix gameplay and mechanics inconsistencies",
    ForkCount: (githubv4.Int) 2188,
    HomepageUrl: (githubv4.URI) https://papermc.io/,
    IsInOrganization: (githubv4.Boolean) true,
    Issues: (struct { TotalCount githubv4.Int }) {
     TotalCount: (githubv4.Int) 6151
    },
    Languages: (github.GetRepositoryLanguages) {
     Edges: ([]struct { Node struct { Color githubv4.String; Name githubv4.String } }) (len=2 cap=2) {
      (struct { Node struct { Color githubv4.String; Name githubv4.String } }) {
       Node: (struct { Color githubv4.String; Name githubv4.String }) {
        Color: (githubv4.String) (len=7) "#89e051",
        Name: (githubv4.String) (len=5) "Shell"
       }
      },
      (struct { Node struct { Color githubv4.String; Name githubv4.String } }) {
       Node: (struct { Color githubv4.String; Name githubv4.String }) {
        Color: (githubv4.String) (len=7) "#b07219",
        Name: (githubv4.String) (len=4) "Java"
       }
      }
     }
    },
    Name: (githubv4.String) (len=5) "Paper",
    Owner: (github.GetRepositoryOwner) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/7608950?v=4,
     Login: (githubv4.String) (len=7) "PaperMC",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 43
     },
     Url: (githubv4.URI) https://github.com/PaperMC,
     Organization: (github.GetRepositoryOwnerOrganization) {
      CreatedAt: (githubv4.DateTime) 2014-05-17 05:43:26 +0000 UTC,
      Description: (githubv4.String) (len=128) "PaperMC is a Minecraft Software organization focusing on improving the Minecraft ecosystem with faster and more secure software.",
      DescriptionHtml: (githubv4.String) (len=139) "<div>PaperMC is a Minecraft Software organization focusing on improving the Minecraft ecosystem with faster and more secure software.</div>",
      OrgEmail: (githubv4.String) (len=16) "admin@papermc.io",
      Name: (githubv4.String) (len=7) "PaperMC",
      TwitterUsername: (githubv4.String) (len=12) "PaperPowered",
      WebsiteUrl: (githubv4.URI) https://papermc.io/
     },
     User: (github.GetRepositoryOwnerUser) {
      Bio: (githubv4.String) "",
      BioHtml: (githubv4.String) "",
      Company: (githubv4.String) "",
      CompanyHtml: (githubv4.String) "",
      CreatedAt: (githubv4.DateTime) 2014-05-17 05:43:26 +0000 UTC,
      UserEmail: (githubv4.String) "",
      Followers: (struct { TotalCount githubv4.Int }) {
       TotalCount: (githubv4.Int) 0
      },
      Name: (githubv4.String) (len=7) "PaperMC",
      TwitterUsername: (githubv4.String) (len=12) "PaperPowered",
      WebsiteUrl: (githubv4.URI) https://papermc.io/
     }
    },
    PullRequests: (struct { TotalCount githubv4.Int }) {
     TotalCount: (githubv4.Int) 4301
    },
    Url: (githubv4.URI) https://github.com/PaperMC/Paper,
    StargazerCount: (githubv4.Int) 9161
   }
  }),
  ContributorToUserMapPtr: (*map[*github.Contributor]*github.GetUser)(0xc0002a8068)((len=30) {
   (*github.Contributor)(0xc00011e840)({
    Login: (*string)(0xc0002935b0)((len=11) "Owen1212055"),
    ID: (*int64)(0xc000296c58)(23108066),
    NodeID: (*string)(0xc0002935c0)((len=20) "MDQ6VXNlcjIzMTA4MDY2"),
    AvatarURL: (*string)(0xc0002935d0)((len=52) "https://avatars.githubusercontent.com/u/23108066?v=4"),
    GravatarID: (*string)(0xc0002935e0)(""),
    URL: (*string)(0xc0002935f0)((len=40) "https://api.github.com/users/Owen1212055"),
    HTMLURL: (*string)(0xc000293600)((len=30) "https://github.com/Owen1212055"),
    FollowersURL: (*string)(0xc000293610)((len=50) "https://api.github.com/users/Owen1212055/followers"),
    FollowingURL: (*string)(0xc000293620)((len=63) "https://api.github.com/users/Owen1212055/following{/other_user}"),
    GistsURL: (*string)(0xc000293630)((len=56) "https://api.github.com/users/Owen1212055/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293640)((len=63) "https://api.github.com/users/Owen1212055/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293650)((len=54) "https://api.github.com/users/Owen1212055/subscriptions"),
    OrganizationsURL: (*string)(0xc000293660)((len=45) "https://api.github.com/users/Owen1212055/orgs"),
    ReposURL: (*string)(0xc000293670)((len=46) "https://api.github.com/users/Owen1212055/repos"),
    EventsURL: (*string)(0xc000293680)((len=57) "https://api.github.com/users/Owen1212055/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293690)((len=56) "https://api.github.com/users/Owen1212055/received_events"),
    Type: (*string)(0xc0002936a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296c74)(false),
    Contributions: (*int)(0xc000296c78)(172),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00030c240)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/23108066?u=35ff2ef8665984aec0ca48821fe1ac73d43345db&v=4,
     Login: (githubv4.String) (len=11) "Owen1212055",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 44
     },
     Url: (githubv4.URI) https://github.com/Owen1212055,
     Bio: (githubv4.String) (len=46) "Java Developer & Open Source Developer @ Paper",
     BioHtml: (githubv4.String) (len=61) "<div>Java Developer &amp; Open Source Developer @ Paper</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2016-10-27 20:44:42 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 77
     },
     Name: (githubv4.String) (len=4) "Owen",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011f3f0)({
    Login: (*string)(0xc0005ce730)((len=10) "Brokkonaut"),
    ID: (*int64)(0xc000296ec8)(4002215),
    NodeID: (*string)(0xc0005ce740)((len=20) "MDQ6VXNlcjQwMDIyMTU="),
    AvatarURL: (*string)(0xc0005ce750)((len=51) "https://avatars.githubusercontent.com/u/4002215?v=4"),
    GravatarID: (*string)(0xc0005ce760)(""),
    URL: (*string)(0xc0005ce770)((len=39) "https://api.github.com/users/Brokkonaut"),
    HTMLURL: (*string)(0xc0005ce780)((len=29) "https://github.com/Brokkonaut"),
    FollowersURL: (*string)(0xc0005ce790)((len=49) "https://api.github.com/users/Brokkonaut/followers"),
    FollowingURL: (*string)(0xc0005ce7a0)((len=62) "https://api.github.com/users/Brokkonaut/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce7b0)((len=55) "https://api.github.com/users/Brokkonaut/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce7c0)((len=62) "https://api.github.com/users/Brokkonaut/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce7d0)((len=53) "https://api.github.com/users/Brokkonaut/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce7e0)((len=44) "https://api.github.com/users/Brokkonaut/orgs"),
    ReposURL: (*string)(0xc0005ce7f0)((len=45) "https://api.github.com/users/Brokkonaut/repos"),
    EventsURL: (*string)(0xc0005ce800)((len=56) "https://api.github.com/users/Brokkonaut/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce810)((len=55) "https://api.github.com/users/Brokkonaut/received_events"),
    Type: (*string)(0xc0005ce820)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296ee4)(false),
    Contributions: (*int)(0xc000296ee8)(27),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc0005d0180)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/4002215?u=cbcab239eafdac40ae041d7fbda6eef8a6cb191f&v=4,
     Login: (githubv4.String) (len=10) "Brokkonaut",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 69
     },
     Url: (githubv4.URI) https://github.com/Brokkonaut,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2013-03-29 03:47:31 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 20
     },
     Name: (githubv4.String) "",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011f760)({
    Login: (*string)(0xc0005cec30)((len=7) "SoSeDiK"),
    ID: (*int64)(0xc000296f88)(19875118),
    NodeID: (*string)(0xc0005cec40)((len=20) "MDQ6VXNlcjE5ODc1MTE4"),
    AvatarURL: (*string)(0xc0005cec50)((len=52) "https://avatars.githubusercontent.com/u/19875118?v=4"),
    GravatarID: (*string)(0xc0005cec60)(""),
    URL: (*string)(0xc0005cec70)((len=36) "https://api.github.com/users/SoSeDiK"),
    HTMLURL: (*string)(0xc0005cec80)((len=26) "https://github.com/SoSeDiK"),
    FollowersURL: (*string)(0xc0005cec90)((len=46) "https://api.github.com/users/SoSeDiK/followers"),
    FollowingURL: (*string)(0xc0005ceca0)((len=59) "https://api.github.com/users/SoSeDiK/following{/other_user}"),
    GistsURL: (*string)(0xc0005cecb0)((len=52) "https://api.github.com/users/SoSeDiK/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005cecc0)((len=59) "https://api.github.com/users/SoSeDiK/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005cecd0)((len=50) "https://api.github.com/users/SoSeDiK/subscriptions"),
    OrganizationsURL: (*string)(0xc0005cece0)((len=41) "https://api.github.com/users/SoSeDiK/orgs"),
    ReposURL: (*string)(0xc0005cecf0)((len=42) "https://api.github.com/users/SoSeDiK/repos"),
    EventsURL: (*string)(0xc0005ced00)((len=53) "https://api.github.com/users/SoSeDiK/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ced10)((len=52) "https://api.github.com/users/SoSeDiK/received_events"),
    Type: (*string)(0xc0005ced20)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296f94)(false),
    Contributions: (*int)(0xc000296f98)(21),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc0005d0000)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/19875118?u=80b56efb3a1fa80015ab60a240665911a978a909&v=4,
     Login: (githubv4.String) (len=7) "SoSeDiK",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 35
     },
     Url: (githubv4.URI) https://github.com/SoSeDiK,
     Bio: (githubv4.String) (len=18) "Discord: @ sosedik",
     BioHtml: (githubv4.String) (len=29) "<div>Discord: @ sosedik</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2016-06-11 15:11:42 +0000 UTC,
     UserEmail: (githubv4.String) (len=19) "mrsosedik@gmail.com",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 15
     },
     Name: (githubv4.String) (len=7) "SoSeDiK",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011f290)({
    Login: (*string)(0xc0005ce530)((len=9) "kickash32"),
    ID: (*int64)(0xc000296e78)(8919730),
    NodeID: (*string)(0xc0005ce540)((len=20) "MDQ6VXNlcjg5MTk3MzA="),
    AvatarURL: (*string)(0xc0005ce550)((len=51) "https://avatars.githubusercontent.com/u/8919730?v=4"),
    GravatarID: (*string)(0xc0005ce560)(""),
    URL: (*string)(0xc0005ce570)((len=38) "https://api.github.com/users/kickash32"),
    HTMLURL: (*string)(0xc0005ce580)((len=28) "https://github.com/kickash32"),
    FollowersURL: (*string)(0xc0005ce590)((len=48) "https://api.github.com/users/kickash32/followers"),
    FollowingURL: (*string)(0xc0005ce5a0)((len=61) "https://api.github.com/users/kickash32/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce5b0)((len=54) "https://api.github.com/users/kickash32/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce5c0)((len=61) "https://api.github.com/users/kickash32/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce5d0)((len=52) "https://api.github.com/users/kickash32/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce5e0)((len=43) "https://api.github.com/users/kickash32/orgs"),
    ReposURL: (*string)(0xc0005ce5f0)((len=44) "https://api.github.com/users/kickash32/repos"),
    EventsURL: (*string)(0xc0005ce600)((len=55) "https://api.github.com/users/kickash32/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce610)((len=54) "https://api.github.com/users/kickash32/received_events"),
    Type: (*string)(0xc0005ce620)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296e94)(false),
    Contributions: (*int)(0xc000296e98)(34),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000394000)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/8919730?v=4,
     Login: (githubv4.String) (len=9) "kickash32",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 12
     },
     Url: (githubv4.URI) https://github.com/kickash32,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2014-09-25 19:19:24 +0000 UTC,
     UserEmail: (githubv4.String) (len=19) "kickash32@gmail.com",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 5
     },
     Name: (githubv4.String) (len=10) "Omer Uddin",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011f1e0)({
    Login: (*string)(0xc0005ce430)((len=10) "Warriorrrr"),
    ID: (*int64)(0xc000296e60)(50800980),
    NodeID: (*string)(0xc0005ce440)((len=20) "MDQ6VXNlcjUwODAwOTgw"),
    AvatarURL: (*string)(0xc0005ce450)((len=52) "https://avatars.githubusercontent.com/u/50800980?v=4"),
    GravatarID: (*string)(0xc0005ce460)(""),
    URL: (*string)(0xc0005ce470)((len=39) "https://api.github.com/users/Warriorrrr"),
    HTMLURL: (*string)(0xc0005ce480)((len=29) "https://github.com/Warriorrrr"),
    FollowersURL: (*string)(0xc0005ce490)((len=49) "https://api.github.com/users/Warriorrrr/followers"),
    FollowingURL: (*string)(0xc0005ce4a0)((len=62) "https://api.github.com/users/Warriorrrr/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce4b0)((len=55) "https://api.github.com/users/Warriorrrr/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce4c0)((len=62) "https://api.github.com/users/Warriorrrr/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce4d0)((len=53) "https://api.github.com/users/Warriorrrr/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce4e0)((len=44) "https://api.github.com/users/Warriorrrr/orgs"),
    ReposURL: (*string)(0xc0005ce4f0)((len=45) "https://api.github.com/users/Warriorrrr/repos"),
    EventsURL: (*string)(0xc0005ce500)((len=56) "https://api.github.com/users/Warriorrrr/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce510)((len=55) "https://api.github.com/users/Warriorrrr/received_events"),
    Type: (*string)(0xc0005ce520)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296e6c)(false),
    Contributions: (*int)(0xc000296e70)(35),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00042c180)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/50800980?u=defc47d977da1225dcb9f880d9255dce1bbb47c6&v=4,
     Login: (githubv4.String) (len=10) "Warriorrrr",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 28
     },
     Url: (githubv4.URI) https://github.com/Warriorrrr,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2019-05-19 14:16:11 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 26
     },
     Name: (githubv4.String) (len=7) "Warrior",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011ee70)({
    Login: (*string)(0xc000293eb0)((len=10) "MiniDigger"),
    ID: (*int64)(0xc000296db0)(2185527),
    NodeID: (*string)(0xc000293ec0)((len=20) "MDQ6VXNlcjIxODU1Mjc="),
    AvatarURL: (*string)(0xc000293ed0)((len=51) "https://avatars.githubusercontent.com/u/2185527?v=4"),
    GravatarID: (*string)(0xc000293ee0)(""),
    URL: (*string)(0xc000293ef0)((len=39) "https://api.github.com/users/MiniDigger"),
    HTMLURL: (*string)(0xc000293f00)((len=29) "https://github.com/MiniDigger"),
    FollowersURL: (*string)(0xc000293f10)((len=49) "https://api.github.com/users/MiniDigger/followers"),
    FollowingURL: (*string)(0xc000293f20)((len=62) "https://api.github.com/users/MiniDigger/following{/other_user}"),
    GistsURL: (*string)(0xc000293f30)((len=55) "https://api.github.com/users/MiniDigger/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293f40)((len=62) "https://api.github.com/users/MiniDigger/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293f50)((len=53) "https://api.github.com/users/MiniDigger/subscriptions"),
    OrganizationsURL: (*string)(0xc000293f60)((len=44) "https://api.github.com/users/MiniDigger/orgs"),
    ReposURL: (*string)(0xc000293f70)((len=45) "https://api.github.com/users/MiniDigger/repos"),
    EventsURL: (*string)(0xc0005ce000)((len=56) "https://api.github.com/users/MiniDigger/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce010)((len=55) "https://api.github.com/users/MiniDigger/received_events"),
    Type: (*string)(0xc0005ce020)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296dbc)(false),
    Contributions: (*int)(0xc000296dc0)(86),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc0003940c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/2185527?v=4,
     Login: (githubv4.String) (len=10) "MiniDigger",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 182
     },
     Url: (githubv4.URI) https://github.com/MiniDigger,
     Bio: (githubv4.String) (len=58) "Random guy doing java and stuff, mostly minecraft related.",
     BioHtml: (githubv4.String) (len=69) "<div>Random guy doing java and stuff, mostly minecraft related.</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2012-08-20 20:16:38 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 245
     },
     Name: (githubv4.String) (len=19) "MiniDigger | Martin",
     TwitterUsername: (githubv4.String) (len=12) "xMiniDiggerx",
     WebsiteUrl: (githubv4.URI) benndorf.dev
    }
   }),
   (*github.Contributor)(0xc00011ef20)({
    Login: (*string)(0xc0005ce030)((len=12) "Lulu13022002"),
    ID: (*int64)(0xc000296dc8)(41980282),
    NodeID: (*string)(0xc0005ce040)((len=20) "MDQ6VXNlcjQxOTgwMjgy"),
    AvatarURL: (*string)(0xc0005ce050)((len=52) "https://avatars.githubusercontent.com/u/41980282?v=4"),
    GravatarID: (*string)(0xc0005ce060)(""),
    URL: (*string)(0xc0005ce070)((len=41) "https://api.github.com/users/Lulu13022002"),
    HTMLURL: (*string)(0xc0005ce080)((len=31) "https://github.com/Lulu13022002"),
    FollowersURL: (*string)(0xc0005ce090)((len=51) "https://api.github.com/users/Lulu13022002/followers"),
    FollowingURL: (*string)(0xc0005ce0a0)((len=64) "https://api.github.com/users/Lulu13022002/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce0b0)((len=57) "https://api.github.com/users/Lulu13022002/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce0c0)((len=64) "https://api.github.com/users/Lulu13022002/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce0d0)((len=55) "https://api.github.com/users/Lulu13022002/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce0e0)((len=46) "https://api.github.com/users/Lulu13022002/orgs"),
    ReposURL: (*string)(0xc0005ce0f0)((len=47) "https://api.github.com/users/Lulu13022002/repos"),
    EventsURL: (*string)(0xc0005ce100)((len=58) "https://api.github.com/users/Lulu13022002/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce110)((len=57) "https://api.github.com/users/Lulu13022002/received_events"),
    Type: (*string)(0xc0005ce120)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296de4)(false),
    Contributions: (*int)(0xc000296de8)(86),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000688000)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/41980282?u=6fe1d65a7f7f4cfcdba2b0582469ce8118f915d9&v=4,
     Login: (githubv4.String) (len=12) "Lulu13022002",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 9
     },
     Url: (githubv4.URI) https://github.com/Lulu13022002,
     Bio: (githubv4.String) (len=63) "Bug slayer in my free time.\r\nDev Manager at MineCube (2014ㅡ).",
     BioHtml: (githubv4.String) (len=73) "<div>Bug slayer in my free time.\nDev Manager at MineCube (2014ㅡ).</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2018-08-01 04:10:38 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 5
     },
     Name: (githubv4.String) "",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011f340)({
    Login: (*string)(0xc0005ce630)((len=10) "stephan-gh"),
    ID: (*int64)(0xc000296eb0)(3035868),
    NodeID: (*string)(0xc0005ce640)((len=20) "MDQ6VXNlcjMwMzU4Njg="),
    AvatarURL: (*string)(0xc0005ce650)((len=51) "https://avatars.githubusercontent.com/u/3035868?v=4"),
    GravatarID: (*string)(0xc0005ce660)(""),
    URL: (*string)(0xc0005ce670)((len=39) "https://api.github.com/users/stephan-gh"),
    HTMLURL: (*string)(0xc0005ce680)((len=29) "https://github.com/stephan-gh"),
    FollowersURL: (*string)(0xc0005ce690)((len=49) "https://api.github.com/users/stephan-gh/followers"),
    FollowingURL: (*string)(0xc0005ce6a0)((len=62) "https://api.github.com/users/stephan-gh/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce6b0)((len=55) "https://api.github.com/users/stephan-gh/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce6c0)((len=62) "https://api.github.com/users/stephan-gh/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce6d0)((len=53) "https://api.github.com/users/stephan-gh/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce6e0)((len=44) "https://api.github.com/users/stephan-gh/orgs"),
    ReposURL: (*string)(0xc0005ce6f0)((len=45) "https://api.github.com/users/stephan-gh/repos"),
    EventsURL: (*string)(0xc0005ce700)((len=56) "https://api.github.com/users/stephan-gh/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce710)((len=55) "https://api.github.com/users/stephan-gh/received_events"),
    Type: (*string)(0xc0005ce720)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296ebc)(false),
    Contributions: (*int)(0xc000296ec0)(31),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc0005d00c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/3035868?u=322009e7d41adb145bdb6152bc5cbe9d5354797c&v=4,
     Login: (githubv4.String) (len=10) "stephan-gh",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 38
     },
     Url: (githubv4.URI) https://github.com/stephan-gh,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2012-12-13 17:36:42 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 126
     },
     Name: (githubv4.String) (len=7) "Stephan",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011e9a0)({
    Login: (*string)(0xc0002937b0)((len=7) "kashike"),
    ID: (*int64)(0xc000296cb0)(5474071),
    NodeID: (*string)(0xc0002937c0)((len=20) "MDQ6VXNlcjU0NzQwNzE="),
    AvatarURL: (*string)(0xc0002937d0)((len=51) "https://avatars.githubusercontent.com/u/5474071?v=4"),
    GravatarID: (*string)(0xc0002937e0)(""),
    URL: (*string)(0xc0002937f0)((len=36) "https://api.github.com/users/kashike"),
    HTMLURL: (*string)(0xc000293800)((len=26) "https://github.com/kashike"),
    FollowersURL: (*string)(0xc000293810)((len=46) "https://api.github.com/users/kashike/followers"),
    FollowingURL: (*string)(0xc000293820)((len=59) "https://api.github.com/users/kashike/following{/other_user}"),
    GistsURL: (*string)(0xc000293830)((len=52) "https://api.github.com/users/kashike/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293840)((len=59) "https://api.github.com/users/kashike/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293850)((len=50) "https://api.github.com/users/kashike/subscriptions"),
    OrganizationsURL: (*string)(0xc000293860)((len=41) "https://api.github.com/users/kashike/orgs"),
    ReposURL: (*string)(0xc000293870)((len=42) "https://api.github.com/users/kashike/repos"),
    EventsURL: (*string)(0xc000293880)((len=53) "https://api.github.com/users/kashike/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293890)((len=52) "https://api.github.com/users/kashike/received_events"),
    Type: (*string)(0xc0002938a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296cbc)(false),
    Contributions: (*int)(0xc000296cc0)(133),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00030c0c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/5474071?u=24d5d22745a8e0db3624d602b63b4f5112645f80&v=4,
     Login: (githubv4.String) (len=7) "kashike",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 53
     },
     Url: (githubv4.URI) https://github.com/kashike,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2013-09-17 00:10:26 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 212
     },
     Name: (githubv4.String) (len=10) "Riley Park",
     TwitterUsername: (githubv4.String) (len=8) "_kashike",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011ebb0)({
    Login: (*string)(0xc000293ab0)((len=14) "BillyGalbreath"),
    ID: (*int64)(0xc000296d20)(332527),
    NodeID: (*string)(0xc000293ac0)((len=20) "MDQ6VXNlcjMzMjUyNw=="),
    AvatarURL: (*string)(0xc000293ad0)((len=50) "https://avatars.githubusercontent.com/u/332527?v=4"),
    GravatarID: (*string)(0xc000293ae0)(""),
    URL: (*string)(0xc000293af0)((len=43) "https://api.github.com/users/BillyGalbreath"),
    HTMLURL: (*string)(0xc000293b00)((len=33) "https://github.com/BillyGalbreath"),
    FollowersURL: (*string)(0xc000293b10)((len=53) "https://api.github.com/users/BillyGalbreath/followers"),
    FollowingURL: (*string)(0xc000293b20)((len=66) "https://api.github.com/users/BillyGalbreath/following{/other_user}"),
    GistsURL: (*string)(0xc000293b30)((len=59) "https://api.github.com/users/BillyGalbreath/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293b40)((len=66) "https://api.github.com/users/BillyGalbreath/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293b50)((len=57) "https://api.github.com/users/BillyGalbreath/subscriptions"),
    OrganizationsURL: (*string)(0xc000293b60)((len=48) "https://api.github.com/users/BillyGalbreath/orgs"),
    ReposURL: (*string)(0xc000293b70)((len=49) "https://api.github.com/users/BillyGalbreath/repos"),
    EventsURL: (*string)(0xc000293b80)((len=60) "https://api.github.com/users/BillyGalbreath/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293b90)((len=59) "https://api.github.com/users/BillyGalbreath/received_events"),
    Type: (*string)(0xc000293ba0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296d2c)(false),
    Contributions: (*int)(0xc000296d30)(118),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00021e240)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/332527?u=9a4ea3a56d212d307ed052382f9dba29e7464ea5&v=4,
     Login: (githubv4.String) (len=14) "BillyGalbreath",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 90
     },
     Url: (githubv4.URI) https://github.com/BillyGalbreath,
     Bio: (githubv4.String) (len=22) "I write code and stuff",
     BioHtml: (githubv4.String) (len=33) "<div>I write code and stuff</div>",
     Company: (githubv4.String) (len=4) "Pl3x",
     CompanyHtml: (githubv4.String) (len=15) "<div>Pl3x</div>",
     CreatedAt: (githubv4.DateTime) 2010-07-15 00:59:52 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 115
     },
     Name: (githubv4.String) (len=23) "William Blake Galbreath",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) http://pl3x.net
    }
   }),
   (*github.Contributor)(0xc00011f4a0)({
    Login: (*string)(0xc0005ce830)((len=10) "Phoenix616"),
    ID: (*int64)(0xc000296f00)(5768781),
    NodeID: (*string)(0xc0005ce840)((len=20) "MDQ6VXNlcjU3Njg3ODE="),
    AvatarURL: (*string)(0xc0005ce850)((len=51) "https://avatars.githubusercontent.com/u/5768781?v=4"),
    GravatarID: (*string)(0xc0005ce860)(""),
    URL: (*string)(0xc0005ce870)((len=39) "https://api.github.com/users/Phoenix616"),
    HTMLURL: (*string)(0xc0005ce880)((len=29) "https://github.com/Phoenix616"),
    FollowersURL: (*string)(0xc0005ce890)((len=49) "https://api.github.com/users/Phoenix616/followers"),
    FollowingURL: (*string)(0xc0005ce8a0)((len=62) "https://api.github.com/users/Phoenix616/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce8b0)((len=55) "https://api.github.com/users/Phoenix616/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce8c0)((len=62) "https://api.github.com/users/Phoenix616/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce8d0)((len=53) "https://api.github.com/users/Phoenix616/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce8e0)((len=44) "https://api.github.com/users/Phoenix616/orgs"),
    ReposURL: (*string)(0xc0005ce8f0)((len=45) "https://api.github.com/users/Phoenix616/repos"),
    EventsURL: (*string)(0xc0005ce900)((len=56) "https://api.github.com/users/Phoenix616/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce910)((len=55) "https://api.github.com/users/Phoenix616/received_events"),
    Type: (*string)(0xc0005ce920)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296f0c)(false),
    Contributions: (*int)(0xc000296f10)(24),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc0005d0240)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/5768781?v=4,
     Login: (githubv4.String) (len=10) "Phoenix616",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 185
     },
     Url: (githubv4.URI) https://github.com/Phoenix616,
     Bio: (githubv4.String) (len=135) "Java Minecraft server/plugin developer and sysadmin; Owner of @Minebench;\r\n Resource Staff for @SpigotMC; @PaperMC & Spigot contributor",
     BioHtml: (githubv4.String) (len=848) "<div>Java Minecraft server/plugin developer and sysadmin; Owner of <a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/Minebench/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Minebench\">@Minebench</a>;\n Resource Staff for <a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/SpigotMC/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SpigotMC\">@SpigotMC</a>; <a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/PaperMC/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/PaperMC\">@PaperMC</a> &amp; Spigot contributor</div>",
     Company: (githubv4.String) (len=19) "@MoepTv, @Minebench",
     CompanyHtml: (githubv4.String) (len=494) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/MoepTv/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MoepTv\">@MoepTv</a>, <a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/Minebench/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Minebench\">@Minebench</a></div>",
     CreatedAt: (githubv4.DateTime) 2013-10-24 20:21:31 +0000 UTC,
     UserEmail: (githubv4.String) (len=18) "contact@themoep.de",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 119
     },
     Name: (githubv4.String) (len=7) "Max Lee",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) phoenix616.dev
    }
   }),
   (*github.Contributor)(0xc00011e580)({
    Login: (*string)(0xc0002931b0)((len=13) "electronicboy"),
    ID: (*int64)(0xc000296bc8)(1228900),
    NodeID: (*string)(0xc0002931c0)((len=20) "MDQ6VXNlcjEyMjg5MDA="),
    AvatarURL: (*string)(0xc0002931d0)((len=51) "https://avatars.githubusercontent.com/u/1228900?v=4"),
    GravatarID: (*string)(0xc0002931e0)(""),
    URL: (*string)(0xc0002931f0)((len=42) "https://api.github.com/users/electronicboy"),
    HTMLURL: (*string)(0xc000293200)((len=32) "https://github.com/electronicboy"),
    FollowersURL: (*string)(0xc000293210)((len=52) "https://api.github.com/users/electronicboy/followers"),
    FollowingURL: (*string)(0xc000293220)((len=65) "https://api.github.com/users/electronicboy/following{/other_user}"),
    GistsURL: (*string)(0xc000293230)((len=58) "https://api.github.com/users/electronicboy/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293240)((len=65) "https://api.github.com/users/electronicboy/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293250)((len=56) "https://api.github.com/users/electronicboy/subscriptions"),
    OrganizationsURL: (*string)(0xc000293260)((len=47) "https://api.github.com/users/electronicboy/orgs"),
    ReposURL: (*string)(0xc000293270)((len=48) "https://api.github.com/users/electronicboy/repos"),
    EventsURL: (*string)(0xc000293280)((len=59) "https://api.github.com/users/electronicboy/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293290)((len=58) "https://api.github.com/users/electronicboy/received_events"),
    Type: (*string)(0xc0002932a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296be4)(false),
    Contributions: (*int)(0xc000296be8)(626),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc0002980c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/1228900?u=649f1c3dd4f700ad134d7958c30a4fb1a3fd2142&v=4,
     Login: (githubv4.String) (len=13) "electronicboy",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 76
     },
     Url: (githubv4.URI) https://github.com/electronicboy,
     Bio: (githubv4.String) (len=51) "Student! | @PaperMC developer | @SpigotMC IRC staff",
     BioHtml: (githubv4.String) (len=526) "<div>Student! | <a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/PaperMC/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/PaperMC\">@PaperMC</a> developer | <a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/SpigotMC/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SpigotMC\">@SpigotMC</a> IRC staff</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2011-11-29 19:26:08 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 204
     },
     Name: (githubv4.String) (len=13) "Shane Freeder",
     TwitterUsername: (githubv4.String) (len=10) "boyetronic",
     WebsiteUrl: (githubv4.URI) https://www.linkedin.com/in/shane-freeder/
    }
   }),
   (*github.Contributor)(0xc00011e370)({
    Login: (*string)(0xc000292ea0)((len=5) "aikar"),
    ID: (*int64)(0xc000296b58)(58008),
    NodeID: (*string)(0xc000292eb0)((len=16) "MDQ6VXNlcjU4MDA4"),
    AvatarURL: (*string)(0xc000292ec0)((len=49) "https://avatars.githubusercontent.com/u/58008?v=4"),
    GravatarID: (*string)(0xc000292ed0)(""),
    URL: (*string)(0xc000292ee0)((len=34) "https://api.github.com/users/aikar"),
    HTMLURL: (*string)(0xc000292ef0)((len=24) "https://github.com/aikar"),
    FollowersURL: (*string)(0xc000292f00)((len=44) "https://api.github.com/users/aikar/followers"),
    FollowingURL: (*string)(0xc000292f10)((len=57) "https://api.github.com/users/aikar/following{/other_user}"),
    GistsURL: (*string)(0xc000292f20)((len=50) "https://api.github.com/users/aikar/gists{/gist_id}"),
    StarredURL: (*string)(0xc000292f30)((len=57) "https://api.github.com/users/aikar/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000292f40)((len=48) "https://api.github.com/users/aikar/subscriptions"),
    OrganizationsURL: (*string)(0xc000292f50)((len=39) "https://api.github.com/users/aikar/orgs"),
    ReposURL: (*string)(0xc000292f60)((len=40) "https://api.github.com/users/aikar/repos"),
    EventsURL: (*string)(0xc000292f70)((len=51) "https://api.github.com/users/aikar/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000292f80)((len=50) "https://api.github.com/users/aikar/received_events"),
    Type: (*string)(0xc000292f90)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296b74)(false),
    Contributions: (*int)(0xc000296b78)(1474),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00021e180)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/58008?u=997405a99a5f07a3d8dcbbda74c69d9f82b3cc45&v=4,
     Login: (githubv4.String) (len=5) "aikar",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 80
     },
     Url: (githubv4.URI) https://github.com/aikar,
     Bio: (githubv4.String) (len=38) "@Starlis LLC - Sr. Software Architect ",
     BioHtml: (githubv4.String) (len=280) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/starlis/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/starlis\">@starlis</a> LLC - Sr. Software Architect </div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2009-02-25 22:19:14 +0000 UTC,
     UserEmail: (githubv4.String) (len=14) "aikar@aikar.co",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 506
     },
     Name: (githubv4.String) (len=12) "Daniel Ennis",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) https://aikar.co
    }
   }),
   (*github.Contributor)(0xc00011ea50)({
    Login: (*string)(0xc0002938b0)((len=6) "zachbr"),
    ID: (*int64)(0xc000296cd0)(1254957),
    NodeID: (*string)(0xc0002938c0)((len=20) "MDQ6VXNlcjEyNTQ5NTc="),
    AvatarURL: (*string)(0xc0002938d0)((len=51) "https://avatars.githubusercontent.com/u/1254957?v=4"),
    GravatarID: (*string)(0xc0002938e0)(""),
    URL: (*string)(0xc0002938f0)((len=35) "https://api.github.com/users/zachbr"),
    HTMLURL: (*string)(0xc000293900)((len=25) "https://github.com/zachbr"),
    FollowersURL: (*string)(0xc000293910)((len=45) "https://api.github.com/users/zachbr/followers"),
    FollowingURL: (*string)(0xc000293920)((len=58) "https://api.github.com/users/zachbr/following{/other_user}"),
    GistsURL: (*string)(0xc000293930)((len=51) "https://api.github.com/users/zachbr/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293940)((len=58) "https://api.github.com/users/zachbr/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293950)((len=49) "https://api.github.com/users/zachbr/subscriptions"),
    OrganizationsURL: (*string)(0xc000293960)((len=40) "https://api.github.com/users/zachbr/orgs"),
    ReposURL: (*string)(0xc000293970)((len=41) "https://api.github.com/users/zachbr/repos"),
    EventsURL: (*string)(0xc000293980)((len=52) "https://api.github.com/users/zachbr/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293990)((len=51) "https://api.github.com/users/zachbr/received_events"),
    Type: (*string)(0xc0002939a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296cdc)(false),
    Contributions: (*int)(0xc000296ce0)(128),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00030c180)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/1254957?u=f379d639bf17c9ac7d63981b06be7dbe7184ee5b&v=4,
     Login: (githubv4.String) (len=6) "zachbr",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 14
     },
     Url: (githubv4.URI) https://github.com/zachbr,
     Bio: (githubv4.String) (len=40) "Developer |\r\nSysAdmin |\r\nTaco Aficionado",
     BioHtml: (githubv4.String) (len=49) "<div>Developer |\nSysAdmin |\nTaco Aficionado</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2011-12-11 03:38:23 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 119
     },
     Name: (githubv4.String) (len=4) "Zach",
     TwitterUsername: (githubv4.String) (len=7) "zachbr_",
     WebsiteUrl: (githubv4.URI) https://zachbr.io
    }
   }),
   (*github.Contributor)(0xc00011eb00)({
    Login: (*string)(0xc0002939b0)((len=14) "EcoCityCraftCI"),
    ID: (*int64)(0xc000296ce8)(23557539),
    NodeID: (*string)(0xc0002939c0)((len=20) "MDQ6VXNlcjIzNTU3NTM5"),
    AvatarURL: (*string)(0xc0002939d0)((len=52) "https://avatars.githubusercontent.com/u/23557539?v=4"),
    GravatarID: (*string)(0xc0002939e0)(""),
    URL: (*string)(0xc0002939f0)((len=43) "https://api.github.com/users/EcoCityCraftCI"),
    HTMLURL: (*string)(0xc000293a00)((len=33) "https://github.com/EcoCityCraftCI"),
    FollowersURL: (*string)(0xc000293a10)((len=53) "https://api.github.com/users/EcoCityCraftCI/followers"),
    FollowingURL: (*string)(0xc000293a20)((len=66) "https://api.github.com/users/EcoCityCraftCI/following{/other_user}"),
    GistsURL: (*string)(0xc000293a30)((len=59) "https://api.github.com/users/EcoCityCraftCI/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293a40)((len=66) "https://api.github.com/users/EcoCityCraftCI/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293a50)((len=57) "https://api.github.com/users/EcoCityCraftCI/subscriptions"),
    OrganizationsURL: (*string)(0xc000293a60)((len=48) "https://api.github.com/users/EcoCityCraftCI/orgs"),
    ReposURL: (*string)(0xc000293a70)((len=49) "https://api.github.com/users/EcoCityCraftCI/repos"),
    EventsURL: (*string)(0xc000293a80)((len=60) "https://api.github.com/users/EcoCityCraftCI/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293a90)((len=59) "https://api.github.com/users/EcoCityCraftCI/received_events"),
    Type: (*string)(0xc000293aa0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296d04)(false),
    Contributions: (*int)(0xc000296d08)(123),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00030c000)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/23557539?u=80b8b19f76e3ea0575e76722243b173c0324a5ba&v=4,
     Login: (githubv4.String) (len=14) "EcoCityCraftCI",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 0
     },
     Url: (githubv4.URI) https://github.com/EcoCityCraftCI,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) (len=13) "@EcoCityCraft",
     CompanyHtml: (githubv4.String) (len=265) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/EcoCityCraft/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/EcoCityCraft\">@EcoCityCraft</a></div>",
     CreatedAt: (githubv4.DateTime) 2016-11-18 15:33:22 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 2
     },
     Name: (githubv4.String) (len=19) "EcoCityCraft CI Bot",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) https://ecocitycraft.com
    }
   }),
   (*github.Contributor)(0xc00011f080)({
    Login: (*string)(0xc0005ce230)((len=8) "Byteflux"),
    ID: (*int64)(0xc000296e18)(607545),
    NodeID: (*string)(0xc0005ce240)((len=20) "MDQ6VXNlcjYwNzU0NQ=="),
    AvatarURL: (*string)(0xc0005ce250)((len=50) "https://avatars.githubusercontent.com/u/607545?v=4"),
    GravatarID: (*string)(0xc0005ce260)(""),
    URL: (*string)(0xc0005ce270)((len=37) "https://api.github.com/users/Byteflux"),
    HTMLURL: (*string)(0xc0005ce280)((len=27) "https://github.com/Byteflux"),
    FollowersURL: (*string)(0xc0005ce290)((len=47) "https://api.github.com/users/Byteflux/followers"),
    FollowingURL: (*string)(0xc0005ce2a0)((len=60) "https://api.github.com/users/Byteflux/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce2b0)((len=53) "https://api.github.com/users/Byteflux/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce2c0)((len=60) "https://api.github.com/users/Byteflux/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce2d0)((len=51) "https://api.github.com/users/Byteflux/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce2e0)((len=42) "https://api.github.com/users/Byteflux/orgs"),
    ReposURL: (*string)(0xc0005ce2f0)((len=43) "https://api.github.com/users/Byteflux/repos"),
    EventsURL: (*string)(0xc0005ce300)((len=54) "https://api.github.com/users/Byteflux/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce310)((len=53) "https://api.github.com/users/Byteflux/received_events"),
    Type: (*string)(0xc0005ce320)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296e24)(false),
    Contributions: (*int)(0xc000296e28)(72),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00021e300)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/607545?u=90acd68f113de0da4a5fbae6f2c90e30582ed955&v=4,
     Login: (githubv4.String) (len=8) "Byteflux",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 23
     },
     Url: (githubv4.URI) https://github.com/Byteflux,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) (len=6) "@Vultr",
     CompanyHtml: (githubv4.String) (len=244) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/vultr/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vultr\">@vultr</a></div>",
     CreatedAt: (githubv4.DateTime) 2011-02-08 20:46:18 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 27
     },
     Name: (githubv4.String) (len=14) "Matthew Harris",
     TwitterUsername: (githubv4.String) (len=8) "Byteflux",
     WebsiteUrl: (githubv4.URI) https://byteflux.net
    }
   }),
   (*github.Contributor)(0xc00011e790)({
    Login: (*string)(0xc0002934b0)((len=11) "Spottedleaf"),
    ID: (*int64)(0xc000296c40)(6100722),
    NodeID: (*string)(0xc0002934c0)((len=20) "MDQ6VXNlcjYxMDA3MjI="),
    AvatarURL: (*string)(0xc0002934d0)((len=51) "https://avatars.githubusercontent.com/u/6100722?v=4"),
    GravatarID: (*string)(0xc0002934e0)(""),
    URL: (*string)(0xc0002934f0)((len=40) "https://api.github.com/users/Spottedleaf"),
    HTMLURL: (*string)(0xc000293500)((len=30) "https://github.com/Spottedleaf"),
    FollowersURL: (*string)(0xc000293510)((len=50) "https://api.github.com/users/Spottedleaf/followers"),
    FollowingURL: (*string)(0xc000293520)((len=63) "https://api.github.com/users/Spottedleaf/following{/other_user}"),
    GistsURL: (*string)(0xc000293530)((len=56) "https://api.github.com/users/Spottedleaf/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293540)((len=63) "https://api.github.com/users/Spottedleaf/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293550)((len=54) "https://api.github.com/users/Spottedleaf/subscriptions"),
    OrganizationsURL: (*string)(0xc000293560)((len=45) "https://api.github.com/users/Spottedleaf/orgs"),
    ReposURL: (*string)(0xc000293570)((len=46) "https://api.github.com/users/Spottedleaf/repos"),
    EventsURL: (*string)(0xc000293580)((len=57) "https://api.github.com/users/Spottedleaf/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293590)((len=56) "https://api.github.com/users/Spottedleaf/received_events"),
    Type: (*string)(0xc0002935a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296c4c)(false),
    Contributions: (*int)(0xc000296c50)(359),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000298300)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/6100722?u=9bf00eb1153bd3ea6cb63c40f2badc3acecaff9f&v=4,
     Login: (githubv4.String) (len=11) "Spottedleaf",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 33
     },
     Url: (githubv4.URI) https://github.com/Spottedleaf,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2013-12-04 02:10:30 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 265
     },
     Name: (githubv4.String) "",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011f6b0)({
    Login: (*string)(0xc0005ceb30)((len=9) "HexedHero"),
    ID: (*int64)(0xc000296f58)(6012891),
    NodeID: (*string)(0xc0005ceb40)((len=20) "MDQ6VXNlcjYwMTI4OTE="),
    AvatarURL: (*string)(0xc0005ceb50)((len=51) "https://avatars.githubusercontent.com/u/6012891?v=4"),
    GravatarID: (*string)(0xc0005ceb60)(""),
    URL: (*string)(0xc0005ceb70)((len=38) "https://api.github.com/users/HexedHero"),
    HTMLURL: (*string)(0xc0005ceb80)((len=28) "https://github.com/HexedHero"),
    FollowersURL: (*string)(0xc0005ceb90)((len=48) "https://api.github.com/users/HexedHero/followers"),
    FollowingURL: (*string)(0xc0005ceba0)((len=61) "https://api.github.com/users/HexedHero/following{/other_user}"),
    GistsURL: (*string)(0xc0005cebb0)((len=54) "https://api.github.com/users/HexedHero/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005cebc0)((len=61) "https://api.github.com/users/HexedHero/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005cebd0)((len=52) "https://api.github.com/users/HexedHero/subscriptions"),
    OrganizationsURL: (*string)(0xc0005cebe0)((len=43) "https://api.github.com/users/HexedHero/orgs"),
    ReposURL: (*string)(0xc0005cebf0)((len=44) "https://api.github.com/users/HexedHero/repos"),
    EventsURL: (*string)(0xc0005cec00)((len=55) "https://api.github.com/users/HexedHero/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005cec10)((len=54) "https://api.github.com/users/HexedHero/received_events"),
    Type: (*string)(0xc0005cec20)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296f74)(false),
    Contributions: (*int)(0xc000296f78)(22),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00030c300)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/6012891?u=289830048444bc9e3c19b228553aa3da22fc9b03&v=4,
     Login: (githubv4.String) (len=9) "HexedHero",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 39
     },
     Url: (githubv4.URI) https://github.com/HexedHero,
     Bio: (githubv4.String) (len=33) "Software/Game Developer (Java/C#)",
     BioHtml: (githubv4.String) (len=44) "<div>Software/Game Developer (Java/C#)</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2013-11-22 18:51:06 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 11
     },
     Name: (githubv4.String) (len=9) "HexedHero",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011efd0)({
    Login: (*string)(0xc0005ce130)((len=6) "DenWav"),
    ID: (*int64)(0xc000296df8)(1332104),
    NodeID: (*string)(0xc0005ce140)((len=20) "MDQ6VXNlcjEzMzIxMDQ="),
    AvatarURL: (*string)(0xc0005ce150)((len=51) "https://avatars.githubusercontent.com/u/1332104?v=4"),
    GravatarID: (*string)(0xc0005ce160)(""),
    URL: (*string)(0xc0005ce170)((len=35) "https://api.github.com/users/DenWav"),
    HTMLURL: (*string)(0xc0005ce180)((len=25) "https://github.com/DenWav"),
    FollowersURL: (*string)(0xc0005ce190)((len=45) "https://api.github.com/users/DenWav/followers"),
    FollowingURL: (*string)(0xc0005ce1a0)((len=58) "https://api.github.com/users/DenWav/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce1b0)((len=51) "https://api.github.com/users/DenWav/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce1c0)((len=58) "https://api.github.com/users/DenWav/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce1d0)((len=49) "https://api.github.com/users/DenWav/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce1e0)((len=40) "https://api.github.com/users/DenWav/orgs"),
    ReposURL: (*string)(0xc0005ce1f0)((len=41) "https://api.github.com/users/DenWav/repos"),
    EventsURL: (*string)(0xc0005ce200)((len=52) "https://api.github.com/users/DenWav/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce210)((len=51) "https://api.github.com/users/DenWav/received_events"),
    Type: (*string)(0xc0005ce220)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296e04)(false),
    Contributions: (*int)(0xc000296e08)(85),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00021e3c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/1332104?u=e62718d82c9a0fed2e4dfa4f38ab776d912f14b0&v=4,
     Login: (githubv4.String) (len=6) "DenWav",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 63
     },
     Url: (githubv4.URI) https://github.com/DenWav,
     Bio: (githubv4.String) (len=31) "Lover of cats and Taylor Swift.",
     BioHtml: (githubv4.String) (len=42) "<div>Lover of cats and Taylor Swift.</div>",
     Company: (githubv4.String) (len=10) "@Backblaze",
     CompanyHtml: (githubv4.String) (len=256) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/Backblaze/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Backblaze\">@Backblaze</a></div>",
     CreatedAt: (githubv4.DateTime) 2012-01-15 19:52:10 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 87
     },
     Name: (githubv4.String) (len=9) "Kyle Wood",
     TwitterUsername: (githubv4.String) (len=6) "DenWav",
     WebsiteUrl: (githubv4.URI) https://www.kylewood.cc/
    }
   }),
   (*github.Contributor)(0xc00011e8f0)({
    Login: (*string)(0xc0002936b0)((len=11) "Thinkofname"),
    ID: (*int64)(0xc000296c90)(774399),
    NodeID: (*string)(0xc0002936c0)((len=20) "MDQ6VXNlcjc3NDM5OQ=="),
    AvatarURL: (*string)(0xc0002936d0)((len=50) "https://avatars.githubusercontent.com/u/774399?v=4"),
    GravatarID: (*string)(0xc0002936e0)(""),
    URL: (*string)(0xc0002936f0)((len=40) "https://api.github.com/users/Thinkofname"),
    HTMLURL: (*string)(0xc000293700)((len=30) "https://github.com/Thinkofname"),
    FollowersURL: (*string)(0xc000293710)((len=50) "https://api.github.com/users/Thinkofname/followers"),
    FollowingURL: (*string)(0xc000293720)((len=63) "https://api.github.com/users/Thinkofname/following{/other_user}"),
    GistsURL: (*string)(0xc000293730)((len=56) "https://api.github.com/users/Thinkofname/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293740)((len=63) "https://api.github.com/users/Thinkofname/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293750)((len=54) "https://api.github.com/users/Thinkofname/subscriptions"),
    OrganizationsURL: (*string)(0xc000293760)((len=45) "https://api.github.com/users/Thinkofname/orgs"),
    ReposURL: (*string)(0xc000293770)((len=46) "https://api.github.com/users/Thinkofname/repos"),
    EventsURL: (*string)(0xc000293780)((len=57) "https://api.github.com/users/Thinkofname/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293790)((len=56) "https://api.github.com/users/Thinkofname/received_events"),
    Type: (*string)(0xc0002937a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296c9c)(false),
    Contributions: (*int)(0xc000296ca0)(149),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000298000)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/774399?v=4,
     Login: (githubv4.String) (len=11) "Thinkofname",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 62
     },
     Url: (githubv4.URI) https://github.com/Thinkofname,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2011-05-07 21:06:52 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 173
     },
     Name: (githubv4.String) (len=15) "Matthew Collins",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011ed10)({
    Login: (*string)(0xc000293cb0)((len=8) "NoahvdAa"),
    ID: (*int64)(0xc000296d68)(44026893),
    NodeID: (*string)(0xc000293cc0)((len=20) "MDQ6VXNlcjQ0MDI2ODkz"),
    AvatarURL: (*string)(0xc000293cd0)((len=52) "https://avatars.githubusercontent.com/u/44026893?v=4"),
    GravatarID: (*string)(0xc000293ce0)(""),
    URL: (*string)(0xc000293cf0)((len=37) "https://api.github.com/users/NoahvdAa"),
    HTMLURL: (*string)(0xc000293d00)((len=27) "https://github.com/NoahvdAa"),
    FollowersURL: (*string)(0xc000293d10)((len=47) "https://api.github.com/users/NoahvdAa/followers"),
    FollowingURL: (*string)(0xc000293d20)((len=60) "https://api.github.com/users/NoahvdAa/following{/other_user}"),
    GistsURL: (*string)(0xc000293d30)((len=53) "https://api.github.com/users/NoahvdAa/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293d40)((len=60) "https://api.github.com/users/NoahvdAa/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293d50)((len=51) "https://api.github.com/users/NoahvdAa/subscriptions"),
    OrganizationsURL: (*string)(0xc000293d60)((len=42) "https://api.github.com/users/NoahvdAa/orgs"),
    ReposURL: (*string)(0xc000293d70)((len=43) "https://api.github.com/users/NoahvdAa/repos"),
    EventsURL: (*string)(0xc000293d80)((len=54) "https://api.github.com/users/NoahvdAa/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293d90)((len=53) "https://api.github.com/users/NoahvdAa/received_events"),
    Type: (*string)(0xc000293da0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296d74)(false),
    Contributions: (*int)(0xc000296d78)(95),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00021e0c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/44026893?u=74f0d95ce3e6821c88db0041330b7514ef26e6c4&v=4,
     Login: (githubv4.String) (len=8) "NoahvdAa",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 103
     },
     Url: (githubv4.URI) https://github.com/NoahvdAa,
     Bio: (githubv4.String) (len=27) "Maker and breaker of things",
     BioHtml: (githubv4.String) (len=38) "<div>Maker and breaker of things</div>",
     Company: (githubv4.String) (len=12) "@FrumentumNL",
     CompanyHtml: (githubv4.String) (len=262) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/FrumentumNL/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/FrumentumNL\">@FrumentumNL</a></div>",
     CreatedAt: (githubv4.DateTime) 2018-10-10 12:41:24 +0000 UTC,
     UserEmail: (githubv4.String) (len=17) "hello@noahvdaa.me",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 53
     },
     Name: (githubv4.String) (len=15) "Noah van der Aa",
     TwitterUsername: (githubv4.String) (len=8) "NoahvdAa",
     WebsiteUrl: (githubv4.URI) https://noah.pm
    }
   }),
   (*github.Contributor)(0xc00011f130)({
    Login: (*string)(0xc0005ce330)((len=4) "JRoy"),
    ID: (*int64)(0xc000296e38)(10731363),
    NodeID: (*string)(0xc0005ce340)((len=20) "MDQ6VXNlcjEwNzMxMzYz"),
    AvatarURL: (*string)(0xc0005ce350)((len=52) "https://avatars.githubusercontent.com/u/10731363?v=4"),
    GravatarID: (*string)(0xc0005ce360)(""),
    URL: (*string)(0xc0005ce370)((len=33) "https://api.github.com/users/JRoy"),
    HTMLURL: (*string)(0xc0005ce380)((len=23) "https://github.com/JRoy"),
    FollowersURL: (*string)(0xc0005ce390)((len=43) "https://api.github.com/users/JRoy/followers"),
    FollowingURL: (*string)(0xc0005ce3a0)((len=56) "https://api.github.com/users/JRoy/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce3b0)((len=49) "https://api.github.com/users/JRoy/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce3c0)((len=56) "https://api.github.com/users/JRoy/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce3d0)((len=47) "https://api.github.com/users/JRoy/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce3e0)((len=38) "https://api.github.com/users/JRoy/orgs"),
    ReposURL: (*string)(0xc0005ce3f0)((len=39) "https://api.github.com/users/JRoy/repos"),
    EventsURL: (*string)(0xc0005ce400)((len=50) "https://api.github.com/users/JRoy/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ce410)((len=49) "https://api.github.com/users/JRoy/received_events"),
    Type: (*string)(0xc0005ce420)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296e44)(false),
    Contributions: (*int)(0xc000296e48)(42),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000394180)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/10731363?u=0dcc52509776e734014c1e3a43eab8332f1dd345&v=4,
     Login: (githubv4.String) (len=4) "JRoy",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 16
     },
     Url: (githubv4.URI) https://github.com/JRoy,
     Bio: (githubv4.String) (len=22) "king of pr review hell",
     BioHtml: (githubv4.String) (len=33) "<div>king of pr review hell</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2015-01-27 20:53:22 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 226
     },
     Name: (githubv4.String) (len=8) "Josh Roy",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011e630)({
    Login: (*string)(0xc0002932b0)((len=7) "kennytv"),
    ID: (*int64)(0xc000296bf8)(28825609),
    NodeID: (*string)(0xc0002932c0)((len=20) "MDQ6VXNlcjI4ODI1NjA5"),
    AvatarURL: (*string)(0xc0002932d0)((len=52) "https://avatars.githubusercontent.com/u/28825609?v=4"),
    GravatarID: (*string)(0xc0002932e0)(""),
    URL: (*string)(0xc0002932f0)((len=36) "https://api.github.com/users/kennytv"),
    HTMLURL: (*string)(0xc000293300)((len=26) "https://github.com/kennytv"),
    FollowersURL: (*string)(0xc000293310)((len=46) "https://api.github.com/users/kennytv/followers"),
    FollowingURL: (*string)(0xc000293320)((len=59) "https://api.github.com/users/kennytv/following{/other_user}"),
    GistsURL: (*string)(0xc000293330)((len=52) "https://api.github.com/users/kennytv/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293340)((len=59) "https://api.github.com/users/kennytv/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293350)((len=50) "https://api.github.com/users/kennytv/subscriptions"),
    OrganizationsURL: (*string)(0xc000293360)((len=41) "https://api.github.com/users/kennytv/orgs"),
    ReposURL: (*string)(0xc000293370)((len=42) "https://api.github.com/users/kennytv/repos"),
    EventsURL: (*string)(0xc000293380)((len=53) "https://api.github.com/users/kennytv/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293390)((len=52) "https://api.github.com/users/kennytv/received_events"),
    Type: (*string)(0xc0002933a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296c04)(false),
    Contributions: (*int)(0xc000296c08)(520),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000298180)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/28825609?u=13d299c8adab0dc569e42fab54073a261c1bcabb&v=4,
     Login: (githubv4.String) (len=7) "kennytv",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 37
     },
     Url: (githubv4.URI) https://github.com/kennytv,
     Bio: (githubv4.String) (len=38) "\r\n    Turning the world upside down ¿",
     BioHtml: (githubv4.String) (len=48) "<div>\n    Turning the world upside down ¿</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2017-05-20 13:18:01 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 278
     },
     Name: (githubv4.String) (len=13) "Nassim Jahnke",
     TwitterUsername: (githubv4.String) (len=8) "kennytvn",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011e6e0)({
    Login: (*string)(0xc0002933b0)((len=8) "jpenilla"),
    ID: (*int64)(0xc000296c18)(11360596),
    NodeID: (*string)(0xc0002933c0)((len=20) "MDQ6VXNlcjExMzYwNTk2"),
    AvatarURL: (*string)(0xc0002933d0)((len=52) "https://avatars.githubusercontent.com/u/11360596?v=4"),
    GravatarID: (*string)(0xc0002933e0)(""),
    URL: (*string)(0xc0002933f0)((len=37) "https://api.github.com/users/jpenilla"),
    HTMLURL: (*string)(0xc000293400)((len=27) "https://github.com/jpenilla"),
    FollowersURL: (*string)(0xc000293410)((len=47) "https://api.github.com/users/jpenilla/followers"),
    FollowingURL: (*string)(0xc000293420)((len=60) "https://api.github.com/users/jpenilla/following{/other_user}"),
    GistsURL: (*string)(0xc000293430)((len=53) "https://api.github.com/users/jpenilla/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293440)((len=60) "https://api.github.com/users/jpenilla/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293450)((len=51) "https://api.github.com/users/jpenilla/subscriptions"),
    OrganizationsURL: (*string)(0xc000293460)((len=42) "https://api.github.com/users/jpenilla/orgs"),
    ReposURL: (*string)(0xc000293470)((len=43) "https://api.github.com/users/jpenilla/repos"),
    EventsURL: (*string)(0xc000293480)((len=54) "https://api.github.com/users/jpenilla/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293490)((len=53) "https://api.github.com/users/jpenilla/received_events"),
    Type: (*string)(0xc0002934a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296c24)(false),
    Contributions: (*int)(0xc000296c28)(439),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000298240)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/11360596?u=4aeed942f7fa91934b31a5616d4158d5e401b62b&v=4,
     Login: (githubv4.String) (len=8) "jpenilla",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 124
     },
     Url: (githubv4.URI) https://github.com/jpenilla,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2015-03-07 05:38:20 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 85
     },
     Name: (githubv4.String) (len=13) "Jason Penilla",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011f550)({
    Login: (*string)(0xc0005ce930)((len=5) "Doc94"),
    ID: (*int64)(0xc000296f20)(3602279),
    NodeID: (*string)(0xc0005ce940)((len=20) "MDQ6VXNlcjM2MDIyNzk="),
    AvatarURL: (*string)(0xc0005ce950)((len=51) "https://avatars.githubusercontent.com/u/3602279?v=4"),
    GravatarID: (*string)(0xc0005ce960)(""),
    URL: (*string)(0xc0005ce970)((len=34) "https://api.github.com/users/Doc94"),
    HTMLURL: (*string)(0xc0005ce980)((len=24) "https://github.com/Doc94"),
    FollowersURL: (*string)(0xc0005ce990)((len=44) "https://api.github.com/users/Doc94/followers"),
    FollowingURL: (*string)(0xc0005ce9a0)((len=57) "https://api.github.com/users/Doc94/following{/other_user}"),
    GistsURL: (*string)(0xc0005ce9b0)((len=50) "https://api.github.com/users/Doc94/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ce9c0)((len=57) "https://api.github.com/users/Doc94/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005ce9d0)((len=48) "https://api.github.com/users/Doc94/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ce9e0)((len=39) "https://api.github.com/users/Doc94/orgs"),
    ReposURL: (*string)(0xc0005ce9f0)((len=40) "https://api.github.com/users/Doc94/repos"),
    EventsURL: (*string)(0xc0005cea00)((len=51) "https://api.github.com/users/Doc94/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005cea10)((len=50) "https://api.github.com/users/Doc94/received_events"),
    Type: (*string)(0xc0005cea20)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296f2c)(false),
    Contributions: (*int)(0xc000296f30)(23),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000298480)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/3602279?u=d8ad6831864c2419b95272e155a503ea9f3b6158&v=4,
     Login: (githubv4.String) (len=5) "Doc94",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 75
     },
     Url: (githubv4.URI) https://github.com/Doc94,
     Bio: (githubv4.String) (len=31) "🐕 | Doc\r\nA Computer Engineer",
     BioHtml: (githubv4.String) (len=41) "<div>🐕 | Doc\nA Computer Engineer</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2013-02-15 12:24:12 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 79
     },
     Name: (githubv4.String) (len=5) "Pedro",
     TwitterUsername: (githubv4.String) (len=7) "MrDoc94",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011e420)({
    Login: (*string)(0xc000292fb0)((len=13) "Machine-Maker"),
    ID: (*int64)(0xc000296b90)(15055071),
    NodeID: (*string)(0xc000292fc0)((len=20) "MDQ6VXNlcjE1MDU1MDcx"),
    AvatarURL: (*string)(0xc000292fd0)((len=52) "https://avatars.githubusercontent.com/u/15055071?v=4"),
    GravatarID: (*string)(0xc000292fe0)(""),
    URL: (*string)(0xc000292ff0)((len=42) "https://api.github.com/users/Machine-Maker"),
    HTMLURL: (*string)(0xc000293000)((len=32) "https://github.com/Machine-Maker"),
    FollowersURL: (*string)(0xc000293010)((len=52) "https://api.github.com/users/Machine-Maker/followers"),
    FollowingURL: (*string)(0xc000293020)((len=65) "https://api.github.com/users/Machine-Maker/following{/other_user}"),
    GistsURL: (*string)(0xc000293030)((len=58) "https://api.github.com/users/Machine-Maker/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293040)((len=65) "https://api.github.com/users/Machine-Maker/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293050)((len=56) "https://api.github.com/users/Machine-Maker/subscriptions"),
    OrganizationsURL: (*string)(0xc000293060)((len=47) "https://api.github.com/users/Machine-Maker/orgs"),
    ReposURL: (*string)(0xc000293070)((len=48) "https://api.github.com/users/Machine-Maker/repos"),
    EventsURL: (*string)(0xc000293080)((len=59) "https://api.github.com/users/Machine-Maker/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293090)((len=58) "https://api.github.com/users/Machine-Maker/received_events"),
    Type: (*string)(0xc0002930a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296b9c)(false),
    Contributions: (*int)(0xc000296ba0)(987),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00042c0c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/15055071?u=c442e2b4c3f1a67f3aac558825ef6dd73a68bd22&v=4,
     Login: (githubv4.String) (len=13) "Machine-Maker",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 75
     },
     Url: (githubv4.URI) https://github.com/Machine-Maker,
     Bio: (githubv4.String) (len=53) "Just a guy who enjoys working on open source projects",
     BioHtml: (githubv4.String) (len=64) "<div>Just a guy who enjoys working on open source projects</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2015-10-09 18:59:02 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 86
     },
     Name: (githubv4.String) (len=13) "Jake Potrebic",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) https://www.linkedin.com/in/jake-potrebic-8741a223a/
    }
   }),
   (*github.Contributor)(0xc00011edc0)({
    Login: (*string)(0xc000293db0)((len=8) "lynxplay"),
    ID: (*int64)(0xc000296d88)(32834385),
    NodeID: (*string)(0xc000293dc0)((len=20) "MDQ6VXNlcjMyODM0Mzg1"),
    AvatarURL: (*string)(0xc000293dd0)((len=52) "https://avatars.githubusercontent.com/u/32834385?v=4"),
    GravatarID: (*string)(0xc000293de0)(""),
    URL: (*string)(0xc000293df0)((len=37) "https://api.github.com/users/lynxplay"),
    HTMLURL: (*string)(0xc000293e00)((len=27) "https://github.com/lynxplay"),
    FollowersURL: (*string)(0xc000293e10)((len=47) "https://api.github.com/users/lynxplay/followers"),
    FollowingURL: (*string)(0xc000293e20)((len=60) "https://api.github.com/users/lynxplay/following{/other_user}"),
    GistsURL: (*string)(0xc000293e30)((len=53) "https://api.github.com/users/lynxplay/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293e40)((len=60) "https://api.github.com/users/lynxplay/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293e50)((len=51) "https://api.github.com/users/lynxplay/subscriptions"),
    OrganizationsURL: (*string)(0xc000293e60)((len=42) "https://api.github.com/users/lynxplay/orgs"),
    ReposURL: (*string)(0xc000293e70)((len=43) "https://api.github.com/users/lynxplay/repos"),
    EventsURL: (*string)(0xc000293e80)((len=54) "https://api.github.com/users/lynxplay/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293e90)((len=53) "https://api.github.com/users/lynxplay/received_events"),
    Type: (*string)(0xc000293ea0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296d94)(false),
    Contributions: (*int)(0xc000296d98)(87),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00021e000)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/32834385?u=726343e682e3a7b7ad1101c6599c6c304e7be57f&v=4,
     Login: (githubv4.String) (len=8) "lynxplay",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 55
     },
     Url: (githubv4.URI) https://github.com/lynxplay,
     Bio: (githubv4.String) (len=107) "Studying for my master at KIT. \r\nMore or less professional developer on some more or less useful languages.",
     BioHtml: (githubv4.String) (len=117) "<div>Studying for my master at KIT. \nMore or less professional developer on some more or less useful languages.</div>",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2017-10-16 08:34:32 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 30
     },
     Name: (githubv4.String) (len=11) "Bjarne Koll",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) https://www.lynxplay.dev
    }
   }),
   (*github.Contributor)(0xc00011f600)({
    Login: (*string)(0xc0005cea30)((len=8) "stonar96"),
    ID: (*int64)(0xc000296f40)(18699205),
    NodeID: (*string)(0xc0005cea40)((len=20) "MDQ6VXNlcjE4Njk5MjA1"),
    AvatarURL: (*string)(0xc0005cea50)((len=52) "https://avatars.githubusercontent.com/u/18699205?v=4"),
    GravatarID: (*string)(0xc0005cea60)(""),
    URL: (*string)(0xc0005cea70)((len=37) "https://api.github.com/users/stonar96"),
    HTMLURL: (*string)(0xc0005cea80)((len=27) "https://github.com/stonar96"),
    FollowersURL: (*string)(0xc0005cea90)((len=47) "https://api.github.com/users/stonar96/followers"),
    FollowingURL: (*string)(0xc0005ceaa0)((len=60) "https://api.github.com/users/stonar96/following{/other_user}"),
    GistsURL: (*string)(0xc0005ceab0)((len=53) "https://api.github.com/users/stonar96/gists{/gist_id}"),
    StarredURL: (*string)(0xc0005ceac0)((len=60) "https://api.github.com/users/stonar96/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc0005cead0)((len=51) "https://api.github.com/users/stonar96/subscriptions"),
    OrganizationsURL: (*string)(0xc0005ceae0)((len=42) "https://api.github.com/users/stonar96/orgs"),
    ReposURL: (*string)(0xc0005ceaf0)((len=43) "https://api.github.com/users/stonar96/repos"),
    EventsURL: (*string)(0xc0005ceb00)((len=54) "https://api.github.com/users/stonar96/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc0005ceb10)((len=53) "https://api.github.com/users/stonar96/received_events"),
    Type: (*string)(0xc0005ceb20)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296f4c)(false),
    Contributions: (*int)(0xc000296f50)(23),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc0002983c0)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/18699205?v=4,
     Login: (githubv4.String) (len=8) "stonar96",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 21
     },
     Url: (githubv4.URI) https://github.com/stonar96,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) "",
     CompanyHtml: (githubv4.String) "",
     CreatedAt: (githubv4.DateTime) 2016-04-27 11:12:36 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 7
     },
     Name: (githubv4.String) "",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   }),
   (*github.Contributor)(0xc00011e4d0)({
    Login: (*string)(0xc0002930b0)((len=4) "md-5"),
    ID: (*int64)(0xc000296bb0)(1007849),
    NodeID: (*string)(0xc0002930c0)((len=20) "MDQ6VXNlcjEwMDc4NDk="),
    AvatarURL: (*string)(0xc0002930d0)((len=51) "https://avatars.githubusercontent.com/u/1007849?v=4"),
    GravatarID: (*string)(0xc0002930e0)(""),
    URL: (*string)(0xc0002930f0)((len=33) "https://api.github.com/users/md-5"),
    HTMLURL: (*string)(0xc000293100)((len=23) "https://github.com/md-5"),
    FollowersURL: (*string)(0xc000293110)((len=43) "https://api.github.com/users/md-5/followers"),
    FollowingURL: (*string)(0xc000293120)((len=56) "https://api.github.com/users/md-5/following{/other_user}"),
    GistsURL: (*string)(0xc000293130)((len=49) "https://api.github.com/users/md-5/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293140)((len=56) "https://api.github.com/users/md-5/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293150)((len=47) "https://api.github.com/users/md-5/subscriptions"),
    OrganizationsURL: (*string)(0xc000293160)((len=38) "https://api.github.com/users/md-5/orgs"),
    ReposURL: (*string)(0xc000293170)((len=39) "https://api.github.com/users/md-5/repos"),
    EventsURL: (*string)(0xc000293180)((len=50) "https://api.github.com/users/md-5/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293190)((len=49) "https://api.github.com/users/md-5/received_events"),
    Type: (*string)(0xc0002931a0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296bbc)(false),
    Contributions: (*int)(0xc000296bc0)(848),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc000000240)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/1007849?v=4,
     Login: (githubv4.String) (len=4) "md-5",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 158
     },
     Url: (githubv4.URI) https://github.com/md-5,
     Bio: (githubv4.String) "",
     BioHtml: (githubv4.String) "",
     Company: (githubv4.String) (len=9) "@SpigotMC",
     CompanyHtml: (githubv4.String) (len=253) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/SpigotMC/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SpigotMC\">@SpigotMC</a></div>",
     CreatedAt: (githubv4.DateTime) 2011-08-27 02:50:58 +0000 UTC,
     UserEmail: (githubv4.String) "",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 1326
     },
     Name: (githubv4.String) "",
     TwitterUsername: (githubv4.String) (len=5) "md__5",
     WebsiteUrl: (githubv4.URI) https://md-5.net/
    }
   }),
   (*github.Contributor)(0xc00011ec60)({
    Login: (*string)(0xc000293bb0)((len=9) "Proximyst"),
    ID: (*int64)(0xc000296d38)(19861299),
    NodeID: (*string)(0xc000293bc0)((len=20) "MDQ6VXNlcjE5ODYxMjk5"),
    AvatarURL: (*string)(0xc000293bd0)((len=52) "https://avatars.githubusercontent.com/u/19861299?v=4"),
    GravatarID: (*string)(0xc000293be0)(""),
    URL: (*string)(0xc000293bf0)((len=38) "https://api.github.com/users/Proximyst"),
    HTMLURL: (*string)(0xc000293c00)((len=28) "https://github.com/Proximyst"),
    FollowersURL: (*string)(0xc000293c10)((len=48) "https://api.github.com/users/Proximyst/followers"),
    FollowingURL: (*string)(0xc000293c20)((len=61) "https://api.github.com/users/Proximyst/following{/other_user}"),
    GistsURL: (*string)(0xc000293c30)((len=54) "https://api.github.com/users/Proximyst/gists{/gist_id}"),
    StarredURL: (*string)(0xc000293c40)((len=61) "https://api.github.com/users/Proximyst/starred{/owner}{/repo}"),
    SubscriptionsURL: (*string)(0xc000293c50)((len=52) "https://api.github.com/users/Proximyst/subscriptions"),
    OrganizationsURL: (*string)(0xc000293c60)((len=43) "https://api.github.com/users/Proximyst/orgs"),
    ReposURL: (*string)(0xc000293c70)((len=44) "https://api.github.com/users/Proximyst/repos"),
    EventsURL: (*string)(0xc000293c80)((len=55) "https://api.github.com/users/Proximyst/events{/privacy}"),
    ReceivedEventsURL: (*string)(0xc000293c90)((len=54) "https://api.github.com/users/Proximyst/received_events"),
    Type: (*string)(0xc000293ca0)((len=4) "User"),
    SiteAdmin: (*bool)(0xc000296d54)(false),
    Contributions: (*int)(0xc000296d58)(108),
    Name: (*string)(<nil>),
    Email: (*string)(<nil>)
   }): (*github.GetUser)(0xc00042c000)({
    User: (struct { AvatarUrl githubv4.URI; Login githubv4.String; Repositories struct { TotalCount githubv4.Int }; Url githubv4.URI; Bio githubv4.String; BioHtml githubv4.String "graphql:\"bioHTML\""; Company githubv4.String; CompanyHtml githubv4.String "graphql:\"companyHTML\""; CreatedAt githubv4.DateTime; UserEmail githubv4.String "graphql:\"UserEmail: email\""; Followers struct { TotalCount githubv4.Int }; Name githubv4.String; TwitterUsername githubv4.String; WebsiteUrl githubv4.URI }) {
     AvatarUrl: (githubv4.URI) https://avatars.githubusercontent.com/u/19861299?u=32a765c2da981e22edaefb470664b381c56aad51&v=4,
     Login: (githubv4.String) (len=9) "Proximyst",
     Repositories: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 63
     },
     Url: (githubv4.URI) https://github.com/Proximyst,
     Bio: (githubv4.String) (len=77) "I write code for cool things. Like birds. And music apparently.\r\n\r\n(she/they)",
     BioHtml: (githubv4.String) (len=86) "<div>I write code for cool things. Like birds. And music apparently.\n\n(she/they)</div>",
     Company: (githubv4.String) (len=8) "@spotify",
     CompanyHtml: (githubv4.String) (len=250) "<div><a class=\"user-mention notranslate\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/spotify/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/spotify\">@spotify</a></div>",
     CreatedAt: (githubv4.DateTime) 2016-06-10 17:26:06 +0000 UTC,
     UserEmail: (githubv4.String) (len=23) "mariell@mardroemmar.dev",
     Followers: (struct { TotalCount githubv4.Int }) {
      TotalCount: (githubv4.Int) 110
     },
     Name: (githubv4.String) (len=18) "Mariell Hoversholm",
     TwitterUsername: (githubv4.String) "",
     WebsiteUrl: (githubv4.URI) (PANIC=runtime error: invalid memory address or nil pointer dereference){
      URL: (*url.URL)(<nil>)
     }
    }
   })
  }),
  StarHistMapPtr: (*map[string]github.Hist)(0xc00011a030)((len=331) {
   (string) (len=29) "2020-07-03 13:35:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-03 13:35:14 +0000 UTC,
    Amount: (int) 1828
   },
   (string) (len=29) "2021-01-21 21:38:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-21 21:38:07 +0000 UTC,
    Amount: (int) 2728
   },
   (string) (len=29) "2022-05-01 16:49:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-01 16:49:26 +0000 UTC,
    Amount: (int) 5474
   },
   (string) (len=29) "2024-06-17 18:59:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 18:59:48 +0000 UTC,
    Amount: (int) 9148
   },
   (string) (len=29) "2016-03-05 16:12:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-05 16:12:15 +0000 UTC,
    Amount: (int) 23
   },
   (string) (len=29) "2021-06-16 05:58:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 05:58:54 +0000 UTC,
    Amount: (int) 3656
   },
   (string) (len=29) "2021-12-05 20:42:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 20:42:38 +0000 UTC,
    Amount: (int) 4575
   },
   (string) (len=29) "2019-07-28 00:58:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-28 00:58:54 +0000 UTC,
    Amount: (int) 886
   },
   (string) (len=29) "2019-08-03 22:42:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-03 22:42:23 +0000 UTC,
    Amount: (int) 896
   },
   (string) (len=29) "2022-05-01 20:32:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-01 20:32:38 +0000 UTC,
    Amount: (int) 5476
   },
   (string) (len=29) "2024-02-06 03:38:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-06 03:38:09 +0000 UTC,
    Amount: (int) 8228
   },
   (string) (len=29) "2016-02-17 19:41:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-17 19:41:45 +0000 UTC,
    Amount: (int) 16
   },
   (string) (len=29) "2020-07-02 06:46:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 06:46:47 +0000 UTC,
    Amount: (int) 1815
   },
   (string) (len=29) "2023-06-07 22:24:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-07 22:24:37 +0000 UTC,
    Amount: (int) 7296
   },
   (string) (len=29) "2024-06-17 12:45:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 12:45:14 +0000 UTC,
    Amount: (int) 9126
   },
   (string) (len=29) "2024-06-17 14:06:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 14:06:51 +0000 UTC,
    Amount: (int) 9132
   },
   (string) (len=29) "2016-01-28 14:36:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-28 14:36:17 +0000 UTC,
    Amount: (int) 3
   },
   (string) (len=29) "2019-07-24 21:59:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-24 21:59:25 +0000 UTC,
    Amount: (int) 874
   },
   (string) (len=29) "2019-07-31 04:59:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-31 04:59:24 +0000 UTC,
    Amount: (int) 890
   },
   (string) (len=29) "2021-06-16 05:36:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 05:36:32 +0000 UTC,
    Amount: (int) 3654
   },
   (string) (len=29) "2024-06-17 17:10:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 17:10:38 +0000 UTC,
    Amount: (int) 9144
   },
   (string) (len=29) "2021-06-15 13:55:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 13:55:39 +0000 UTC,
    Amount: (int) 3634
   },
   (string) (len=29) "2021-06-15 15:36:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 15:36:53 +0000 UTC,
    Amount: (int) 3637
   },
   (string) (len=29) "2021-12-05 14:46:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 14:46:37 +0000 UTC,
    Amount: (int) 4572
   },
   (string) (len=29) "2022-04-28 16:11:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-28 16:11:08 +0000 UTC,
    Amount: (int) 5468
   },
   (string) (len=29) "2023-06-09 07:44:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 07:44:48 +0000 UTC,
    Amount: (int) 7314
   },
   (string) (len=29) "2016-01-22 21:52:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-22 21:52:53 +0000 UTC,
    Amount: (int) 1
   },
   (string) (len=29) "2021-01-18 08:57:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 08:57:08 +0000 UTC,
    Amount: (int) 2705
   },
   (string) (len=29) "2021-12-06 02:22:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 02:22:02 +0000 UTC,
    Amount: (int) 4578
   },
   (string) (len=29) "2023-06-07 20:42:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-07 20:42:48 +0000 UTC,
    Amount: (int) 7291
   },
   (string) (len=29) "2024-02-06 14:28:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-06 14:28:09 +0000 UTC,
    Amount: (int) 8230
   },
   (string) (len=29) "2016-01-29 22:48:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-29 22:48:39 +0000 UTC,
    Amount: (int) 4
   },
   (string) (len=29) "2021-01-20 03:12:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-20 03:12:46 +0000 UTC,
    Amount: (int) 2722
   },
   (string) (len=29) "2021-06-16 00:19:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 00:19:38 +0000 UTC,
    Amount: (int) 3650
   },
   (string) (len=29) "2021-12-06 10:53:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 10:53:25 +0000 UTC,
    Amount: (int) 4583
   },
   (string) (len=29) "2022-10-09 22:45:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-09 22:45:08 +0000 UTC,
    Amount: (int) 6415
   },
   (string) (len=29) "2020-06-29 07:29:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 07:29:01 +0000 UTC,
    Amount: (int) 1802
   },
   (string) (len=29) "2020-06-30 07:54:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-30 07:54:25 +0000 UTC,
    Amount: (int) 1810
   },
   (string) (len=29) "2021-01-18 10:42:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 10:42:29 +0000 UTC,
    Amount: (int) 2711
   },
   (string) (len=29) "2021-12-05 11:20:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 11:20:08 +0000 UTC,
    Amount: (int) 4568
   },
   (string) (len=29) "2021-12-05 20:39:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 20:39:25 +0000 UTC,
    Amount: (int) 4574
   },
   (string) (len=29) "2022-05-01 00:30:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-01 00:30:14 +0000 UTC,
    Amount: (int) 5471
   },
   (string) (len=29) "2022-10-03 17:01:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-03 17:01:19 +0000 UTC,
    Amount: (int) 6396
   },
   (string) (len=29) "2022-10-07 21:57:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-07 21:57:02 +0000 UTC,
    Amount: (int) 6408
   },
   (string) (len=29) "2024-02-07 13:45:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 13:45:15 +0000 UTC,
    Amount: (int) 8233
   },
   (string) (len=29) "2024-02-13 00:24:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-13 00:24:07 +0000 UTC,
    Amount: (int) 8248
   },
   (string) (len=29) "2019-07-27 19:06:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-27 19:06:19 +0000 UTC,
    Amount: (int) 884
   },
   (string) (len=29) "2021-01-21 14:49:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-21 14:49:44 +0000 UTC,
    Amount: (int) 2727
   },
   (string) (len=29) "2022-10-08 19:28:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-08 19:28:40 +0000 UTC,
    Amount: (int) 6412
   },
   (string) (len=29) "2024-02-05 19:23:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-05 19:23:22 +0000 UTC,
    Amount: (int) 8227
   },
   (string) (len=29) "2024-06-17 13:06:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 13:06:58 +0000 UTC,
    Amount: (int) 9128
   },
   (string) (len=29) "2016-02-13 14:51:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-13 14:51:25 +0000 UTC,
    Amount: (int) 12
   },
   (string) (len=29) "2016-03-01 19:11:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-01 19:11:24 +0000 UTC,
    Amount: (int) 21
   },
   (string) (len=29) "2019-08-04 14:41:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-04 14:41:20 +0000 UTC,
    Amount: (int) 897
   },
   (string) (len=29) "2020-07-02 20:14:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 20:14:23 +0000 UTC,
    Amount: (int) 1823
   },
   (string) (len=29) "2020-07-04 02:44:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-04 02:44:30 +0000 UTC,
    Amount: (int) 1830
   },
   (string) (len=29) "2021-01-18 10:07:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 10:07:16 +0000 UTC,
    Amount: (int) 2710
   },
   (string) (len=29) "2021-06-15 10:56:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 10:56:43 +0000 UTC,
    Amount: (int) 3631
   },
   (string) (len=29) "2021-12-05 09:14:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 09:14:11 +0000 UTC,
    Amount: (int) 4566
   },
   (string) (len=29) "2021-12-06 07:02:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 07:02:02 +0000 UTC,
    Amount: (int) 4580
   },
   (string) (len=29) "2022-05-03 10:13:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-03 10:13:41 +0000 UTC,
    Amount: (int) 5484
   },
   (string) (len=29) "2022-10-09 18:11:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-09 18:11:02 +0000 UTC,
    Amount: (int) 6414
   },
   (string) (len=29) "2024-02-07 00:33:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 00:33:11 +0000 UTC,
    Amount: (int) 8232
   },
   (string) (len=29) "2019-07-24 19:38:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-24 19:38:53 +0000 UTC,
    Amount: (int) 872
   },
   (string) (len=29) "2016-03-04 23:29:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-04 23:29:34 +0000 UTC,
    Amount: (int) 22
   },
   (string) (len=29) "2019-08-03 19:30:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-03 19:30:06 +0000 UTC,
    Amount: (int) 895
   },
   (string) (len=29) "2021-01-20 07:22:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-20 07:22:58 +0000 UTC,
    Amount: (int) 2723
   },
   (string) (len=29) "2021-06-15 11:04:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 11:04:43 +0000 UTC,
    Amount: (int) 3632
   },
   (string) (len=29) "2021-12-06 19:35:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 19:35:52 +0000 UTC,
    Amount: (int) 4589
   },
   (string) (len=29) "2022-10-06 05:03:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-06 05:03:09 +0000 UTC,
    Amount: (int) 6405
   },
   (string) (len=29) "2024-02-04 09:23:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-04 09:23:29 +0000 UTC,
    Amount: (int) 8223
   },
   (string) (len=29) "2024-02-12 10:15:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-12 10:15:48 +0000 UTC,
    Amount: (int) 8244
   },
   (string) (len=29) "2024-06-17 16:24:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 16:24:04 +0000 UTC,
    Amount: (int) 9140
   },
   (string) (len=29) "2024-06-17 17:39:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 17:39:40 +0000 UTC,
    Amount: (int) 9145
   },
   (string) (len=29) "2016-02-04 05:06:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-04 05:06:30 +0000 UTC,
    Amount: (int) 7
   },
   (string) (len=29) "2020-06-29 22:19:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 22:19:26 +0000 UTC,
    Amount: (int) 1807
   },
   (string) (len=29) "2022-05-01 09:23:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-01 09:23:39 +0000 UTC,
    Amount: (int) 5472
   },
   (string) (len=29) "2022-05-02 09:56:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-02 09:56:23 +0000 UTC,
    Amount: (int) 5480
   },
   (string) (len=29) "2020-06-29 20:20:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 20:20:30 +0000 UTC,
    Amount: (int) 1806
   },
   (string) (len=29) "2021-01-22 21:02:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-22 21:02:41 +0000 UTC,
    Amount: (int) 2730
   },
   (string) (len=29) "2021-06-15 19:17:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 19:17:37 +0000 UTC,
    Amount: (int) 3645
   },
   (string) (len=29) "2021-06-16 05:43:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 05:43:15 +0000 UTC,
    Amount: (int) 3655
   },
   (string) (len=29) "2022-10-06 11:05:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-06 11:05:44 +0000 UTC,
    Amount: (int) 6406
   },
   (string) (len=29) "2023-06-07 21:50:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-07 21:50:26 +0000 UTC,
    Amount: (int) 7295
   },
   (string) (len=29) "2023-06-09 10:20:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 10:20:48 +0000 UTC,
    Amount: (int) 7319
   },
   (string) (len=29) "2024-02-04 09:30:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-04 09:30:27 +0000 UTC,
    Amount: (int) 8224
   },
   (string) (len=29) "2016-02-19 18:47:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-19 18:47:02 +0000 UTC,
    Amount: (int) 17
   },
   (string) (len=29) "2021-06-15 11:49:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 11:49:46 +0000 UTC,
    Amount: (int) 3633
   },
   (string) (len=29) "2021-06-15 21:58:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 21:58:15 +0000 UTC,
    Amount: (int) 3648
   },
   (string) (len=29) "2023-06-09 07:23:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 07:23:59 +0000 UTC,
    Amount: (int) 7313
   },
   (string) (len=29) "2023-06-09 08:06:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 08:06:05 +0000 UTC,
    Amount: (int) 7315
   },
   (string) (len=29) "2024-02-08 21:42:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-08 21:42:27 +0000 UTC,
    Amount: (int) 8237
   },
   (string) (len=29) "2016-01-25 04:11:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-25 04:11:12 +0000 UTC,
    Amount: (int) 2
   },
   (string) (len=29) "2016-02-12 12:45:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-12 12:45:52 +0000 UTC,
    Amount: (int) 11
   },
   (string) (len=29) "2020-07-02 08:56:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 08:56:12 +0000 UTC,
    Amount: (int) 1816
   },
   (string) (len=29) "2020-07-03 11:52:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-03 11:52:28 +0000 UTC,
    Amount: (int) 1826
   },
   (string) (len=29) "2021-06-16 10:00:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 10:00:54 +0000 UTC,
    Amount: (int) 3660
   },
   (string) (len=29) "2021-12-05 13:23:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 13:23:44 +0000 UTC,
    Amount: (int) 4571
   },
   (string) (len=29) "2021-12-06 02:37:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 02:37:48 +0000 UTC,
    Amount: (int) 4579
   },
   (string) (len=29) "2022-04-25 18:51:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-25 18:51:41 +0000 UTC,
    Amount: (int) 5461
   },
   (string) (len=29) "2022-04-28 04:20:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-28 04:20:44 +0000 UTC,
    Amount: (int) 5467
   },
   (string) (len=29) "2022-05-03 19:06:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-03 19:06:52 +0000 UTC,
    Amount: (int) 5486
   },
   (string) (len=29) "2022-10-06 22:23:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-06 22:23:07 +0000 UTC,
    Amount: (int) 6407
   },
   (string) (len=29) "2024-06-17 14:22:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 14:22:09 +0000 UTC,
    Amount: (int) 9134
   },
   (string) (len=29) "2019-08-03 06:50:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-03 06:50:47 +0000 UTC,
    Amount: (int) 893
   },
   (string) (len=29) "2020-07-02 17:42:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 17:42:55 +0000 UTC,
    Amount: (int) 1822
   },
   (string) (len=29) "2021-01-18 08:53:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 08:53:13 +0000 UTC,
    Amount: (int) 2704
   },
   (string) (len=29) "2021-01-18 11:17:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 11:17:01 +0000 UTC,
    Amount: (int) 2713
   },
   (string) (len=29) "2021-01-20 15:23:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-20 15:23:35 +0000 UTC,
    Amount: (int) 2726
   },
   (string) (len=29) "2021-06-15 14:55:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 14:55:16 +0000 UTC,
    Amount: (int) 3635
   },
   (string) (len=29) "2021-12-05 04:03:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 04:03:47 +0000 UTC,
    Amount: (int) 4563
   },
   (string) (len=29) "2019-08-04 18:54:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-04 18:54:08 +0000 UTC,
    Amount: (int) 900
   },
   (string) (len=29) "2021-12-06 10:04:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 10:04:30 +0000 UTC,
    Amount: (int) 4581
   },
   (string) (len=29) "2021-12-06 17:33:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 17:33:03 +0000 UTC,
    Amount: (int) 4587
   },
   (string) (len=29) "2022-10-12 09:57:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-12 09:57:36 +0000 UTC,
    Amount: (int) 6419
   },
   (string) (len=29) "2024-06-17 16:07:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 16:07:45 +0000 UTC,
    Amount: (int) 9139
   },
   (string) (len=29) "2024-06-17 19:23:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 19:23:15 +0000 UTC,
    Amount: (int) 9149
   },
   (string) (len=29) "2020-06-29 22:19:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 22:19:39 +0000 UTC,
    Amount: (int) 1808
   },
   (string) (len=29) "2020-07-02 00:17:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 00:17:22 +0000 UTC,
    Amount: (int) 1814
   },
   (string) (len=29) "2022-05-03 10:35:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-03 10:35:29 +0000 UTC,
    Amount: (int) 5485
   },
   (string) (len=29) "2022-05-04 13:31:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-04 13:31:17 +0000 UTC,
    Amount: (int) 5487
   },
   (string) (len=29) "2023-06-08 13:56:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 13:56:47 +0000 UTC,
    Amount: (int) 7307
   },
   (string) (len=29) "2024-06-17 16:37:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 16:37:56 +0000 UTC,
    Amount: (int) 9141
   },
   (string) (len=29) "2021-06-15 20:35:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 20:35:41 +0000 UTC,
    Amount: (int) 3647
   },
   (string) (len=29) "2021-12-06 17:21:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 17:21:53 +0000 UTC,
    Amount: (int) 4586
   },
   (string) (len=29) "2024-02-11 01:15:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-11 01:15:45 +0000 UTC,
    Amount: (int) 8241
   },
   (string) (len=29) "2024-02-12 16:18:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-12 16:18:27 +0000 UTC,
    Amount: (int) 8246
   },
   (string) (len=29) "2016-02-09 06:49:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-09 06:49:01 +0000 UTC,
    Amount: (int) 8
   },
   (string) (len=29) "2019-08-03 18:26:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-03 18:26:17 +0000 UTC,
    Amount: (int) 894
   },
   (string) (len=29) "2022-10-12 15:18:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-12 15:18:41 +0000 UTC,
    Amount: (int) 6420
   },
   (string) (len=29) "2016-02-20 08:08:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-20 08:08:01 +0000 UTC,
    Amount: (int) 18
   },
   (string) (len=29) "2022-05-05 06:26:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-05 06:26:07 +0000 UTC,
    Amount: (int) 5490
   },
   (string) (len=29) "2024-02-03 19:54:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-03 19:54:59 +0000 UTC,
    Amount: (int) 8221
   },
   (string) (len=29) "2024-02-04 04:19:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-04 04:19:56 +0000 UTC,
    Amount: (int) 8222
   },
   (string) (len=29) "2021-06-15 17:28:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 17:28:49 +0000 UTC,
    Amount: (int) 3642
   },
   (string) (len=29) "2021-12-05 03:22:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 03:22:39 +0000 UTC,
    Amount: (int) 4561
   },
   (string) (len=29) "2021-12-05 07:14:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 07:14:11 +0000 UTC,
    Amount: (int) 4565
   },
   (string) (len=29) "2022-10-04 06:59:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-04 06:59:30 +0000 UTC,
    Amount: (int) 6399
   },
   (string) (len=29) "2022-10-12 02:54:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-12 02:54:18 +0000 UTC,
    Amount: (int) 6418
   },
   (string) (len=29) "2023-06-08 04:52:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 04:52:56 +0000 UTC,
    Amount: (int) 7298
   },
   (string) (len=29) "2024-06-17 13:47:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 13:47:06 +0000 UTC,
    Amount: (int) 9130
   },
   (string) (len=29) "2019-07-28 18:46:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-28 18:46:45 +0000 UTC,
    Amount: (int) 888
   },
   (string) (len=29) "2020-07-02 12:55:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 12:55:51 +0000 UTC,
    Amount: (int) 1817
   },
   (string) (len=29) "2021-01-18 08:05:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 08:05:07 +0000 UTC,
    Amount: (int) 2702
   },
   (string) (len=29) "2021-01-18 17:08:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 17:08:20 +0000 UTC,
    Amount: (int) 2716
   },
   (string) (len=29) "2021-06-16 04:13:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 04:13:42 +0000 UTC,
    Amount: (int) 3653
   },
   (string) (len=29) "2022-04-26 01:03:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-26 01:03:20 +0000 UTC,
    Amount: (int) 5462
   },
   (string) (len=29) "2024-02-07 13:58:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 13:58:03 +0000 UTC,
    Amount: (int) 8234
   },
   (string) (len=29) "2019-07-27 05:20:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-27 05:20:42 +0000 UTC,
    Amount: (int) 881
   },
   (string) (len=29) "2020-06-30 12:55:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-30 12:55:29 +0000 UTC,
    Amount: (int) 1811
   },
   (string) (len=29) "2022-10-03 19:00:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-03 19:00:38 +0000 UTC,
    Amount: (int) 6397
   },
   (string) (len=29) "2020-07-02 17:30:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 17:30:10 +0000 UTC,
    Amount: (int) 1821
   },
   (string) (len=29) "2021-01-18 18:34:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 18:34:40 +0000 UTC,
    Amount: (int) 2717
   },
   (string) (len=29) "2022-05-02 00:45:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-02 00:45:51 +0000 UTC,
    Amount: (int) 5477
   },
   (string) (len=29) "2023-06-09 02:28:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 02:28:45 +0000 UTC,
    Amount: (int) 7311
   },
   (string) (len=29) "2024-06-17 13:51:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 13:51:40 +0000 UTC,
    Amount: (int) 9131
   },
   (string) (len=29) "2016-02-25 09:07:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-25 09:07:48 +0000 UTC,
    Amount: (int) 20
   },
   (string) (len=29) "2019-07-26 18:02:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-26 18:02:56 +0000 UTC,
    Amount: (int) 880
   },
   (string) (len=29) "2021-01-19 11:01:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-19 11:01:13 +0000 UTC,
    Amount: (int) 2721
   },
   (string) (len=29) "2023-06-07 21:43:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-07 21:43:05 +0000 UTC,
    Amount: (int) 7294
   },
   (string) (len=29) "2024-02-10 18:12:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-10 18:12:33 +0000 UTC,
    Amount: (int) 8239
   },
   (string) (len=29) "2016-03-18 21:49:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-18 21:49:14 +0000 UTC,
    Amount: (int) 29
   },
   (string) (len=29) "2020-07-02 17:10:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 17:10:57 +0000 UTC,
    Amount: (int) 1820
   },
   (string) (len=29) "2021-12-05 12:47:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 12:47:32 +0000 UTC,
    Amount: (int) 4570
   },
   (string) (len=29) "2022-05-02 20:07:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-02 20:07:08 +0000 UTC,
    Amount: (int) 5482
   },
   (string) (len=29) "2022-10-10 05:26:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-10 05:26:30 +0000 UTC,
    Amount: (int) 6416
   },
   (string) (len=29) "2024-06-17 09:45:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 09:45:22 +0000 UTC,
    Amount: (int) 9121
   },
   (string) (len=29) "2016-03-15 16:18:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-15 16:18:23 +0000 UTC,
    Amount: (int) 28
   },
   (string) (len=29) "2021-01-22 10:14:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-22 10:14:12 +0000 UTC,
    Amount: (int) 2729
   },
   (string) (len=29) "2021-06-15 22:28:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 22:28:20 +0000 UTC,
    Amount: (int) 3649
   },
   (string) (len=29) "2019-07-28 23:36:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-28 23:36:29 +0000 UTC,
    Amount: (int) 889
   },
   (string) (len=29) "2022-05-04 17:02:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-04 17:02:03 +0000 UTC,
    Amount: (int) 5489
   },
   (string) (len=29) "2023-06-08 13:38:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 13:38:27 +0000 UTC,
    Amount: (int) 7306
   },
   (string) (len=29) "2016-03-06 17:58:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-06 17:58:48 +0000 UTC,
    Amount: (int) 24
   },
   (string) (len=29) "2022-04-26 08:44:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-26 08:44:53 +0000 UTC,
    Amount: (int) 5464
   },
   (string) (len=29) "2022-10-02 14:21:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-02 14:21:06 +0000 UTC,
    Amount: (int) 6391
   },
   (string) (len=29) "2024-06-17 15:08:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 15:08:01 +0000 UTC,
    Amount: (int) 9136
   },
   (string) (len=29) "2024-06-17 16:41:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 16:41:44 +0000 UTC,
    Amount: (int) 9143
   },
   (string) (len=29) "2022-10-04 15:17:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-04 15:17:16 +0000 UTC,
    Amount: (int) 6400
   },
   (string) (len=29) "2019-07-27 13:25:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-27 13:25:19 +0000 UTC,
    Amount: (int) 882
   },
   (string) (len=29) "2022-04-29 07:59:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-29 07:59:26 +0000 UTC,
    Amount: (int) 5469
   },
   (string) (len=29) "2024-02-11 12:59:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-11 12:59:05 +0000 UTC,
    Amount: (int) 8242
   },
   (string) (len=29) "2024-06-17 14:09:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 14:09:15 +0000 UTC,
    Amount: (int) 9133
   },
   (string) (len=29) "2016-03-12 22:14:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-12 22:14:20 +0000 UTC,
    Amount: (int) 27
   },
   (string) (len=29) "2021-06-15 15:16:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 15:16:55 +0000 UTC,
    Amount: (int) 3636
   },
   (string) (len=29) "2021-12-06 10:48:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 10:48:27 +0000 UTC,
    Amount: (int) 4582
   },
   (string) (len=29) "2022-10-02 22:21:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-02 22:21:51 +0000 UTC,
    Amount: (int) 6392
   },
   (string) (len=29) "2023-06-08 18:59:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 18:59:44 +0000 UTC,
    Amount: (int) 7310
   },
   (string) (len=29) "2023-06-09 08:08:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 08:08:54 +0000 UTC,
    Amount: (int) 7316
   },
   (string) (len=29) "2024-02-08 23:03:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-08 23:03:12 +0000 UTC,
    Amount: (int) 8238
   },
   (string) (len=29) "2024-06-17 16:39:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 16:39:35 +0000 UTC,
    Amount: (int) 9142
   },
   (string) (len=29) "2016-02-16 11:10:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-16 11:10:49 +0000 UTC,
    Amount: (int) 14
   },
   (string) (len=29) "2023-06-08 05:30:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 05:30:52 +0000 UTC,
    Amount: (int) 7299
   },
   (string) (len=29) "2023-06-08 11:22:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 11:22:04 +0000 UTC,
    Amount: (int) 7305
   },
   (string) (len=29) "2024-06-17 15:16:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 15:16:53 +0000 UTC,
    Amount: (int) 9138
   },
   (string) (len=29) "2020-06-29 07:29:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 07:29:03 +0000 UTC,
    Amount: (int) 1803
   },
   (string) (len=29) "2020-07-01 19:20:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-01 19:20:07 +0000 UTC,
    Amount: (int) 1813
   },
   (string) (len=29) "2023-06-08 16:27:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 16:27:55 +0000 UTC,
    Amount: (int) 7309
   },
   (string) (len=29) "2024-02-06 22:52:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-06 22:52:01 +0000 UTC,
    Amount: (int) 8231
   },
   (string) (len=29) "2024-02-12 06:44:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-12 06:44:52 +0000 UTC,
    Amount: (int) 8243
   },
   (string) (len=29) "2024-06-17 12:56:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 12:56:05 +0000 UTC,
    Amount: (int) 9127
   },
   (string) (len=29) "2019-07-25 09:11:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-25 09:11:58 +0000 UTC,
    Amount: (int) 876
   },
   (string) (len=29) "2021-01-18 10:46:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 10:46:41 +0000 UTC,
    Amount: (int) 2712
   },
   (string) (len=29) "2021-01-19 01:24:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-19 01:24:03 +0000 UTC,
    Amount: (int) 2719
   },
   (string) (len=29) "2022-04-26 12:57:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-26 12:57:40 +0000 UTC,
    Amount: (int) 5465
   },
   (string) (len=29) "2022-05-02 05:23:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-02 05:23:44 +0000 UTC,
    Amount: (int) 5478
   },
   (string) (len=29) "2024-06-17 15:16:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 15:16:22 +0000 UTC,
    Amount: (int) 9137
   },
   (string) (len=29) "2016-03-10 01:03:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-10 01:03:02 +0000 UTC,
    Amount: (int) 25
   },
   (string) (len=29) "2020-07-03 17:39:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-03 17:39:46 +0000 UTC,
    Amount: (int) 1829
   },
   (string) (len=29) "2021-01-18 12:57:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 12:57:57 +0000 UTC,
    Amount: (int) 2714
   },
   (string) (len=29) "2021-01-18 15:03:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 15:03:25 +0000 UTC,
    Amount: (int) 2715
   },
   (string) (len=29) "2021-06-15 19:00:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 19:00:37 +0000 UTC,
    Amount: (int) 3644
   },
   (string) (len=29) "2023-06-08 08:42:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 08:42:19 +0000 UTC,
    Amount: (int) 7303
   },
   (string) (len=29) "2024-06-17 10:06:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 10:06:39 +0000 UTC,
    Amount: (int) 9122
   },
   (string) (len=29) "2019-07-25 22:47:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-25 22:47:13 +0000 UTC,
    Amount: (int) 877
   },
   (string) (len=29) "2019-07-31 06:23:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-31 06:23:15 +0000 UTC,
    Amount: (int) 891
   },
   (string) (len=29) "2021-12-05 03:45:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 03:45:59 +0000 UTC,
    Amount: (int) 4562
   },
   (string) (len=29) "2022-05-01 18:34:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-01 18:34:23 +0000 UTC,
    Amount: (int) 5475
   },
   (string) (len=29) "2022-05-04 15:24:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-04 15:24:07 +0000 UTC,
    Amount: (int) 5488
   },
   (string) (len=29) "2022-10-08 01:46:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-08 01:46:52 +0000 UTC,
    Amount: (int) 6409
   },
   (string) (len=29) "2024-06-17 14:30:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 14:30:08 +0000 UTC,
    Amount: (int) 9135
   },
   (string) (len=29) "2019-07-24 20:26:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-24 20:26:43 +0000 UTC,
    Amount: (int) 873
   },
   (string) (len=29) "2019-07-25 02:36:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-25 02:36:47 +0000 UTC,
    Amount: (int) 875
   },
   (string) (len=29) "2016-03-19 06:55:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-19 06:55:38 +0000 UTC,
    Amount: (int) 30
   },
   (string) (len=29) "2021-01-18 08:48:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 08:48:23 +0000 UTC,
    Amount: (int) 2703
   },
   (string) (len=29) "2021-06-16 07:40:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 07:40:38 +0000 UTC,
    Amount: (int) 3657
   },
   (string) (len=29) "2023-06-08 10:49:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 10:49:14 +0000 UTC,
    Amount: (int) 7304
   },
   (string) (len=29) "2024-02-13 09:04:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-13 09:04:40 +0000 UTC,
    Amount: (int) 8250
   },
   (string) (len=29) "2020-07-02 13:46:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 13:46:55 +0000 UTC,
    Amount: (int) 1818
   },
   (string) (len=29) "2021-01-18 07:55:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 07:55:26 +0000 UTC,
    Amount: (int) 2701
   },
   (string) (len=29) "2021-01-19 03:16:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-19 03:16:11 +0000 UTC,
    Amount: (int) 2720
   },
   (string) (len=29) "2021-06-16 09:44:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 09:44:04 +0000 UTC,
    Amount: (int) 3659
   },
   (string) (len=29) "2024-02-04 09:43:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-04 09:43:23 +0000 UTC,
    Amount: (int) 8225
   },
   (string) (len=29) "2024-02-04 14:50:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-04 14:50:20 +0000 UTC,
    Amount: (int) 8226
   },
   (string) (len=29) "2024-06-17 18:14:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 18:14:20 +0000 UTC,
    Amount: (int) 9146
   },
   (string) (len=29) "2016-02-10 14:31:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-10 14:31:22 +0000 UTC,
    Amount: (int) 10
   },
   (string) (len=29) "2016-02-24 21:17:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-24 21:17:59 +0000 UTC,
    Amount: (int) 19
   },
   (string) (len=29) "2020-07-03 10:02:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-03 10:02:38 +0000 UTC,
    Amount: (int) 1825
   },
   (string) (len=29) "2020-07-03 12:54:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-03 12:54:01 +0000 UTC,
    Amount: (int) 1827
   },
   (string) (len=29) "2024-06-17 10:19:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 10:19:50 +0000 UTC,
    Amount: (int) 9123
   },
   (string) (len=29) "2021-06-15 16:01:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 16:01:55 +0000 UTC,
    Amount: (int) 3638
   },
   (string) (len=29) "2021-06-15 17:05:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 17:05:37 +0000 UTC,
    Amount: (int) 3640
   },
   (string) (len=29) "2022-05-03 05:33:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-03 05:33:23 +0000 UTC,
    Amount: (int) 5483
   },
   (string) (len=29) "2022-10-08 13:25:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-08 13:25:42 +0000 UTC,
    Amount: (int) 6411
   },
   (string) (len=29) "2023-06-09 09:55:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 09:55:18 +0000 UTC,
    Amount: (int) 7318
   },
   (string) (len=29) "2019-07-28 00:32:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-28 00:32:20 +0000 UTC,
    Amount: (int) 885
   },
   (string) (len=29) "2020-06-30 16:14:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-30 16:14:04 +0000 UTC,
    Amount: (int) 1812
   },
   (string) (len=29) "2021-06-15 19:50:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 19:50:55 +0000 UTC,
    Amount: (int) 3646
   },
   (string) (len=29) "2022-05-01 15:34:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-01 15:34:19 +0000 UTC,
    Amount: (int) 5473
   },
   (string) (len=29) "2022-10-04 18:05:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-04 18:05:20 +0000 UTC,
    Amount: (int) 6401
   },
   (string) (len=29) "2020-06-29 07:13:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 07:13:43 +0000 UTC,
    Amount: (int) 1801
   },
   (string) (len=29) "2021-06-16 07:45:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 07:45:20 +0000 UTC,
    Amount: (int) 3658
   },
   (string) (len=29) "2021-12-06 13:23:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 13:23:59 +0000 UTC,
    Amount: (int) 4584
   },
   (string) (len=29) "2024-02-07 16:42:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 16:42:20 +0000 UTC,
    Amount: (int) 8235
   },
   (string) (len=29) "2024-02-13 09:03:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-13 09:03:21 +0000 UTC,
    Amount: (int) 8249
   },
   (string) (len=29) "2022-05-02 15:07:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-02 15:07:31 +0000 UTC,
    Amount: (int) 5481
   },
   (string) (len=29) "2023-06-08 16:08:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 16:08:16 +0000 UTC,
    Amount: (int) 7308
   },
   (string) (len=29) "2021-01-18 09:44:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 09:44:10 +0000 UTC,
    Amount: (int) 2707
   },
   (string) (len=29) "2021-01-18 09:52:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 09:52:11 +0000 UTC,
    Amount: (int) 2708
   },
   (string) (len=29) "2021-12-05 20:48:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 20:48:55 +0000 UTC,
    Amount: (int) 4576
   },
   (string) (len=29) "2021-12-05 21:03:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 21:03:27 +0000 UTC,
    Amount: (int) 4577
   },
   (string) (len=29) "2022-10-04 00:35:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-04 00:35:29 +0000 UTC,
    Amount: (int) 6398
   },
   (string) (len=29) "2024-06-17 11:12:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 11:12:39 +0000 UTC,
    Amount: (int) 9125
   },
   (string) (len=29) "2019-07-26 10:43:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-26 10:43:05 +0000 UTC,
    Amount: (int) 878
   },
   (string) (len=29) "2019-07-26 13:59:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-26 13:59:16 +0000 UTC,
    Amount: (int) 879
   },
   (string) (len=29) "2020-06-29 07:36:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 07:36:42 +0000 UTC,
    Amount: (int) 1804
   },
   (string) (len=29) "2021-01-18 10:01:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 10:01:47 +0000 UTC,
    Amount: (int) 2709
   },
   (string) (len=29) "2022-04-26 06:30:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-26 06:30:17 +0000 UTC,
    Amount: (int) 5463
   },
   (string) (len=29) "2022-10-05 13:40:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-05 13:40:30 +0000 UTC,
    Amount: (int) 6404
   },
   (string) (len=29) "2019-07-28 11:35:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-28 11:35:14 +0000 UTC,
    Amount: (int) 887
   },
   (string) (len=29) "2022-04-28 02:09:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-28 02:09:03 +0000 UTC,
    Amount: (int) 5466
   },
   (string) (len=29) "2022-10-08 03:17:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-08 03:17:53 +0000 UTC,
    Amount: (int) 6410
   },
   (string) (len=29) "2022-10-11 10:27:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-11 10:27:41 +0000 UTC,
    Amount: (int) 6417
   },
   (string) (len=29) "2023-06-07 21:11:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-07 21:11:31 +0000 UTC,
    Amount: (int) 7293
   },
   (string) (len=29) "2023-06-08 00:21:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 00:21:01 +0000 UTC,
    Amount: (int) 7297
   },
   (string) (len=29) "2023-06-08 08:03:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 08:03:06 +0000 UTC,
    Amount: (int) 7302
   },
   (string) (len=29) "2020-06-29 08:19:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 08:19:15 +0000 UTC,
    Amount: (int) 1805
   },
   (string) (len=29) "2021-01-18 09:09:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 09:09:44 +0000 UTC,
    Amount: (int) 2706
   },
   (string) (len=29) "2021-12-05 06:25:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 06:25:08 +0000 UTC,
    Amount: (int) 4564
   },
   (string) (len=29) "2021-12-05 11:07:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 11:07:24 +0000 UTC,
    Amount: (int) 4567
   },
   (string) (len=29) "2021-12-06 17:49:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 17:49:26 +0000 UTC,
    Amount: (int) 4588
   },
   (string) (len=29) "2022-04-29 20:56:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-04-29 20:56:35 +0000 UTC,
    Amount: (int) 5470
   },
   (string) (len=29) "2023-06-09 10:43:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 10:43:14 +0000 UTC,
    Amount: (int) 7320
   },
   (string) (len=29) "2024-02-11 00:34:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-11 00:34:42 +0000 UTC,
    Amount: (int) 8240
   },
   (string) (len=29) "2021-12-05 11:51:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 11:51:39 +0000 UTC,
    Amount: (int) 4569
   },
   (string) (len=29) "2022-10-03 06:27:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-03 06:27:42 +0000 UTC,
    Amount: (int) 6395
   },
   (string) (len=29) "2022-10-05 07:22:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-05 07:22:47 +0000 UTC,
    Amount: (int) 6403
   },
   (string) (len=29) "2023-06-08 06:25:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 06:25:34 +0000 UTC,
    Amount: (int) 7301
   },
   (string) (len=29) "2023-06-09 07:07:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 07:07:50 +0000 UTC,
    Amount: (int) 7312
   },
   (string) (len=29) "2020-07-03 07:03:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-03 07:03:43 +0000 UTC,
    Amount: (int) 1824
   },
   (string) (len=29) "2021-01-20 08:13:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-20 08:13:21 +0000 UTC,
    Amount: (int) 2724
   },
   (string) (len=29) "2021-06-16 01:34:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 01:34:05 +0000 UTC,
    Amount: (int) 3652
   },
   (string) (len=29) "2021-12-06 19:47:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 19:47:59 +0000 UTC,
    Amount: (int) 4590
   },
   (string) (len=29) "2023-06-08 06:19:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-08 06:19:49 +0000 UTC,
    Amount: (int) 7300
   },
   (string) (len=29) "2016-01-30 16:57:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-30 16:57:02 +0000 UTC,
    Amount: (int) 5
   },
   (string) (len=29) "2019-07-24 13:00:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-24 13:00:22 +0000 UTC,
    Amount: (int) 871
   },
   (string) (len=29) "2020-07-02 16:10:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-02 16:10:08 +0000 UTC,
    Amount: (int) 1819
   },
   (string) (len=29) "2021-01-18 22:32:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-18 22:32:06 +0000 UTC,
    Amount: (int) 2718
   },
   (string) (len=29) "2021-12-06 14:05:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-06 14:05:55 +0000 UTC,
    Amount: (int) 4585
   },
   (string) (len=29) "2023-06-09 09:14:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-09 09:14:06 +0000 UTC,
    Amount: (int) 7317
   },
   (string) (len=29) "2024-02-12 20:49:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-12 20:49:18 +0000 UTC,
    Amount: (int) 8247
   },
   (string) (len=29) "2024-06-17 13:47:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 13:47:01 +0000 UTC,
    Amount: (int) 9129
   },
   (string) (len=29) "2021-06-16 00:49:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-16 00:49:56 +0000 UTC,
    Amount: (int) 3651
   },
   (string) (len=29) "2021-12-05 17:41:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-05 17:41:48 +0000 UTC,
    Amount: (int) 4573
   },
   (string) (len=29) "2022-10-05 00:37:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-05 00:37:33 +0000 UTC,
    Amount: (int) 6402
   },
   (string) (len=55) "2024-06-17 23:04:30.928194 +0200 CEST m=+1870.234215286": (github.Hist) {
    Date: (time.Time) 2024-06-17 23:04:30.928194 +0200 CEST m=+1870.234215286,
    Amount: (int) 9161
   },
   (string) (len=29) "2020-06-29 22:24:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-06-29 22:24:56 +0000 UTC,
    Amount: (int) 1809
   },
   (string) (len=29) "2021-06-15 17:25:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 17:25:40 +0000 UTC,
    Amount: (int) 3641
   },
   (string) (len=29) "2016-01-31 06:01:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-31 06:01:01 +0000 UTC,
    Amount: (int) 6
   },
   (string) (len=29) "2016-02-09 19:59:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-09 19:59:05 +0000 UTC,
    Amount: (int) 9
   },
   (string) (len=29) "2016-02-16 11:50:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-16 11:50:55 +0000 UTC,
    Amount: (int) 15
   },
   (string) (len=29) "2019-08-02 00:44:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-02 00:44:53 +0000 UTC,
    Amount: (int) 892
   },
   (string) (len=29) "2023-06-07 21:09:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-07 21:09:51 +0000 UTC,
    Amount: (int) 7292
   },
   (string) (len=29) "2016-03-10 04:29:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-10 04:29:42 +0000 UTC,
    Amount: (int) 26
   },
   (string) (len=29) "2019-08-04 15:32:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-04 15:32:20 +0000 UTC,
    Amount: (int) 898
   },
   (string) (len=29) "2022-05-02 05:39:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-02 05:39:13 +0000 UTC,
    Amount: (int) 5479
   },
   (string) (len=29) "2022-10-03 04:50:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-03 04:50:36 +0000 UTC,
    Amount: (int) 6394
   },
   (string) (len=29) "2024-06-17 18:43:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 18:43:07 +0000 UTC,
    Amount: (int) 9147
   },
   (string) (len=29) "2019-07-27 17:21:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-07-27 17:21:06 +0000 UTC,
    Amount: (int) 883
   },
   (string) (len=29) "2019-08-04 17:39:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-08-04 17:39:10 +0000 UTC,
    Amount: (int) 899
   },
   (string) (len=29) "2021-06-15 18:41:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 18:41:31 +0000 UTC,
    Amount: (int) 3643
   },
   (string) (len=29) "2024-06-17 19:24:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 19:24:56 +0000 UTC,
    Amount: (int) 9150
   },
   (string) (len=29) "2016-02-14 20:16:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-14 20:16:13 +0000 UTC,
    Amount: (int) 13
   },
   (string) (len=29) "2021-06-15 16:21:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-15 16:21:32 +0000 UTC,
    Amount: (int) 3639
   },
   (string) (len=29) "2022-10-09 14:12:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-09 14:12:13 +0000 UTC,
    Amount: (int) 6413
   },
   (string) (len=29) "2024-02-12 14:54:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-12 14:54:51 +0000 UTC,
    Amount: (int) 8245
   },
   (string) (len=29) "2024-06-17 10:21:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 10:21:11 +0000 UTC,
    Amount: (int) 9124
   },
   (string) (len=29) "2024-02-06 06:29:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-06 06:29:50 +0000 UTC,
    Amount: (int) 8229
   },
   (string) (len=29) "2024-02-08 17:27:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-08 17:27:46 +0000 UTC,
    Amount: (int) 8236
   },
   (string) (len=29) "2021-01-20 09:14:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-20 09:14:17 +0000 UTC,
    Amount: (int) 2725
   },
   (string) (len=29) "2022-10-03 02:21:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-03 02:21:41 +0000 UTC,
    Amount: (int) 6393
   }
  }),
  IssueHistMapPtr: (*map[string]github.Hist)(0xc00011a008)((len=301) {
   (string) (len=29) "2024-04-04 15:01:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-04 15:01:55 +0000 UTC,
    Amount: (int) 335
   },
   (string) (len=29) "2023-08-26 21:12:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-26 21:12:15 +0000 UTC,
    Amount: (int) 219
   },
   (string) (len=29) "2024-02-27 15:43:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-27 15:43:40 +0000 UTC,
    Amount: (int) 324
   },
   (string) (len=29) "2024-01-11 15:44:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-11 15:44:12 +0000 UTC,
    Amount: (int) 302
   },
   (string) (len=29) "2024-02-24 07:19:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-24 07:19:53 +0000 UTC,
    Amount: (int) 322
   },
   (string) (len=29) "2023-08-13 11:33:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-13 11:33:07 +0000 UTC,
    Amount: (int) 210
   },
   (string) (len=29) "2023-08-25 12:56:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-25 12:56:00 +0000 UTC,
    Amount: (int) 217
   },
   (string) (len=29) "2022-10-13 14:39:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-13 14:39:45 +0000 UTC,
    Amount: (int) 124
   },
   (string) (len=29) "2022-12-27 08:35:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-27 08:35:56 +0000 UTC,
    Amount: (int) 145
   },
   (string) (len=29) "2023-07-03 17:04:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-03 17:04:11 +0000 UTC,
    Amount: (int) 201
   },
   (string) (len=29) "2023-10-05 23:25:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-05 23:25:22 +0000 UTC,
    Amount: (int) 236
   },
   (string) (len=29) "2024-01-18 03:44:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-18 03:44:08 +0000 UTC,
    Amount: (int) 305
   },
   (string) (len=29) "2024-05-11 17:42:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-11 17:42:24 +0000 UTC,
    Amount: (int) 370
   },
   (string) (len=29) "2024-05-16 03:19:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-16 03:19:58 +0000 UTC,
    Amount: (int) 377
   },
   (string) (len=29) "2021-04-25 18:45:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-04-25 18:45:37 +0000 UTC,
    Amount: (int) 22
   },
   (string) (len=29) "2022-09-27 13:05:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-09-27 13:05:19 +0000 UTC,
    Amount: (int) 117
   },
   (string) (len=29) "2024-05-01 18:19:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-01 18:19:20 +0000 UTC,
    Amount: (int) 361
   },
   (string) (len=29) "2022-12-12 18:04:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-12 18:04:58 +0000 UTC,
    Amount: (int) 136
   },
   (string) (len=29) "2023-08-15 17:14:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-15 17:14:37 +0000 UTC,
    Amount: (int) 212
   },
   (string) (len=29) "2023-06-18 05:23:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-18 05:23:12 +0000 UTC,
    Amount: (int) 195
   },
   (string) (len=29) "2024-01-08 17:34:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-08 17:34:24 +0000 UTC,
    Amount: (int) 301
   },
   (string) (len=29) "2024-02-07 22:32:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 22:32:45 +0000 UTC,
    Amount: (int) 310
   },
   (string) (len=29) "2024-04-10 20:38:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-10 20:38:20 +0000 UTC,
    Amount: (int) 339
   },
   (string) (len=29) "2024-04-27 00:16:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-27 00:16:38 +0000 UTC,
    Amount: (int) 351
   },
   (string) (len=29) "2021-10-02 21:56:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-10-02 21:56:13 +0000 UTC,
    Amount: (int) 44
   },
   (string) (len=29) "2022-12-15 06:00:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-15 06:00:02 +0000 UTC,
    Amount: (int) 141
   },
   (string) (len=29) "2022-08-11 21:23:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-11 21:23:14 +0000 UTC,
    Amount: (int) 113
   },
   (string) (len=29) "2023-06-12 18:46:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-12 18:46:18 +0000 UTC,
    Amount: (int) 192
   },
   (string) (len=29) "2024-05-22 00:22:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-22 00:22:22 +0000 UTC,
    Amount: (int) 380
   },
   (string) (len=55) "2024-06-17 23:04:30.928194 +0200 CEST m=+1870.234215286": (github.Hist) {
    Date: (time.Time) 2024-06-17 23:04:30.928194 +0200 CEST m=+1870.234215286,
    Amount: (int) 6151
   },
   (string) (len=29) "2021-05-16 20:41:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-05-16 20:41:48 +0000 UTC,
    Amount: (int) 24
   },
   (string) (len=29) "2021-12-21 20:18:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-21 20:18:39 +0000 UTC,
    Amount: (int) 55
   },
   (string) (len=29) "2023-04-15 00:54:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-04-15 00:54:41 +0000 UTC,
    Amount: (int) 182
   },
   (string) (len=29) "2023-06-04 04:00:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-04 04:00:18 +0000 UTC,
    Amount: (int) 189
   },
   (string) (len=29) "2023-11-13 08:17:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-13 08:17:31 +0000 UTC,
    Amount: (int) 263
   },
   (string) (len=29) "2024-04-26 20:27:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-26 20:27:16 +0000 UTC,
    Amount: (int) 350
   },
   (string) (len=29) "2024-05-01 20:55:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-01 20:55:55 +0000 UTC,
    Amount: (int) 362
   },
   (string) (len=29) "2020-12-13 03:30:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-12-13 03:30:50 +0000 UTC,
    Amount: (int) 10
   },
   (string) (len=29) "2022-11-19 20:39:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-11-19 20:39:56 +0000 UTC,
    Amount: (int) 131
   },
   (string) (len=29) "2023-06-25 00:23:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-25 00:23:47 +0000 UTC,
    Amount: (int) 196
   },
   (string) (len=29) "2023-11-06 14:43:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-06 14:43:03 +0000 UTC,
    Amount: (int) 255
   },
   (string) (len=29) "2024-02-01 22:57:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-01 22:57:26 +0000 UTC,
    Amount: (int) 308
   },
   (string) (len=29) "2024-02-02 19:02:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-02 19:02:55 +0000 UTC,
    Amount: (int) 309
   },
   (string) (len=29) "2022-08-09 10:54:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-09 10:54:42 +0000 UTC,
    Amount: (int) 112
   },
   (string) (len=29) "2023-06-15 15:25:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-15 15:25:37 +0000 UTC,
    Amount: (int) 194
   },
   (string) (len=29) "2023-05-01 20:27:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-05-01 20:27:55 +0000 UTC,
    Amount: (int) 185
   },
   (string) (len=29) "2023-10-14 12:42:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-14 12:42:04 +0000 UTC,
    Amount: (int) 244
   },
   (string) (len=29) "2021-08-22 04:17:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-22 04:17:27 +0000 UTC,
    Amount: (int) 39
   },
   (string) (len=29) "2022-11-26 22:23:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-11-26 22:23:29 +0000 UTC,
    Amount: (int) 133
   },
   (string) (len=29) "2023-11-10 02:04:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-10 02:04:56 +0000 UTC,
    Amount: (int) 261
   },
   (string) (len=29) "2024-05-01 15:56:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-01 15:56:39 +0000 UTC,
    Amount: (int) 360
   },
   (string) (len=29) "2019-11-30 19:45:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-11-30 19:45:18 +0000 UTC,
    Amount: (int) 4
   },
   (string) (len=29) "2020-08-20 23:01:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-08-20 23:01:43 +0000 UTC,
    Amount: (int) 5
   },
   (string) (len=29) "2023-09-02 10:54:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-02 10:54:54 +0000 UTC,
    Amount: (int) 223
   },
   (string) (len=29) "2023-10-07 16:04:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-07 16:04:39 +0000 UTC,
    Amount: (int) 237
   },
   (string) (len=29) "2022-10-10 00:17:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-10 00:17:03 +0000 UTC,
    Amount: (int) 122
   },
   (string) (len=29) "2023-08-05 23:01:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-05 23:01:38 +0000 UTC,
    Amount: (int) 208
   },
   (string) (len=29) "2024-01-13 21:11:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-13 21:11:30 +0000 UTC,
    Amount: (int) 303
   },
   (string) (len=29) "2021-03-31 17:42:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-31 17:42:12 +0000 UTC,
    Amount: (int) 18
   },
   (string) (len=29) "2022-07-31 20:23:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-31 20:23:03 +0000 UTC,
    Amount: (int) 107
   },
   (string) (len=29) "2023-07-07 17:31:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-07 17:31:00 +0000 UTC,
    Amount: (int) 202
   },
   (string) (len=29) "2023-09-07 20:44:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-07 20:44:27 +0000 UTC,
    Amount: (int) 226
   },
   (string) (len=29) "2023-11-01 14:38:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-01 14:38:25 +0000 UTC,
    Amount: (int) 251
   },
   (string) (len=29) "2022-07-09 15:58:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-09 15:58:22 +0000 UTC,
    Amount: (int) 103
   },
   (string) (len=29) "2022-10-21 21:48:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-21 21:48:18 +0000 UTC,
    Amount: (int) 125
   },
   (string) (len=29) "2023-07-17 17:10:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-17 17:10:55 +0000 UTC,
    Amount: (int) 205
   },
   (string) (len=29) "2024-04-20 15:28:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-20 15:28:35 +0000 UTC,
    Amount: (int) 342
   },
   (string) (len=29) "2021-03-21 09:40:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-21 09:40:27 +0000 UTC,
    Amount: (int) 17
   },
   (string) (len=29) "2021-05-10 02:46:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-05-10 02:46:25 +0000 UTC,
    Amount: (int) 23
   },
   (string) (len=29) "2021-11-03 15:03:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-11-03 15:03:25 +0000 UTC,
    Amount: (int) 49
   },
   (string) (len=29) "2022-08-05 03:15:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-05 03:15:49 +0000 UTC,
    Amount: (int) 110
   },
   (string) (len=29) "2023-06-03 17:17:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-03 17:17:08 +0000 UTC,
    Amount: (int) 188
   },
   (string) (len=29) "2023-08-04 19:00:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-04 19:00:30 +0000 UTC,
    Amount: (int) 207
   },
   (string) (len=29) "2020-12-05 10:42:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-12-05 10:42:10 +0000 UTC,
    Amount: (int) 9
   },
   (string) (len=29) "2021-02-02 00:29:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-02 00:29:00 +0000 UTC,
    Amount: (int) 14
   },
   (string) (len=29) "2023-08-29 03:12:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-29 03:12:30 +0000 UTC,
    Amount: (int) 221
   },
   (string) (len=29) "2024-03-10 20:03:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-10 20:03:43 +0000 UTC,
    Amount: (int) 327
   },
   (string) (len=29) "2024-03-18 07:46:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-18 07:46:48 +0000 UTC,
    Amount: (int) 331
   },
   (string) (len=29) "2024-04-24 12:48:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-24 12:48:22 +0000 UTC,
    Amount: (int) 347
   },
   (string) (len=29) "2022-08-05 10:09:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-05 10:09:18 +0000 UTC,
    Amount: (int) 111
   },
   (string) (len=29) "2024-03-14 00:19:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-14 00:19:48 +0000 UTC,
    Amount: (int) 329
   },
   (string) (len=29) "2023-10-30 02:43:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-30 02:43:21 +0000 UTC,
    Amount: (int) 250
   },
   (string) (len=29) "2022-12-14 13:54:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-14 13:54:14 +0000 UTC,
    Amount: (int) 139
   },
   (string) (len=29) "2023-09-03 07:52:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-03 07:52:17 +0000 UTC,
    Amount: (int) 224
   },
   (string) (len=29) "2023-11-08 03:31:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-08 03:31:16 +0000 UTC,
    Amount: (int) 257
   },
   (string) (len=29) "2024-02-16 19:27:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-16 19:27:46 +0000 UTC,
    Amount: (int) 318
   },
   (string) (len=29) "2021-04-22 08:43:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-04-22 08:43:12 +0000 UTC,
    Amount: (int) 21
   },
   (string) (len=29) "2022-07-02 21:44:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-02 21:44:48 +0000 UTC,
    Amount: (int) 100
   },
   (string) (len=29) "2023-11-22 21:59:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-22 21:59:57 +0000 UTC,
    Amount: (int) 268
   },
   (string) (len=29) "2024-02-13 12:55:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-13 12:55:01 +0000 UTC,
    Amount: (int) 315
   },
   (string) (len=29) "2024-02-14 02:15:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-14 02:15:43 +0000 UTC,
    Amount: (int) 316
   },
   (string) (len=29) "2024-05-23 14:20:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-23 14:20:48 +0000 UTC,
    Amount: (int) 381
   },
   (string) (len=29) "2022-11-19 02:57:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-11-19 02:57:08 +0000 UTC,
    Amount: (int) 130
   },
   (string) (len=29) "2022-12-13 02:28:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-13 02:28:40 +0000 UTC,
    Amount: (int) 137
   },
   (string) (len=29) "2023-08-12 14:22:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-12 14:22:07 +0000 UTC,
    Amount: (int) 209
   },
   (string) (len=29) "2021-05-20 08:12:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-05-20 08:12:02 +0000 UTC,
    Amount: (int) 25
   },
   (string) (len=29) "2021-11-11 07:29:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-11-11 07:29:36 +0000 UTC,
    Amount: (int) 50
   },
   (string) (len=29) "2024-05-05 13:51:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-05 13:51:00 +0000 UTC,
    Amount: (int) 363
   },
   (string) (len=29) "2021-10-05 18:29:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-10-05 18:29:22 +0000 UTC,
    Amount: (int) 46
   },
   (string) (len=29) "2023-09-30 07:19:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-30 07:19:27 +0000 UTC,
    Amount: (int) 234
   },
   (string) (len=29) "2022-11-23 00:49:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-11-23 00:49:09 +0000 UTC,
    Amount: (int) 132
   },
   (string) (len=29) "2023-06-27 21:49:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-27 21:49:12 +0000 UTC,
    Amount: (int) 200
   },
   (string) (len=29) "2023-10-12 11:11:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-12 11:11:39 +0000 UTC,
    Amount: (int) 241
   },
   (string) (len=29) "2023-11-04 14:18:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-04 14:18:27 +0000 UTC,
    Amount: (int) 253
   },
   (string) (len=29) "2024-04-20 22:19:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-20 22:19:53 +0000 UTC,
    Amount: (int) 344
   },
   (string) (len=29) "2021-08-30 22:30:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-30 22:30:42 +0000 UTC,
    Amount: (int) 40
   },
   (string) (len=29) "2021-12-21 21:49:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-21 21:49:24 +0000 UTC,
    Amount: (int) 56
   },
   (string) (len=29) "2024-04-09 15:14:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-09 15:14:38 +0000 UTC,
    Amount: (int) 338
   },
   (string) (len=29) "2024-05-12 13:36:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-12 13:36:15 +0000 UTC,
    Amount: (int) 371
   },
   (string) (len=29) "2022-08-24 13:36:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-24 13:36:20 +0000 UTC,
    Amount: (int) 116
   },
   (string) (len=29) "2023-10-02 14:22:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-02 14:22:42 +0000 UTC,
    Amount: (int) 235
   },
   (string) (len=29) "2023-11-25 20:33:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-25 20:33:42 +0000 UTC,
    Amount: (int) 270
   },
   (string) (len=29) "2024-01-28 19:34:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-28 19:34:38 +0000 UTC,
    Amount: (int) 306
   },
   (string) (len=29) "2024-02-19 15:19:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-19 15:19:31 +0000 UTC,
    Amount: (int) 320
   },
   (string) (len=29) "2024-04-07 07:04:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-07 07:04:37 +0000 UTC,
    Amount: (int) 337
   },
   (string) (len=29) "2021-08-19 18:32:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-19 18:32:27 +0000 UTC,
    Amount: (int) 36
   },
   (string) (len=29) "2023-06-27 17:23:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-27 17:23:23 +0000 UTC,
    Amount: (int) 199
   },
   (string) (len=29) "2023-01-17 20:20:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-01-17 20:20:57 +0000 UTC,
    Amount: (int) 148
   },
   (string) (len=29) "2023-01-18 18:46:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-01-18 18:46:49 +0000 UTC,
    Amount: (int) 149
   },
   (string) (len=29) "2024-05-28 16:13:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-28 16:13:05 +0000 UTC,
    Amount: (int) 389
   },
   (string) (len=29) "2021-12-31 07:40:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-31 07:40:28 +0000 UTC,
    Amount: (int) 60
   },
   (string) (len=29) "2022-12-21 18:56:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-21 18:56:59 +0000 UTC,
    Amount: (int) 143
   },
   (string) (len=29) "2023-01-22 01:33:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-01-22 01:33:00 +0000 UTC,
    Amount: (int) 150
   },
   (string) (len=29) "2023-07-22 01:41:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-22 01:41:33 +0000 UTC,
    Amount: (int) 206
   },
   (string) (len=29) "2023-10-15 17:17:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-15 17:17:22 +0000 UTC,
    Amount: (int) 245
   },
   (string) (len=29) "2023-11-25 04:46:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-25 04:46:24 +0000 UTC,
    Amount: (int) 269
   },
   (string) (len=29) "2021-05-30 03:39:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-05-30 03:39:29 +0000 UTC,
    Amount: (int) 29
   },
   (string) (len=29) "2021-06-14 06:11:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-14 06:11:10 +0000 UTC,
    Amount: (int) 31
   },
   (string) (len=29) "2024-03-30 23:38:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-30 23:38:52 +0000 UTC,
    Amount: (int) 334
   },
   (string) (len=29) "2024-04-27 00:32:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-27 00:32:07 +0000 UTC,
    Amount: (int) 352
   },
   (string) (len=29) "2022-07-16 05:28:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-16 05:28:04 +0000 UTC,
    Amount: (int) 105
   },
   (string) (len=29) "2022-12-10 05:23:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-10 05:23:42 +0000 UTC,
    Amount: (int) 134
   },
   (string) (len=29) "2023-07-10 20:37:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-10 20:37:27 +0000 UTC,
    Amount: (int) 203
   },
   (string) (len=29) "2023-11-12 20:30:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-12 20:30:45 +0000 UTC,
    Amount: (int) 262
   },
   (string) (len=29) "2024-04-18 17:13:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-18 17:13:24 +0000 UTC,
    Amount: (int) 341
   },
   (string) (len=29) "2021-05-30 00:14:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-05-30 00:14:56 +0000 UTC,
    Amount: (int) 28
   },
   (string) (len=29) "2022-06-14 19:30:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-14 19:30:34 +0000 UTC,
    Amount: (int) 95
   },
   (string) (len=29) "2023-10-23 09:28:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-23 09:28:17 +0000 UTC,
    Amount: (int) 248
   },
   (string) (len=29) "2023-11-14 10:51:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-14 10:51:00 +0000 UTC,
    Amount: (int) 265
   },
   (string) (len=29) "2024-04-16 00:10:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-16 00:10:39 +0000 UTC,
    Amount: (int) 340
   },
   (string) (len=29) "2024-04-20 21:56:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-20 21:56:35 +0000 UTC,
    Amount: (int) 343
   },
   (string) (len=29) "2021-12-19 20:32:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-19 20:32:25 +0000 UTC,
    Amount: (int) 54
   },
   (string) (len=29) "2023-04-19 10:44:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-04-19 10:44:13 +0000 UTC,
    Amount: (int) 183
   },
   (string) (len=29) "2022-10-10 01:52:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-10 01:52:34 +0000 UTC,
    Amount: (int) 123
   },
   (string) (len=29) "2023-10-12 15:11:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-12 15:11:09 +0000 UTC,
    Amount: (int) 243
   },
   (string) (len=29) "2023-11-17 19:19:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-17 19:19:07 +0000 UTC,
    Amount: (int) 266
   },
   (string) (len=29) "2024-02-10 11:49:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-10 11:49:50 +0000 UTC,
    Amount: (int) 313
   },
   (string) (len=29) "2024-05-28 04:31:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-28 04:31:13 +0000 UTC,
    Amount: (int) 386
   },
   (string) (len=29) "2021-02-08 15:08:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-08 15:08:58 +0000 UTC,
    Amount: (int) 15
   },
   (string) (len=29) "2021-10-01 14:57:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-10-01 14:57:01 +0000 UTC,
    Amount: (int) 42
   },
   (string) (len=29) "2022-12-11 22:38:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-11 22:38:22 +0000 UTC,
    Amount: (int) 135
   },
   (string) (len=29) "2024-02-17 03:58:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-17 03:58:51 +0000 UTC,
    Amount: (int) 319
   },
   (string) (len=29) "2024-05-09 12:05:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-09 12:05:00 +0000 UTC,
    Amount: (int) 368
   },
   (string) (len=29) "2024-05-14 02:30:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-14 02:30:12 +0000 UTC,
    Amount: (int) 376
   },
   (string) (len=29) "2021-01-07 07:55:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-07 07:55:28 +0000 UTC,
    Amount: (int) 13
   },
   (string) (len=29) "2021-08-03 10:19:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-03 10:19:57 +0000 UTC,
    Amount: (int) 34
   },
   (string) (len=29) "2023-08-16 02:08:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-16 02:08:16 +0000 UTC,
    Amount: (int) 213
   },
   (string) (len=29) "2024-04-06 21:19:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-06 21:19:59 +0000 UTC,
    Amount: (int) 336
   },
   (string) (len=29) "2024-05-26 10:43:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-26 10:43:57 +0000 UTC,
    Amount: (int) 385
   },
   (string) (len=29) "2021-07-23 02:45:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-23 02:45:03 +0000 UTC,
    Amount: (int) 33
   },
   (string) (len=29) "2022-11-13 19:03:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-11-13 19:03:51 +0000 UTC,
    Amount: (int) 129
   },
   (string) (len=29) "2024-01-17 22:06:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-17 22:06:25 +0000 UTC,
    Amount: (int) 304
   },
   (string) (len=29) "2022-07-06 02:04:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-06 02:04:08 +0000 UTC,
    Amount: (int) 102
   },
   (string) (len=29) "2022-10-22 16:29:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-22 16:29:28 +0000 UTC,
    Amount: (int) 126
   },
   (string) (len=29) "2022-05-30 23:09:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-30 23:09:53 +0000 UTC,
    Amount: (int) 91
   },
   (string) (len=29) "2022-06-06 01:43:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-06 01:43:31 +0000 UTC,
    Amount: (int) 94
   },
   (string) (len=29) "2023-08-25 17:55:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-25 17:55:00 +0000 UTC,
    Amount: (int) 218
   },
   (string) (len=29) "2024-02-14 12:56:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-14 12:56:39 +0000 UTC,
    Amount: (int) 317
   },
   (string) (len=29) "2024-03-12 16:15:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-12 16:15:04 +0000 UTC,
    Amount: (int) 328
   },
   (string) (len=29) "2024-04-28 16:16:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-28 16:16:25 +0000 UTC,
    Amount: (int) 354
   },
   (string) (len=29) "2021-08-21 10:16:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-21 10:16:43 +0000 UTC,
    Amount: (int) 38
   },
   (string) (len=29) "2021-12-30 05:12:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-30 05:12:59 +0000 UTC,
    Amount: (int) 58
   },
   (string) (len=29) "2024-05-01 07:51:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-01 07:51:43 +0000 UTC,
    Amount: (int) 358
   },
   (string) (len=29) "2023-10-11 18:41:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-11 18:41:48 +0000 UTC,
    Amount: (int) 239
   },
   (string) (len=29) "2024-02-28 18:13:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-28 18:13:25 +0000 UTC,
    Amount: (int) 325
   },
   (string) (len=29) "2024-03-05 02:44:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-05 02:44:05 +0000 UTC,
    Amount: (int) 326
   },
   (string) (len=29) "2021-06-01 16:42:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-06-01 16:42:30 +0000 UTC,
    Amount: (int) 30
   },
   (string) (len=29) "2021-10-02 19:12:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-10-02 19:12:32 +0000 UTC,
    Amount: (int) 43
   },
   (string) (len=29) "2023-11-08 05:46:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-08 05:46:09 +0000 UTC,
    Amount: (int) 258
   },
   (string) (len=29) "2024-04-23 15:47:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-23 15:47:16 +0000 UTC,
    Amount: (int) 345
   },
   (string) (len=29) "2020-09-28 06:05:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-09-28 06:05:20 +0000 UTC,
    Amount: (int) 7
   },
   (string) (len=29) "2020-12-15 01:19:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-12-15 01:19:40 +0000 UTC,
    Amount: (int) 11
   },
   (string) (len=29) "2022-07-12 13:55:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-12 13:55:52 +0000 UTC,
    Amount: (int) 104
   },
   (string) (len=29) "2022-08-04 02:19:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-04 02:19:31 +0000 UTC,
    Amount: (int) 108
   },
   (string) (len=29) "2022-10-08 16:16:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-08 16:16:50 +0000 UTC,
    Amount: (int) 120
   },
   (string) (len=29) "2024-05-08 19:26:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-08 19:26:36 +0000 UTC,
    Amount: (int) 367
   },
   (string) (len=29) "2024-05-21 22:34:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-21 22:34:34 +0000 UTC,
    Amount: (int) 379
   },
   (string) (len=29) "2021-04-01 15:26:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-04-01 15:26:31 +0000 UTC,
    Amount: (int) 19
   },
   (string) (len=29) "2021-12-04 22:12:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-04 22:12:07 +0000 UTC,
    Amount: (int) 53
   },
   (string) (len=29) "2024-04-28 19:43:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-28 19:43:12 +0000 UTC,
    Amount: (int) 355
   },
   (string) (len=29) "2024-05-23 15:39:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-23 15:39:12 +0000 UTC,
    Amount: (int) 382
   },
   (string) (len=29) "2022-10-30 00:41:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-30 00:41:53 +0000 UTC,
    Amount: (int) 127
   },
   (string) (len=29) "2023-08-14 16:26:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-14 16:26:42 +0000 UTC,
    Amount: (int) 211
   },
   (string) (len=29) "2023-11-07 18:05:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-07 18:05:24 +0000 UTC,
    Amount: (int) 256
   },
   (string) (len=29) "2024-04-23 18:17:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-23 18:17:36 +0000 UTC,
    Amount: (int) 346
   },
   (string) (len=29) "2024-04-29 19:37:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-29 19:37:05 +0000 UTC,
    Amount: (int) 356
   },
   (string) (len=29) "2024-05-06 10:38:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-06 10:38:19 +0000 UTC,
    Amount: (int) 365
   },
   (string) (len=29) "2020-08-29 02:05:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-08-29 02:05:42 +0000 UTC,
    Amount: (int) 6
   },
   (string) (len=29) "2022-12-13 21:03:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-13 21:03:12 +0000 UTC,
    Amount: (int) 138
   },
   (string) (len=29) "2023-06-12 17:35:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-12 17:35:22 +0000 UTC,
    Amount: (int) 191
   },
   (string) (len=29) "2024-05-13 00:34:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-13 00:34:57 +0000 UTC,
    Amount: (int) 373
   },
   (string) (len=29) "2024-05-14 01:44:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-14 01:44:35 +0000 UTC,
    Amount: (int) 375
   },
   (string) (len=29) "2021-05-24 01:36:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-05-24 01:36:55 +0000 UTC,
    Amount: (int) 26
   },
   (string) (len=29) "2022-05-31 16:53:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-31 16:53:55 +0000 UTC,
    Amount: (int) 93
   },
   (string) (len=29) "2023-10-12 02:17:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-12 02:17:04 +0000 UTC,
    Amount: (int) 240
   },
   (string) (len=29) "2023-10-17 05:33:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-17 05:33:50 +0000 UTC,
    Amount: (int) 246
   },
   (string) (len=29) "2024-03-23 21:39:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-23 21:39:37 +0000 UTC,
    Amount: (int) 333
   },
   (string) (len=29) "2021-01-05 07:54:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-01-05 07:54:07 +0000 UTC,
    Amount: (int) 12
   },
   (string) (len=29) "2022-12-26 23:15:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-26 23:15:52 +0000 UTC,
    Amount: (int) 144
   },
   (string) (len=29) "2022-06-29 13:05:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-29 13:05:53 +0000 UTC,
    Amount: (int) 97
   },
   (string) (len=29) "2022-06-29 14:44:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-29 14:44:47 +0000 UTC,
    Amount: (int) 98
   },
   (string) (len=29) "2022-09-28 04:12:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-09-28 04:12:18 +0000 UTC,
    Amount: (int) 118
   },
   (string) (len=29) "2023-04-22 16:39:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-04-22 16:39:56 +0000 UTC,
    Amount: (int) 184
   },
   (string) (len=29) "2024-02-08 17:15:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-08 17:15:18 +0000 UTC,
    Amount: (int) 311
   },
   (string) (len=29) "2019-01-24 13:57:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-01-24 13:57:47 +0000 UTC,
    Amount: (int) 2
   },
   (string) (len=29) "2021-05-28 01:17:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-05-28 01:17:34 +0000 UTC,
    Amount: (int) 27
   },
   (string) (len=29) "2024-05-05 22:12:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-05 22:12:08 +0000 UTC,
    Amount: (int) 364
   },
   (string) (len=29) "2024-05-28 12:32:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-28 12:32:02 +0000 UTC,
    Amount: (int) 388
   },
   (string) (len=29) "2021-08-06 00:40:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-06 00:40:42 +0000 UTC,
    Amount: (int) 35
   },
   (string) (len=29) "2022-12-27 16:09:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-27 16:09:16 +0000 UTC,
    Amount: (int) 146
   },
   (string) (len=29) "2024-05-29 02:36:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-29 02:36:29 +0000 UTC,
    Amount: (int) 390
   },
   (string) (len=29) "2022-06-29 16:46:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-29 16:46:06 +0000 UTC,
    Amount: (int) 99
   },
   (string) (len=29) "2023-04-14 15:01:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-04-14 15:01:14 +0000 UTC,
    Amount: (int) 181
   },
   (string) (len=29) "2022-08-15 16:29:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-15 16:29:58 +0000 UTC,
    Amount: (int) 115
   },
   (string) (len=29) "2022-12-14 21:58:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-14 21:58:29 +0000 UTC,
    Amount: (int) 140
   },
   (string) (len=29) "2023-05-02 18:47:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-05-02 18:47:44 +0000 UTC,
    Amount: (int) 186
   },
   (string) (len=29) "2024-02-23 18:55:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-23 18:55:47 +0000 UTC,
    Amount: (int) 321
   },
   (string) (len=29) "2024-04-27 03:59:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-27 03:59:44 +0000 UTC,
    Amount: (int) 353
   },
   (string) (len=29) "2024-05-25 22:09:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-25 22:09:11 +0000 UTC,
    Amount: (int) 383
   },
   (string) (len=29) "2021-08-20 23:02:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-20 23:02:48 +0000 UTC,
    Amount: (int) 37
   },
   (string) (len=29) "2022-08-13 12:55:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-13 12:55:39 +0000 UTC,
    Amount: (int) 114
   },
   (string) (len=29) "2023-10-19 16:37:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-19 16:37:06 +0000 UTC,
    Amount: (int) 247
   },
   (string) (len=29) "2023-11-21 21:44:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-21 21:44:25 +0000 UTC,
    Amount: (int) 267
   },
   (string) (len=29) "2024-02-24 14:34:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-24 14:34:38 +0000 UTC,
    Amount: (int) 323
   },
   (string) (len=29) "2024-05-01 14:39:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-01 14:39:10 +0000 UTC,
    Amount: (int) 359
   },
   (string) (len=29) "2024-05-13 20:19:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-13 20:19:18 +0000 UTC,
    Amount: (int) 374
   },
   (string) (len=29) "2021-12-02 06:58:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-02 06:58:59 +0000 UTC,
    Amount: (int) 52
   },
   (string) (len=29) "2022-05-31 03:54:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-05-31 03:54:30 +0000 UTC,
    Amount: (int) 92
   },
   (string) (len=29) "2023-09-24 22:53:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-24 22:53:22 +0000 UTC,
    Amount: (int) 233
   },
   (string) (len=29) "2023-11-03 17:07:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-03 17:07:48 +0000 UTC,
    Amount: (int) 252
   },
   (string) (len=29) "2023-11-13 22:23:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-13 22:23:43 +0000 UTC,
    Amount: (int) 264
   },
   (string) (len=29) "2024-05-08 14:58:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-08 14:58:31 +0000 UTC,
    Amount: (int) 366
   },
   (string) (len=29) "2020-12-01 22:51:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-12-01 22:51:47 +0000 UTC,
    Amount: (int) 8
   },
   (string) (len=29) "2021-12-30 21:49:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-30 21:49:13 +0000 UTC,
    Amount: (int) 59
   },
   (string) (len=29) "2023-09-21 15:23:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-21 15:23:55 +0000 UTC,
    Amount: (int) 232
   },
   (string) (len=29) "2024-05-09 13:03:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-09 13:03:53 +0000 UTC,
    Amount: (int) 369
   },
   (string) (len=29) "2023-06-14 06:44:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-14 06:44:04 +0000 UTC,
    Amount: (int) 193
   },
   (string) (len=29) "2023-08-24 14:09:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-24 14:09:13 +0000 UTC,
    Amount: (int) 216
   },
   (string) (len=29) "2023-09-09 16:14:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-09 16:14:10 +0000 UTC,
    Amount: (int) 227
   },
   (string) (len=29) "2023-09-12 11:20:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-12 11:20:35 +0000 UTC,
    Amount: (int) 228
   },
   (string) (len=29) "2023-11-05 23:49:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-05 23:49:09 +0000 UTC,
    Amount: (int) 254
   },
   (string) (len=29) "2024-04-29 22:45:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-29 22:45:40 +0000 UTC,
    Amount: (int) 357
   },
   (string) (len=29) "2023-01-07 19:41:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-01-07 19:41:56 +0000 UTC,
    Amount: (int) 147
   },
   (string) (len=29) "2023-05-21 11:53:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-05-21 11:53:43 +0000 UTC,
    Amount: (int) 187
   },
   (string) (len=29) "2024-05-12 20:27:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-12 20:27:08 +0000 UTC,
    Amount: (int) 372
   },
   (string) (len=29) "2023-08-27 11:39:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-27 11:39:16 +0000 UTC,
    Amount: (int) 220
   },
   (string) (len=29) "2023-09-03 15:55:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-03 15:55:08 +0000 UTC,
    Amount: (int) 225
   },
   (string) (len=29) "2023-09-14 17:23:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-14 17:23:21 +0000 UTC,
    Amount: (int) 230
   },
   (string) (len=29) "2023-10-12 13:47:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-12 13:47:12 +0000 UTC,
    Amount: (int) 242
   },
   (string) (len=29) "2022-08-05 00:32:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-08-05 00:32:12 +0000 UTC,
    Amount: (int) 109
   },
   (string) (len=29) "2022-11-05 12:55:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-11-05 12:55:58 +0000 UTC,
    Amount: (int) 128
   },
   (string) (len=29) "2022-07-02 22:24:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-02 22:24:26 +0000 UTC,
    Amount: (int) 101
   },
   (string) (len=29) "2023-08-23 22:02:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-23 22:02:54 +0000 UTC,
    Amount: (int) 215
   },
   (string) (len=29) "2023-11-08 23:31:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-08 23:31:52 +0000 UTC,
    Amount: (int) 260
   },
   (string) (len=29) "2024-04-26 09:22:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-26 09:22:57 +0000 UTC,
    Amount: (int) 349
   },
   (string) (len=29) "2024-05-26 01:31:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-26 01:31:00 +0000 UTC,
    Amount: (int) 384
   },
   (string) (len=29) "2021-07-08 19:35:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-08 19:35:31 +0000 UTC,
    Amount: (int) 32
   },
   (string) (len=29) "2021-09-24 21:58:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-09-24 21:58:37 +0000 UTC,
    Amount: (int) 41
   },
   (string) (len=29) "2021-04-22 06:59:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-04-22 06:59:42 +0000 UTC,
    Amount: (int) 20
   },
   (string) (len=29) "2022-10-09 20:19:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-09 20:19:57 +0000 UTC,
    Amount: (int) 121
   },
   (string) (len=29) "2024-05-16 18:40:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-16 18:40:52 +0000 UTC,
    Amount: (int) 378
   },
   (string) (len=29) "2024-05-28 08:13:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-05-28 08:13:06 +0000 UTC,
    Amount: (int) 387
   },
   (string) (len=29) "2019-09-06 14:56:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-09-06 14:56:33 +0000 UTC,
    Amount: (int) 3
   },
   (string) (len=29) "2021-12-26 04:11:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-26 04:11:40 +0000 UTC,
    Amount: (int) 57
   },
   (string) (len=29) "2023-06-10 02:51:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-10 02:51:40 +0000 UTC,
    Amount: (int) 190
   },
   (string) (len=29) "2024-03-14 16:29:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-14 16:29:33 +0000 UTC,
    Amount: (int) 330
   },
   (string) (len=29) "2024-02-11 12:43:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-11 12:43:12 +0000 UTC,
    Amount: (int) 314
   },
   (string) (len=29) "2021-03-01 11:04:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-01 11:04:17 +0000 UTC,
    Amount: (int) 16
   },
   (string) (len=29) "2023-10-28 23:12:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-28 23:12:10 +0000 UTC,
    Amount: (int) 249
   },
   (string) (len=29) "2022-07-17 16:41:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-17 16:41:50 +0000 UTC,
    Amount: (int) 106
   },
   (string) (len=29) "2023-06-27 05:02:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-27 05:02:03 +0000 UTC,
    Amount: (int) 198
   },
   (string) (len=29) "2023-09-12 12:54:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-12 12:54:00 +0000 UTC,
    Amount: (int) 229
   },
   (string) (len=29) "2024-02-10 11:38:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-10 11:38:28 +0000 UTC,
    Amount: (int) 312
   },
   (string) (len=29) "2021-10-19 18:59:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-10-19 18:59:05 +0000 UTC,
    Amount: (int) 48
   },
   (string) (len=29) "2021-12-01 01:36:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-12-01 01:36:17 +0000 UTC,
    Amount: (int) 51
   },
   (string) (len=29) "2024-03-23 19:46:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-03-23 19:46:26 +0000 UTC,
    Amount: (int) 332
   },
   (string) (len=29) "2023-08-18 17:36:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-18 17:36:35 +0000 UTC,
    Amount: (int) 214
   },
   (string) (len=29) "2024-01-29 13:19:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-29 13:19:21 +0000 UTC,
    Amount: (int) 307
   },
   (string) (len=29) "2023-11-08 15:25:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-11-08 15:25:40 +0000 UTC,
    Amount: (int) 259
   },
   (string) (len=29) "2022-10-07 19:11:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-10-07 19:11:34 +0000 UTC,
    Amount: (int) 119
   },
   (string) (len=29) "2023-06-26 16:16:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-06-26 16:16:05 +0000 UTC,
    Amount: (int) 197
   },
   (string) (len=29) "2023-07-14 16:32:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-14 16:32:53 +0000 UTC,
    Amount: (int) 204
   },
   (string) (len=29) "2023-09-17 21:47:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-09-17 21:47:54 +0000 UTC,
    Amount: (int) 231
   },
   (string) (len=29) "2021-10-05 00:03:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-10-05 00:03:27 +0000 UTC,
    Amount: (int) 45
   },
   (string) (len=29) "2021-10-05 22:54:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-10-05 22:54:32 +0000 UTC,
    Amount: (int) 47
   },
   (string) (len=29) "2022-12-21 12:04:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-12-21 12:04:10 +0000 UTC,
    Amount: (int) 142
   },
   (string) (len=29) "2023-08-31 09:03:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-31 09:03:53 +0000 UTC,
    Amount: (int) 222
   },
   (string) (len=29) "2023-10-07 16:13:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-10-07 16:13:39 +0000 UTC,
    Amount: (int) 238
   },
   (string) (len=29) "2024-04-24 22:56:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-04-24 22:56:13 +0000 UTC,
    Amount: (int) 348
   },
   (string) (len=29) "2018-08-13 08:51:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2018-08-13 08:51:26 +0000 UTC,
    Amount: (int) 1
   },
   (string) (len=29) "2022-06-21 22:56:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-21 22:56:45 +0000 UTC,
    Amount: (int) 96
   }
  }),
  ForkHistMapPtr: (*map[string]github.Hist)(0xc000080398)((len=331) {
   (string) (len=29) "2024-06-16 10:52:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 10:52:41 +0000 UTC,
    Amount: (int) 2151
   },
   (string) (len=29) "2019-06-02 04:04:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-02 04:04:42 +0000 UTC,
    Amount: (int) 203
   },
   (string) (len=29) "2020-07-11 13:21:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-11 13:21:56 +0000 UTC,
    Amount: (int) 398
   },
   (string) (len=29) "2021-08-03 15:18:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-03 15:18:02 +0000 UTC,
    Amount: (int) 848
   },
   (string) (len=29) "2022-06-10 14:07:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-10 14:07:58 +0000 UTC,
    Amount: (int) 1262
   },
   (string) (len=29) "2023-02-16 22:09:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-16 22:09:25 +0000 UTC,
    Amount: (int) 1517
   },
   (string) (len=29) "2023-07-23 17:36:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-23 17:36:21 +0000 UTC,
    Amount: (int) 1725
   },
   (string) (len=29) "2022-06-28 10:40:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-28 10:40:38 +0000 UTC,
    Amount: (int) 1287
   },
   (string) (len=29) "2024-01-29 06:24:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-29 06:24:01 +0000 UTC,
    Amount: (int) 1925
   },
   (string) (len=29) "2016-03-24 12:08:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-24 12:08:18 +0000 UTC,
    Amount: (int) 18
   },
   (string) (len=29) "2019-04-19 15:59:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-04-19 15:59:45 +0000 UTC,
    Amount: (int) 182
   },
   (string) (len=29) "2019-05-14 01:23:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-14 01:23:11 +0000 UTC,
    Amount: (int) 191
   },
   (string) (len=29) "2021-02-17 17:43:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-17 17:43:52 +0000 UTC,
    Amount: (int) 614
   },
   (string) (len=29) "2022-01-21 05:08:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-21 05:08:21 +0000 UTC,
    Amount: (int) 1075
   },
   (string) (len=29) "2022-06-13 15:08:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-13 15:08:26 +0000 UTC,
    Amount: (int) 1270
   },
   (string) (len=29) "2021-03-03 13:45:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-03 13:45:10 +0000 UTC,
    Amount: (int) 625
   },
   (string) (len=29) "2022-06-18 03:31:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-18 03:31:19 +0000 UTC,
    Amount: (int) 1277
   },
   (string) (len=29) "2023-07-11 08:47:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-11 08:47:58 +0000 UTC,
    Amount: (int) 1712
   },
   (string) (len=29) "2024-02-16 09:57:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-16 09:57:07 +0000 UTC,
    Amount: (int) 1949
   },
   (string) (len=29) "2024-06-10 11:04:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-10 11:04:25 +0000 UTC,
    Amount: (int) 2137
   },
   (string) (len=29) "2016-04-23 06:34:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-04-23 06:34:17 +0000 UTC,
    Amount: (int) 28
   },
   (string) (len=29) "2021-02-14 14:47:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-14 14:47:51 +0000 UTC,
    Amount: (int) 611
   },
   (string) (len=29) "2021-08-15 13:56:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-15 13:56:28 +0000 UTC,
    Amount: (int) 862
   },
   (string) (len=29) "2022-01-08 11:24:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-08 11:24:38 +0000 UTC,
    Amount: (int) 1055
   },
   (string) (len=29) "2022-01-17 09:07:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-17 09:07:12 +0000 UTC,
    Amount: (int) 1068
   },
   (string) (len=29) "2022-01-17 20:07:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-17 20:07:14 +0000 UTC,
    Amount: (int) 1069
   },
   (string) (len=29) "2019-04-20 21:09:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-04-20 21:09:46 +0000 UTC,
    Amount: (int) 183
   },
   (string) (len=29) "2019-06-16 17:18:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-16 17:18:42 +0000 UTC,
    Amount: (int) 207
   },
   (string) (len=29) "2020-07-15 09:55:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-15 09:55:20 +0000 UTC,
    Amount: (int) 402
   },
   (string) (len=29) "2022-01-03 14:22:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-03 14:22:21 +0000 UTC,
    Amount: (int) 1051
   },
   (string) (len=29) "2022-01-20 13:32:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-20 13:32:54 +0000 UTC,
    Amount: (int) 1073
   },
   (string) (len=29) "2024-06-17 10:55:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 10:55:42 +0000 UTC,
    Amount: (int) 2158
   },
   (string) (len=29) "2022-01-14 12:06:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-14 12:06:36 +0000 UTC,
    Amount: (int) 1065
   },
   (string) (len=29) "2022-06-16 19:06:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-16 19:06:55 +0000 UTC,
    Amount: (int) 1274
   },
   (string) (len=29) "2022-06-21 18:33:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-21 18:33:22 +0000 UTC,
    Amount: (int) 1281
   },
   (string) (len=29) "2023-08-01 21:37:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-01 21:37:28 +0000 UTC,
    Amount: (int) 1737
   },
   (string) (len=29) "2016-02-11 04:03:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-11 04:03:32 +0000 UTC,
    Amount: (int) 5
   },
   (string) (len=29) "2021-02-27 04:21:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-27 04:21:36 +0000 UTC,
    Amount: (int) 619
   },
   (string) (len=29) "2021-08-19 22:42:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-19 22:42:50 +0000 UTC,
    Amount: (int) 866
   },
   (string) (len=29) "2022-01-22 16:36:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-22 16:36:21 +0000 UTC,
    Amount: (int) 1077
   },
   (string) (len=29) "2023-02-20 18:14:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-20 18:14:30 +0000 UTC,
    Amount: (int) 1524
   },
   (string) (len=29) "2023-07-12 23:35:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-12 23:35:23 +0000 UTC,
    Amount: (int) 1713
   },
   (string) (len=29) "2024-06-16 04:49:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 04:49:11 +0000 UTC,
    Amount: (int) 2149
   },
   (string) (len=29) "2020-07-16 02:19:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-16 02:19:30 +0000 UTC,
    Amount: (int) 405
   },
   (string) (len=29) "2020-07-19 15:04:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-19 15:04:34 +0000 UTC,
    Amount: (int) 412
   },
   (string) (len=29) "2022-01-23 23:00:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-23 23:00:28 +0000 UTC,
    Amount: (int) 1080
   },
   (string) (len=29) "2023-02-06 18:15:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-06 18:15:02 +0000 UTC,
    Amount: (int) 1506
   },
   (string) (len=29) "2023-02-15 05:22:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-15 05:22:17 +0000 UTC,
    Amount: (int) 1514
   },
   (string) (len=29) "2024-02-16 19:22:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-16 19:22:25 +0000 UTC,
    Amount: (int) 1950
   },
   (string) (len=29) "2021-02-06 16:06:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-06 16:06:10 +0000 UTC,
    Amount: (int) 604
   },
   (string) (len=29) "2022-01-22 21:12:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-22 21:12:05 +0000 UTC,
    Amount: (int) 1078
   },
   (string) (len=29) "2022-06-20 08:37:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-20 08:37:53 +0000 UTC,
    Amount: (int) 1279
   },
   (string) (len=29) "2023-02-13 00:04:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-13 00:04:20 +0000 UTC,
    Amount: (int) 1510
   },
   (string) (len=29) "2024-02-13 04:29:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-13 04:29:36 +0000 UTC,
    Amount: (int) 1946
   },
   (string) (len=29) "2024-02-05 08:28:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-05 08:28:49 +0000 UTC,
    Amount: (int) 1934
   },
   (string) (len=29) "2024-06-15 03:54:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-15 03:54:39 +0000 UTC,
    Amount: (int) 2146
   },
   (string) (len=29) "2019-05-26 14:58:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-26 14:58:10 +0000 UTC,
    Amount: (int) 199
   },
   (string) (len=29) "2019-06-09 00:28:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-09 00:28:46 +0000 UTC,
    Amount: (int) 204
   },
   (string) (len=29) "2021-02-06 17:39:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-06 17:39:55 +0000 UTC,
    Amount: (int) 605
   },
   (string) (len=29) "2021-08-21 16:19:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-21 16:19:17 +0000 UTC,
    Amount: (int) 868
   },
   (string) (len=29) "2023-02-09 06:14:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-09 06:14:28 +0000 UTC,
    Amount: (int) 1508
   },
   (string) (len=29) "2023-02-14 02:45:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-14 02:45:02 +0000 UTC,
    Amount: (int) 1512
   },
   (string) (len=29) "2024-06-13 23:08:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-13 23:08:31 +0000 UTC,
    Amount: (int) 2143
   },
   (string) (len=29) "2019-04-07 18:11:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-04-07 18:11:23 +0000 UTC,
    Amount: (int) 181
   },
   (string) (len=29) "2021-02-03 10:42:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-03 10:42:19 +0000 UTC,
    Amount: (int) 601
   },
   (string) (len=29) "2021-08-05 11:17:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-05 11:17:56 +0000 UTC,
    Amount: (int) 852
   },
   (string) (len=29) "2022-01-04 07:29:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-04 07:29:06 +0000 UTC,
    Amount: (int) 1052
   },
   (string) (len=29) "2022-01-09 15:55:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-09 15:55:47 +0000 UTC,
    Amount: (int) 1059
   },
   (string) (len=29) "2022-01-22 13:35:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-22 13:35:22 +0000 UTC,
    Amount: (int) 1076
   },
   (string) (len=29) "2016-03-05 17:41:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-05 17:41:41 +0000 UTC,
    Amount: (int) 10
   },
   (string) (len=29) "2020-07-18 18:37:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-18 18:37:56 +0000 UTC,
    Amount: (int) 410
   },
   (string) (len=29) "2023-02-21 16:10:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-21 16:10:34 +0000 UTC,
    Amount: (int) 1526
   },
   (string) (len=29) "2023-07-25 09:45:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-25 09:45:11 +0000 UTC,
    Amount: (int) 1729
   },
   (string) (len=29) "2024-02-05 19:48:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-05 19:48:22 +0000 UTC,
    Amount: (int) 1935
   },
   (string) (len=29) "2019-06-01 18:44:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-01 18:44:18 +0000 UTC,
    Amount: (int) 201
   },
   (string) (len=29) "2020-07-22 22:39:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-22 22:39:38 +0000 UTC,
    Amount: (int) 415
   },
   (string) (len=29) "2022-01-10 21:17:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-10 21:17:36 +0000 UTC,
    Amount: (int) 1060
   },
   (string) (len=29) "2022-06-15 20:06:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-15 20:06:09 +0000 UTC,
    Amount: (int) 1273
   },
   (string) (len=29) "2024-02-11 17:11:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-11 17:11:16 +0000 UTC,
    Amount: (int) 1944
   },
   (string) (len=29) "2021-07-31 01:01:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-31 01:01:24 +0000 UTC,
    Amount: (int) 845
   },
   (string) (len=29) "2023-07-28 02:58:15 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-28 02:58:15 +0000 UTC,
    Amount: (int) 1732
   },
   (string) (len=29) "2024-02-01 19:23:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-01 19:23:32 +0000 UTC,
    Amount: (int) 1930
   },
   (string) (len=29) "2024-02-07 16:23:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 16:23:55 +0000 UTC,
    Amount: (int) 1939
   },
   (string) (len=29) "2016-03-15 20:08:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-15 20:08:44 +0000 UTC,
    Amount: (int) 16
   },
   (string) (len=29) "2019-06-19 06:24:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-19 06:24:44 +0000 UTC,
    Amount: (int) 209
   },
   (string) (len=29) "2021-02-15 01:57:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-15 01:57:25 +0000 UTC,
    Amount: (int) 613
   },
   (string) (len=29) "2021-07-29 13:10:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-29 13:10:45 +0000 UTC,
    Amount: (int) 842
   },
   (string) (len=29) "2023-02-22 02:13:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-22 02:13:55 +0000 UTC,
    Amount: (int) 1527
   },
   (string) (len=29) "2023-07-10 13:44:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-10 13:44:10 +0000 UTC,
    Amount: (int) 1711
   },
   (string) (len=29) "2024-06-16 22:31:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 22:31:35 +0000 UTC,
    Amount: (int) 2155
   },
   (string) (len=29) "2023-07-20 21:14:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-20 21:14:53 +0000 UTC,
    Amount: (int) 1722
   },
   (string) (len=29) "2024-02-03 22:07:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-03 22:07:56 +0000 UTC,
    Amount: (int) 1931
   },
   (string) (len=29) "2019-05-21 23:33:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-21 23:33:08 +0000 UTC,
    Amount: (int) 194
   },
   (string) (len=29) "2020-07-16 00:19:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-16 00:19:17 +0000 UTC,
    Amount: (int) 403
   },
   (string) (len=29) "2020-07-17 17:21:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-17 17:21:02 +0000 UTC,
    Amount: (int) 407
   },
   (string) (len=29) "2021-03-02 17:46:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-02 17:46:03 +0000 UTC,
    Amount: (int) 623
   },
   (string) (len=29) "2021-08-07 19:31:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-07 19:31:56 +0000 UTC,
    Amount: (int) 855
   },
   (string) (len=29) "2022-06-11 17:13:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-11 17:13:31 +0000 UTC,
    Amount: (int) 1264
   },
   (string) (len=29) "2016-02-02 17:42:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-02 17:42:19 +0000 UTC,
    Amount: (int) 3
   },
   (string) (len=29) "2019-05-23 03:24:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-23 03:24:57 +0000 UTC,
    Amount: (int) 198
   },
   (string) (len=29) "2021-07-29 04:03:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-29 04:03:55 +0000 UTC,
    Amount: (int) 841
   },
   (string) (len=29) "2023-02-08 20:36:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-08 20:36:14 +0000 UTC,
    Amount: (int) 1507
   },
   (string) (len=29) "2024-01-28 16:57:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-28 16:57:24 +0000 UTC,
    Amount: (int) 1924
   },
   (string) (len=29) "2024-02-08 17:44:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-08 17:44:57 +0000 UTC,
    Amount: (int) 1941
   },
   (string) (len=29) "2023-07-30 12:51:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-30 12:51:55 +0000 UTC,
    Amount: (int) 1734
   },
   (string) (len=55) "2024-06-17 23:04:30.928194 +0200 CEST m=+1870.234215286": (github.Hist) {
    Date: (time.Time) 2024-06-17 23:04:30.928194 +0200 CEST m=+1870.234215286,
    Amount: (int) 2188
   },
   (string) (len=29) "2016-03-20 11:12:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-20 11:12:52 +0000 UTC,
    Amount: (int) 17
   },
   (string) (len=29) "2016-04-04 15:55:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-04-04 15:55:02 +0000 UTC,
    Amount: (int) 23
   },
   (string) (len=29) "2019-06-12 12:24:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-12 12:24:22 +0000 UTC,
    Amount: (int) 205
   },
   (string) (len=29) "2021-02-04 15:01:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-04 15:01:40 +0000 UTC,
    Amount: (int) 603
   },
   (string) (len=29) "2022-06-25 18:58:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-25 18:58:54 +0000 UTC,
    Amount: (int) 1286
   },
   (string) (len=29) "2023-07-23 00:02:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-23 00:02:59 +0000 UTC,
    Amount: (int) 1723
   },
   (string) (len=29) "2020-07-18 11:08:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-18 11:08:32 +0000 UTC,
    Amount: (int) 408
   },
   (string) (len=29) "2022-01-14 03:29:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-14 03:29:44 +0000 UTC,
    Amount: (int) 1063
   },
   (string) (len=29) "2022-01-20 15:22:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-20 15:22:37 +0000 UTC,
    Amount: (int) 1074
   },
   (string) (len=29) "2023-08-02 08:38:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-02 08:38:04 +0000 UTC,
    Amount: (int) 1738
   },
   (string) (len=29) "2024-06-17 14:06:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 14:06:40 +0000 UTC,
    Amount: (int) 2159
   },
   (string) (len=29) "2016-03-26 21:59:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-26 21:59:45 +0000 UTC,
    Amount: (int) 19
   },
   (string) (len=29) "2019-05-23 00:53:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-23 00:53:05 +0000 UTC,
    Amount: (int) 197
   },
   (string) (len=29) "2019-05-30 17:03:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-30 17:03:34 +0000 UTC,
    Amount: (int) 200
   },
   (string) (len=29) "2021-08-12 22:08:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-12 22:08:43 +0000 UTC,
    Amount: (int) 859
   },
   (string) (len=29) "2022-01-16 00:31:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-16 00:31:44 +0000 UTC,
    Amount: (int) 1066
   },
   (string) (len=29) "2024-06-09 14:31:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-09 14:31:27 +0000 UTC,
    Amount: (int) 2136
   },
   (string) (len=29) "2021-08-15 07:47:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-15 07:47:42 +0000 UTC,
    Amount: (int) 861
   },
   (string) (len=29) "2022-01-11 20:19:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-11 20:19:46 +0000 UTC,
    Amount: (int) 1061
   },
   (string) (len=29) "2022-06-17 19:57:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-17 19:57:29 +0000 UTC,
    Amount: (int) 1276
   },
   (string) (len=29) "2023-02-23 11:05:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-23 11:05:36 +0000 UTC,
    Amount: (int) 1529
   },
   (string) (len=29) "2023-08-03 10:48:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-03 10:48:28 +0000 UTC,
    Amount: (int) 1740
   },
   (string) (len=29) "2016-02-28 17:41:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-28 17:41:08 +0000 UTC,
    Amount: (int) 8
   },
   (string) (len=29) "2019-06-19 03:21:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-19 03:21:10 +0000 UTC,
    Amount: (int) 208
   },
   (string) (len=29) "2020-07-25 23:16:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-25 23:16:26 +0000 UTC,
    Amount: (int) 419
   },
   (string) (len=29) "2021-07-30 03:02:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-30 03:02:08 +0000 UTC,
    Amount: (int) 843
   },
   (string) (len=29) "2023-02-13 14:50:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-13 14:50:32 +0000 UTC,
    Amount: (int) 1511
   },
   (string) (len=29) "2023-02-14 15:00:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-14 15:00:25 +0000 UTC,
    Amount: (int) 1513
   },
   (string) (len=29) "2019-05-22 07:33:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-22 07:33:22 +0000 UTC,
    Amount: (int) 195
   },
   (string) (len=29) "2020-07-18 19:48:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-18 19:48:54 +0000 UTC,
    Amount: (int) 411
   },
   (string) (len=29) "2023-02-05 00:58:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-05 00:58:06 +0000 UTC,
    Amount: (int) 1503
   },
   (string) (len=29) "2023-07-13 19:50:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-13 19:50:40 +0000 UTC,
    Amount: (int) 1714
   },
   (string) (len=29) "2023-07-16 18:59:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-16 18:59:51 +0000 UTC,
    Amount: (int) 1718
   },
   (string) (len=29) "2024-06-13 04:20:11 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-13 04:20:11 +0000 UTC,
    Amount: (int) 2142
   },
   (string) (len=29) "2016-03-30 08:21:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-30 08:21:21 +0000 UTC,
    Amount: (int) 22
   },
   (string) (len=29) "2019-06-13 20:20:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-13 20:20:47 +0000 UTC,
    Amount: (int) 206
   },
   (string) (len=29) "2020-07-06 07:43:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-06 07:43:48 +0000 UTC,
    Amount: (int) 391
   },
   (string) (len=29) "2023-07-15 14:57:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-15 14:57:34 +0000 UTC,
    Amount: (int) 1716
   },
   (string) (len=29) "2016-04-15 22:41:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-04-15 22:41:45 +0000 UTC,
    Amount: (int) 26
   },
   (string) (len=29) "2021-08-23 13:25:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-23 13:25:39 +0000 UTC,
    Amount: (int) 869
   },
   (string) (len=29) "2022-06-12 11:47:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-12 11:47:47 +0000 UTC,
    Amount: (int) 1268
   },
   (string) (len=29) "2022-06-23 22:26:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-23 22:26:05 +0000 UTC,
    Amount: (int) 1283
   },
   (string) (len=29) "2024-02-12 16:24:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-12 16:24:03 +0000 UTC,
    Amount: (int) 1945
   },
   (string) (len=29) "2020-07-07 00:04:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-07 00:04:49 +0000 UTC,
    Amount: (int) 392
   },
   (string) (len=29) "2021-03-01 16:31:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-01 16:31:39 +0000 UTC,
    Amount: (int) 622
   },
   (string) (len=29) "2023-02-20 16:09:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-20 16:09:57 +0000 UTC,
    Amount: (int) 1523
   },
   (string) (len=29) "2023-07-17 20:58:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-17 20:58:36 +0000 UTC,
    Amount: (int) 1719
   },
   (string) (len=29) "2016-03-06 21:01:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-06 21:01:26 +0000 UTC,
    Amount: (int) 11
   },
   (string) (len=29) "2019-04-24 20:41:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-04-24 20:41:43 +0000 UTC,
    Amount: (int) 184
   },
   (string) (len=29) "2020-07-09 18:39:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-09 18:39:34 +0000 UTC,
    Amount: (int) 396
   },
   (string) (len=29) "2020-07-16 08:23:47 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-16 08:23:47 +0000 UTC,
    Amount: (int) 406
   },
   (string) (len=29) "2020-07-24 14:55:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-24 14:55:22 +0000 UTC,
    Amount: (int) 417
   },
   (string) (len=29) "2022-01-18 18:45:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-18 18:45:55 +0000 UTC,
    Amount: (int) 1071
   },
   (string) (len=29) "2024-06-15 16:22:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-15 16:22:29 +0000 UTC,
    Amount: (int) 2148
   },
   (string) (len=29) "2021-08-07 17:41:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-07 17:41:31 +0000 UTC,
    Amount: (int) 854
   },
   (string) (len=29) "2022-06-30 19:44:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-30 19:44:33 +0000 UTC,
    Amount: (int) 1289
   },
   (string) (len=29) "2023-02-19 06:51:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-19 06:51:25 +0000 UTC,
    Amount: (int) 1520
   },
   (string) (len=29) "2023-02-20 02:39:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-20 02:39:52 +0000 UTC,
    Amount: (int) 1521
   },
   (string) (len=29) "2024-02-08 11:00:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-08 11:00:45 +0000 UTC,
    Amount: (int) 1940
   },
   (string) (len=29) "2024-06-09 09:51:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-09 09:51:14 +0000 UTC,
    Amount: (int) 2135
   },
   (string) (len=29) "2019-05-07 04:09:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-07 04:09:38 +0000 UTC,
    Amount: (int) 188
   },
   (string) (len=29) "2019-05-16 14:29:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-16 14:29:08 +0000 UTC,
    Amount: (int) 193
   },
   (string) (len=29) "2021-08-14 13:52:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-14 13:52:10 +0000 UTC,
    Amount: (int) 860
   },
   (string) (len=29) "2023-02-22 09:28:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-22 09:28:53 +0000 UTC,
    Amount: (int) 1528
   },
   (string) (len=29) "2024-01-28 02:20:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-28 02:20:58 +0000 UTC,
    Amount: (int) 1922
   },
   (string) (len=29) "2016-03-08 04:12:19 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-08 04:12:19 +0000 UTC,
    Amount: (int) 13
   },
   (string) (len=29) "2020-07-23 19:23:30 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-23 19:23:30 +0000 UTC,
    Amount: (int) 416
   },
   (string) (len=29) "2021-02-26 01:13:13 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-26 01:13:13 +0000 UTC,
    Amount: (int) 618
   },
   (string) (len=29) "2021-08-19 05:55:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-19 05:55:41 +0000 UTC,
    Amount: (int) 864
   },
   (string) (len=29) "2022-01-23 13:55:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-23 13:55:34 +0000 UTC,
    Amount: (int) 1079
   },
   (string) (len=29) "2022-06-11 18:21:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-11 18:21:18 +0000 UTC,
    Amount: (int) 1265
   },
   (string) (len=29) "2016-04-05 16:12:44 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-04-05 16:12:44 +0000 UTC,
    Amount: (int) 24
   },
   (string) (len=29) "2019-05-16 10:41:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-16 10:41:34 +0000 UTC,
    Amount: (int) 192
   },
   (string) (len=29) "2020-07-12 22:21:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-12 22:21:29 +0000 UTC,
    Amount: (int) 400
   },
   (string) (len=29) "2023-01-30 23:32:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-01-30 23:32:04 +0000 UTC,
    Amount: (int) 1501
   },
   (string) (len=29) "2023-07-14 13:39:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-14 13:39:07 +0000 UTC,
    Amount: (int) 1715
   },
   (string) (len=29) "2024-02-14 16:22:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-14 16:22:34 +0000 UTC,
    Amount: (int) 1948
   },
   (string) (len=29) "2024-02-04 03:01:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-04 03:01:14 +0000 UTC,
    Amount: (int) 1932
   },
   (string) (len=29) "2024-06-12 13:35:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-12 13:35:21 +0000 UTC,
    Amount: (int) 2141
   },
   (string) (len=29) "2016-03-29 03:04:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-29 03:04:27 +0000 UTC,
    Amount: (int) 21
   },
   (string) (len=29) "2016-04-11 03:24:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-04-11 03:24:08 +0000 UTC,
    Amount: (int) 25
   },
   (string) (len=29) "2019-04-25 23:38:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-04-25 23:38:34 +0000 UTC,
    Amount: (int) 185
   },
   (string) (len=29) "2021-08-08 01:06:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-08 01:06:28 +0000 UTC,
    Amount: (int) 857
   },
   (string) (len=29) "2022-06-10 10:12:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-10 10:12:08 +0000 UTC,
    Amount: (int) 1261
   },
   (string) (len=29) "2022-07-02 00:08:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-07-02 00:08:41 +0000 UTC,
    Amount: (int) 1290
   },
   (string) (len=29) "2024-06-16 05:31:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 05:31:23 +0000 UTC,
    Amount: (int) 2150
   },
   (string) (len=29) "2024-06-16 22:03:08 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 22:03:08 +0000 UTC,
    Amount: (int) 2154
   },
   (string) (len=29) "2023-02-06 03:50:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-06 03:50:35 +0000 UTC,
    Amount: (int) 1505
   },
   (string) (len=29) "2020-07-18 16:41:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-18 16:41:28 +0000 UTC,
    Amount: (int) 409
   },
   (string) (len=29) "2021-03-07 11:26:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-07 11:26:27 +0000 UTC,
    Amount: (int) 630
   },
   (string) (len=29) "2022-06-11 21:22:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-11 21:22:02 +0000 UTC,
    Amount: (int) 1267
   },
   (string) (len=29) "2022-06-21 05:52:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-21 05:52:16 +0000 UTC,
    Amount: (int) 1280
   },
   (string) (len=29) "2022-06-24 01:27:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-24 01:27:55 +0000 UTC,
    Amount: (int) 1284
   },
   (string) (len=29) "2023-02-05 22:14:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-05 22:14:41 +0000 UTC,
    Amount: (int) 1504
   },
   (string) (len=29) "2021-03-05 06:33:21 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-05 06:33:21 +0000 UTC,
    Amount: (int) 628
   },
   (string) (len=29) "2024-01-30 11:48:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-30 11:48:33 +0000 UTC,
    Amount: (int) 1926
   },
   (string) (len=29) "2024-06-15 13:56:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-15 13:56:46 +0000 UTC,
    Amount: (int) 2147
   },
   (string) (len=29) "2024-06-17 04:22:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 04:22:03 +0000 UTC,
    Amount: (int) 2157
   },
   (string) (len=29) "2021-08-18 14:26:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-18 14:26:20 +0000 UTC,
    Amount: (int) 863
   },
   (string) (len=29) "2023-07-30 09:55:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-30 09:55:27 +0000 UTC,
    Amount: (int) 1733
   },
   (string) (len=29) "2024-01-26 17:26:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-26 17:26:37 +0000 UTC,
    Amount: (int) 1921
   },
   (string) (len=29) "2016-03-28 18:45:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-28 18:45:23 +0000 UTC,
    Amount: (int) 20
   },
   (string) (len=29) "2020-07-07 19:49:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-07 19:49:59 +0000 UTC,
    Amount: (int) 393
   },
   (string) (len=29) "2020-07-16 00:49:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-16 00:49:56 +0000 UTC,
    Amount: (int) 404
   },
   (string) (len=29) "2022-01-06 21:11:02 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-06 21:11:02 +0000 UTC,
    Amount: (int) 1054
   },
   (string) (len=29) "2022-06-15 18:44:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-15 18:44:17 +0000 UTC,
    Amount: (int) 1272
   },
   (string) (len=29) "2023-02-15 13:01:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-15 13:01:45 +0000 UTC,
    Amount: (int) 1515
   },
   (string) (len=29) "2024-06-03 15:22:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-03 15:22:25 +0000 UTC,
    Amount: (int) 2131
   },
   (string) (len=29) "2024-06-10 11:25:58 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-10 11:25:58 +0000 UTC,
    Amount: (int) 2138
   },
   (string) (len=29) "2020-07-09 04:44:53 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-09 04:44:53 +0000 UTC,
    Amount: (int) 395
   },
   (string) (len=29) "2021-02-19 09:55:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-19 09:55:48 +0000 UTC,
    Amount: (int) 615
   },
   (string) (len=29) "2022-06-13 07:29:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-13 07:29:56 +0000 UTC,
    Amount: (int) 1269
   },
   (string) (len=29) "2023-02-17 15:59:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-17 15:59:27 +0000 UTC,
    Amount: (int) 1518
   },
   (string) (len=29) "2023-07-24 04:58:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-24 04:58:50 +0000 UTC,
    Amount: (int) 1726
   },
   (string) (len=29) "2023-07-26 23:45:24 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-26 23:45:24 +0000 UTC,
    Amount: (int) 1730
   },
   (string) (len=29) "2022-06-24 11:00:18 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-24 11:00:18 +0000 UTC,
    Amount: (int) 1285
   },
   (string) (len=29) "2024-06-12 08:46:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-12 08:46:03 +0000 UTC,
    Amount: (int) 2140
   },
   (string) (len=29) "2024-06-14 18:05:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-14 18:05:36 +0000 UTC,
    Amount: (int) 2145
   },
   (string) (len=29) "2016-03-13 00:39:41 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-13 00:39:41 +0000 UTC,
    Amount: (int) 15
   },
   (string) (len=29) "2019-04-26 17:31:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-04-26 17:31:34 +0000 UTC,
    Amount: (int) 186
   },
   (string) (len=29) "2021-03-04 21:43:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-04 21:43:17 +0000 UTC,
    Amount: (int) 627
   },
   (string) (len=29) "2016-02-29 18:00:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-29 18:00:01 +0000 UTC,
    Amount: (int) 9
   },
   (string) (len=29) "2021-07-30 13:40:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-30 13:40:51 +0000 UTC,
    Amount: (int) 844
   },
   (string) (len=29) "2021-08-03 22:25:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-03 22:25:32 +0000 UTC,
    Amount: (int) 849
   },
   (string) (len=29) "2021-08-05 06:37:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-05 06:37:29 +0000 UTC,
    Amount: (int) 851
   },
   (string) (len=29) "2023-02-11 05:34:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-11 05:34:51 +0000 UTC,
    Amount: (int) 1509
   },
   (string) (len=29) "2024-06-16 23:27:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 23:27:00 +0000 UTC,
    Amount: (int) 2156
   },
   (string) (len=29) "2016-05-02 02:55:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-05-02 02:55:32 +0000 UTC,
    Amount: (int) 29
   },
   (string) (len=29) "2019-04-29 09:39:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-04-29 09:39:03 +0000 UTC,
    Amount: (int) 187
   },
   (string) (len=29) "2019-06-24 17:53:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-24 17:53:55 +0000 UTC,
    Amount: (int) 210
   },
   (string) (len=29) "2021-08-21 07:43:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-21 07:43:49 +0000 UTC,
    Amount: (int) 867
   },
   (string) (len=29) "2022-01-08 15:34:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-08 15:34:54 +0000 UTC,
    Amount: (int) 1058
   },
   (string) (len=29) "2024-02-11 05:23:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-11 05:23:59 +0000 UTC,
    Amount: (int) 1943
   },
   (string) (len=29) "2016-03-07 19:46:07 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-07 19:46:07 +0000 UTC,
    Amount: (int) 12
   },
   (string) (len=29) "2022-06-11 21:21:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-11 21:21:16 +0000 UTC,
    Amount: (int) 1266
   },
   (string) (len=29) "2023-02-17 18:00:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-17 18:00:55 +0000 UTC,
    Amount: (int) 1519
   },
   (string) (len=29) "2023-02-24 17:31:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-24 17:31:50 +0000 UTC,
    Amount: (int) 1530
   },
   (string) (len=29) "2020-07-24 23:07:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-24 23:07:59 +0000 UTC,
    Amount: (int) 418
   },
   (string) (len=29) "2021-02-23 15:27:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-23 15:27:25 +0000 UTC,
    Amount: (int) 616
   },
   (string) (len=29) "2021-02-28 22:51:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-28 22:51:40 +0000 UTC,
    Amount: (int) 621
   },
   (string) (len=29) "2024-01-31 10:29:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-31 10:29:25 +0000 UTC,
    Amount: (int) 1928
   },
   (string) (len=29) "2019-05-13 01:38:43 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-13 01:38:43 +0000 UTC,
    Amount: (int) 190
   },
   (string) (len=29) "2020-07-22 22:32:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-22 22:32:40 +0000 UTC,
    Amount: (int) 414
   },
   (string) (len=29) "2021-02-14 01:16:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-14 01:16:16 +0000 UTC,
    Amount: (int) 610
   },
   (string) (len=29) "2022-06-21 19:06:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-21 19:06:25 +0000 UTC,
    Amount: (int) 1282
   },
   (string) (len=29) "2024-02-04 15:27:01 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-04 15:27:01 +0000 UTC,
    Amount: (int) 1933
   },
   (string) (len=29) "2024-06-16 17:48:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 17:48:59 +0000 UTC,
    Amount: (int) 2153
   },
   (string) (len=29) "2016-02-03 17:53:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-03 17:53:12 +0000 UTC,
    Amount: (int) 4
   },
   (string) (len=29) "2021-02-24 08:47:17 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-24 08:47:17 +0000 UTC,
    Amount: (int) 617
   },
   (string) (len=29) "2021-08-08 09:45:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-08 09:45:04 +0000 UTC,
    Amount: (int) 858
   },
   (string) (len=29) "2022-01-08 12:31:23 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-08 12:31:23 +0000 UTC,
    Amount: (int) 1057
   },
   (string) (len=29) "2022-06-11 13:41:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-11 13:41:54 +0000 UTC,
    Amount: (int) 1263
   },
   (string) (len=29) "2023-07-24 08:55:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-24 08:55:27 +0000 UTC,
    Amount: (int) 1727
   },
   (string) (len=29) "2016-05-12 17:34:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-05-12 17:34:45 +0000 UTC,
    Amount: (int) 30
   },
   (string) (len=29) "2021-08-07 21:55:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-07 21:55:00 +0000 UTC,
    Amount: (int) 856
   },
   (string) (len=29) "2023-07-23 00:26:27 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-23 00:26:27 +0000 UTC,
    Amount: (int) 1724
   },
   (string) (len=29) "2024-01-31 08:59:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-31 08:59:45 +0000 UTC,
    Amount: (int) 1927
   },
   (string) (len=29) "2016-01-29 20:46:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-29 20:46:49 +0000 UTC,
    Amount: (int) 2
   },
   (string) (len=29) "2020-07-10 17:19:06 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-10 17:19:06 +0000 UTC,
    Amount: (int) 397
   },
   (string) (len=29) "2022-06-19 01:17:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-19 01:17:03 +0000 UTC,
    Amount: (int) 1278
   },
   (string) (len=29) "2023-07-27 04:49:34 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-27 04:49:34 +0000 UTC,
    Amount: (int) 1731
   },
   (string) (len=29) "2023-08-03 05:03:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-08-03 05:03:35 +0000 UTC,
    Amount: (int) 1739
   },
   (string) (len=29) "2024-06-06 18:50:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-06 18:50:42 +0000 UTC,
    Amount: (int) 2132
   },
   (string) (len=29) "2020-07-19 20:47:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-19 20:47:46 +0000 UTC,
    Amount: (int) 413
   },
   (string) (len=29) "2021-02-13 23:08:37 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-13 23:08:37 +0000 UTC,
    Amount: (int) 609
   },
   (string) (len=29) "2022-01-08 12:20:03 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-08 12:20:03 +0000 UTC,
    Amount: (int) 1056
   },
   (string) (len=29) "2022-06-17 12:56:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-17 12:56:51 +0000 UTC,
    Amount: (int) 1275
   },
   (string) (len=29) "2020-07-08 06:54:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-08 06:54:09 +0000 UTC,
    Amount: (int) 394
   },
   (string) (len=29) "2024-06-08 15:27:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-08 15:27:16 +0000 UTC,
    Amount: (int) 2133
   },
   (string) (len=29) "2020-07-14 01:49:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-14 01:49:26 +0000 UTC,
    Amount: (int) 401
   },
   (string) (len=29) "2021-08-26 18:19:04 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-26 18:19:04 +0000 UTC,
    Amount: (int) 870
   },
   (string) (len=29) "2022-01-18 07:44:33 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-18 07:44:33 +0000 UTC,
    Amount: (int) 1070
   },
   (string) (len=29) "2024-02-07 13:58:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 13:58:09 +0000 UTC,
    Amount: (int) 1938
   },
   (string) (len=29) "2024-06-14 00:50:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-14 00:50:51 +0000 UTC,
    Amount: (int) 2144
   },
   (string) (len=29) "2019-05-22 20:00:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-22 20:00:46 +0000 UTC,
    Amount: (int) 196
   },
   (string) (len=29) "2021-02-03 18:03:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-03 18:03:50 +0000 UTC,
    Amount: (int) 602
   },
   (string) (len=29) "2021-07-31 12:16:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-07-31 12:16:16 +0000 UTC,
    Amount: (int) 846
   },
   (string) (len=29) "2021-08-06 16:23:09 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-06 16:23:09 +0000 UTC,
    Amount: (int) 853
   },
   (string) (len=29) "2022-01-05 17:24:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-05 17:24:14 +0000 UTC,
    Amount: (int) 1053
   },
   (string) (len=29) "2024-01-28 09:48:45 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-01-28 09:48:45 +0000 UTC,
    Amount: (int) 1923
   },
   (string) (len=29) "2024-02-07 07:55:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 07:55:46 +0000 UTC,
    Amount: (int) 1937
   },
   (string) (len=29) "2016-01-26 06:20:00 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-01-26 06:20:00 +0000 UTC,
    Amount: (int) 1
   },
   (string) (len=29) "2016-03-12 16:58:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-03-12 16:58:22 +0000 UTC,
    Amount: (int) 14
   },
   (string) (len=29) "2021-08-01 17:30:52 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-01 17:30:52 +0000 UTC,
    Amount: (int) 847
   },
   (string) (len=29) "2022-01-14 08:02:59 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-14 08:02:59 +0000 UTC,
    Amount: (int) 1064
   },
   (string) (len=29) "2022-01-16 04:49:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-16 04:49:42 +0000 UTC,
    Amount: (int) 1067
   },
   (string) (len=29) "2022-06-29 08:53:28 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-29 08:53:28 +0000 UTC,
    Amount: (int) 1288
   },
   (string) (len=29) "2019-06-01 21:08:51 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-06-01 21:08:51 +0000 UTC,
    Amount: (int) 202
   },
   (string) (len=29) "2021-03-02 19:05:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-02 19:05:50 +0000 UTC,
    Amount: (int) 624
   },
   (string) (len=29) "2023-02-20 16:04:49 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-20 16:04:49 +0000 UTC,
    Amount: (int) 1522
   },
   (string) (len=29) "2024-06-08 16:16:14 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-08 16:16:14 +0000 UTC,
    Amount: (int) 2134
   },
   (string) (len=29) "2021-03-03 23:01:56 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-03 23:01:56 +0000 UTC,
    Amount: (int) 626
   },
   (string) (len=29) "2023-07-19 18:09:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-19 18:09:12 +0000 UTC,
    Amount: (int) 1721
   },
   (string) (len=29) "2024-06-11 04:23:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-11 04:23:25 +0000 UTC,
    Amount: (int) 2139
   },
   (string) (len=29) "2021-02-07 12:09:55 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-07 12:09:55 +0000 UTC,
    Amount: (int) 606
   },
   (string) (len=29) "2023-07-31 02:00:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-31 02:00:20 +0000 UTC,
    Amount: (int) 1735
   },
   (string) (len=29) "2023-07-31 15:54:16 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-31 15:54:16 +0000 UTC,
    Amount: (int) 1736
   },
   (string) (len=29) "2024-02-07 01:20:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-07 01:20:22 +0000 UTC,
    Amount: (int) 1936
   },
   (string) (len=29) "2024-02-09 10:13:42 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-09 10:13:42 +0000 UTC,
    Amount: (int) 1942
   },
   (string) (len=29) "2016-04-20 14:31:22 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-04-20 14:31:22 +0000 UTC,
    Amount: (int) 27
   },
   (string) (len=29) "2020-07-26 10:24:10 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-26 10:24:10 +0000 UTC,
    Amount: (int) 420
   },
   (string) (len=29) "2021-02-13 19:48:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-13 19:48:38 +0000 UTC,
    Amount: (int) 608
   },
   (string) (len=29) "2021-03-06 23:23:48 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-03-06 23:23:48 +0000 UTC,
    Amount: (int) 629
   },
   (string) (len=29) "2023-07-16 16:23:29 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-16 16:23:29 +0000 UTC,
    Amount: (int) 1717
   },
   (string) (len=29) "2024-02-01 12:56:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-01 12:56:26 +0000 UTC,
    Amount: (int) 1929
   },
   (string) (len=29) "2024-06-17 18:45:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-17 18:45:20 +0000 UTC,
    Amount: (int) 2160
   },
   (string) (len=29) "2023-02-20 23:01:36 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-20 23:01:36 +0000 UTC,
    Amount: (int) 1525
   },
   (string) (len=29) "2016-02-20 04:28:31 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-20 04:28:31 +0000 UTC,
    Amount: (int) 6
   },
   (string) (len=29) "2020-07-11 20:50:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2020-07-11 20:50:25 +0000 UTC,
    Amount: (int) 399
   },
   (string) (len=29) "2022-06-14 23:28:35 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-06-14 23:28:35 +0000 UTC,
    Amount: (int) 1271
   },
   (string) (len=29) "2023-07-24 17:56:40 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-24 17:56:40 +0000 UTC,
    Amount: (int) 1728
   },
   (string) (len=29) "2024-02-14 05:13:54 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-02-14 05:13:54 +0000 UTC,
    Amount: (int) 1947
   },
   (string) (len=29) "2024-06-16 15:55:57 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2024-06-16 15:55:57 +0000 UTC,
    Amount: (int) 2152
   },
   (string) (len=29) "2016-02-20 05:44:12 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2016-02-20 05:44:12 +0000 UTC,
    Amount: (int) 7
   },
   (string) (len=29) "2021-08-19 14:37:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-19 14:37:25 +0000 UTC,
    Amount: (int) 865
   },
   (string) (len=29) "2022-01-19 20:30:39 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-19 20:30:39 +0000 UTC,
    Amount: (int) 1072
   },
   (string) (len=29) "2021-08-04 17:27:50 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-08-04 17:27:50 +0000 UTC,
    Amount: (int) 850
   },
   (string) (len=29) "2022-01-13 01:50:32 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2022-01-13 01:50:32 +0000 UTC,
    Amount: (int) 1062
   },
   (string) (len=29) "2023-02-02 14:56:38 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-02 14:56:38 +0000 UTC,
    Amount: (int) 1502
   },
   (string) (len=29) "2023-02-16 18:50:05 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-02-16 18:50:05 +0000 UTC,
    Amount: (int) 1516
   },
   (string) (len=29) "2023-07-18 02:46:20 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2023-07-18 02:46:20 +0000 UTC,
    Amount: (int) 1720
   },
   (string) (len=29) "2019-05-09 21:05:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2019-05-09 21:05:46 +0000 UTC,
    Amount: (int) 189
   },
   (string) (len=29) "2021-02-11 02:42:25 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-11 02:42:25 +0000 UTC,
    Amount: (int) 607
   },
   (string) (len=29) "2021-02-14 23:03:26 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-14 23:03:26 +0000 UTC,
    Amount: (int) 612
   },
   (string) (len=29) "2021-02-27 21:37:46 +0000 UTC": (github.Hist) {
    Date: (time.Time) 2021-02-27 21:37:46 +0000 UTC,
    Amount: (int) 620
   }
  })
 },
 ScrapingbotData: (data.ScrapingbotData) {
  LinkedinCompaniesPtr: (*[]linkedin.LinkedinCompany)(<nil>),
  LinkedinProfilesPtr: (*[]linkedin.LinkedinProfile)(<nil>)
 },
 AlgoliaData: (data.AlgoliaData) {
  Query: (string) (len=5) "Paper",
  HackernewsStoriesPtr: (*hackernews.HackernewsStoriesResponse)(0xc0000d0370)({
   Exhaustive: (struct { NbHits bool "json:\"nbHits\""; Typo bool "json:\"typo\"" }) {
    NbHits: (bool) false,
    Typo: (bool) false
   },
   ExhaustiveNbHits: (bool) false,
   ExhaustiveTypo: (bool) false,
   Hits: ([]struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) (len=20 cap=32) {
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=5) "asadm"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=55) "Daylight Computer – New 60fps e-<em>paper</em> tablet"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=36) "https://daylightcomputer.com/product"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=12) "author_asadm",
      (string) (len=14) "story_40456834"
     },
     Author: (string) (len=5) "asadm",
     Children: ([]int) (len=169 cap=256) {
      (int) 40456857,
      (int) 40456913,
      (int) 40456960,
      (int) 40456962,
      (int) 40456988,
      (int) 40457087,
      (int) 40457140,
      (int) 40457156,
      (int) 40457245,
      (int) 40457426,
      (int) 40457491,
      (int) 40457795,
      (int) 40457957,
      (int) 40458724,
      (int) 40458755,
      (int) 40459487,
      (int) 40459505,
      (int) 40459567,
      (int) 40459651,
      (int) 40459742,
      (int) 40459762,
      (int) 40459779,
      (int) 40459784,
      (int) 40459804,
      (int) 40459867,
      (int) 40459871,
      (int) 40459881,
      (int) 40459918,
      (int) 40459986,
      (int) 40459993,
      (int) 40460071,
      (int) 40460087,
      (int) 40460162,
      (int) 40460180,
      (int) 40460200,
      (int) 40460209,
      (int) 40460286,
      (int) 40460349,
      (int) 40460393,
      (int) 40460412,
      (int) 40460434,
      (int) 40460451,
      (int) 40460541,
      (int) 40460591,
      (int) 40460600,
      (int) 40460606,
      (int) 40460651,
      (int) 40460723,
      (int) 40460724,
      (int) 40460731,
      (int) 40460740,
      (int) 40460807,
      (int) 40460825,
      (int) 40460830,
      (int) 40460915,
      (int) 40460919,
      (int) 40460941,
      (int) 40460980,
      (int) 40461000,
      (int) 40461004,
      (int) 40461069,
      (int) 40461089,
      (int) 40461124,
      (int) 40461137,
      (int) 40461146,
      (int) 40461211,
      (int) 40461242,
      (int) 40461259,
      (int) 40461314,
      (int) 40461396,
      (int) 40461423,
      (int) 40461476,
      (int) 40461481,
      (int) 40461491,
      (int) 40461496,
      (int) 40461587,
      (int) 40461715,
      (int) 40461829,
      (int) 40461837,
      (int) 40461908,
      (int) 40462122,
      (int) 40462158,
      (int) 40462168,
      (int) 40462171,
      (int) 40462230,
      (int) 40462252,
      (int) 40462253,
      (int) 40462300,
      (int) 40462320,
      (int) 40462322,
      (int) 40462335,
      (int) 40462395,
      (int) 40462409,
      (int) 40462524,
      (int) 40462532,
      (int) 40462593,
      (int) 40462662,
      (int) 40462693,
      (int) 40462705,
      (int) 40462722,
      (int) 40462735,
      (int) 40462791,
      (int) 40462853,
      (int) 40462875,
      (int) 40462897,
      (int) 40462948,
      (int) 40463120,
      (int) 40463187,
      (int) 40463202,
      (int) 40463220,
      (int) 40463260,
      (int) 40463304,
      (int) 40463311,
      (int) 40463380,
      (int) 40463542,
      (int) 40463586,
      (int) 40463593,
      (int) 40463627,
      (int) 40463634,
      (int) 40463691,
      (int) 40463798,
      (int) 40463809,
      (int) 40463815,
      (int) 40463895,
      (int) 40463908,
      (int) 40463917,
      (int) 40464358,
      (int) 40464393,
      (int) 40464428,
      (int) 40464440,
      (int) 40464687,
      (int) 40464933,
      (int) 40465046,
      (int) 40465113,
      (int) 40465170,
      (int) 40465188,
      (int) 40465315,
      (int) 40465367,
      (int) 40465955,
      (int) 40466414,
      (int) 40466501,
      (int) 40466694,
      (int) 40466695,
      (int) 40466752,
      (int) 40466767,
      (int) 40466793,
      (int) 40466833,
      (int) 40466910,
      (int) 40466928,
      (int) 40466968,
      (int) 40467009,
      (int) 40467107,
      (int) 40467290,
      (int) 40467533,
      (int) 40467663,
      (int) 40467824,
      (int) 40468041,
      (int) 40468104,
      (int) 40468300,
      (int) 40468328,
      (int) 40468522,
      (int) 40469388,
      (int) 40470273,
      (int) 40472471,
      (int) 40473878,
      (int) 40476078,
      (int) 40479266,
      (int) 40496518,
      (int) 40519636
     },
     CreatedAt: (time.Time) 2024-05-23 16:38:25 +0000 UTC,
     CreatedAtI: (int) 1716482305,
     NumComments: (int) 858,
     ObjectID: (string) (len=8) "40456834",
     Points: (int) 2230,
     StoryID: (int) 40456834,
     Title: (string) (len=46) "Daylight Computer – New 60fps e-paper tablet",
     UpdatedAt: (time.Time) 2024-06-16 07:51:15 +0000 UTC,
     URL: (string) (len=36) "https://daylightcomputer.com/product"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=11) "wilsonfiifi"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=31) "<em>Paper</em> Airplane Designs"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=25) "https://www.foldnfly.com/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=18) "author_wilsonfiifi",
      (string) (len=14) "story_18249755"
     },
     Author: (string) (len=11) "wilsonfiifi",
     Children: ([]int) (len=55 cap=64) {
      (int) 18249813,
      (int) 18249945,
      (int) 18249968,
      (int) 18249995,
      (int) 18250036,
      (int) 18250058,
      (int) 18250068,
      (int) 18250113,
      (int) 18250180,
      (int) 18250188,
      (int) 18250237,
      (int) 18250277,
      (int) 18250302,
      (int) 18250309,
      (int) 18250426,
      (int) 18250475,
      (int) 18250517,
      (int) 18250593,
      (int) 18250594,
      (int) 18250614,
      (int) 18250616,
      (int) 18250961,
      (int) 18251146,
      (int) 18251286,
      (int) 18251300,
      (int) 18251363,
      (int) 18251365,
      (int) 18251702,
      (int) 18251723,
      (int) 18251771,
      (int) 18251815,
      (int) 18251881,
      (int) 18251940,
      (int) 18252018,
      (int) 18252104,
      (int) 18252181,
      (int) 18252588,
      (int) 18252645,
      (int) 18252714,
      (int) 18252738,
      (int) 18252769,
      (int) 18252849,
      (int) 18252895,
      (int) 18253051,
      (int) 18253066,
      (int) 18253785,
      (int) 18253892,
      (int) 18254372,
      (int) 18254771,
      (int) 18254786,
      (int) 18256553,
      (int) 18256591,
      (int) 18256711,
      (int) 18259367,
      (int) 18274757
     },
     CreatedAt: (time.Time) 2018-10-18 16:34:52 +0000 UTC,
     CreatedAtI: (int) 1539880492,
     NumComments: (int) 206,
     ObjectID: (string) (len=8) "18249755",
     Points: (int) 1753,
     StoryID: (int) 18249755,
     Title: (string) (len=22) "Paper Airplane Designs",
     UpdatedAt: (time.Time) 2024-04-19 17:07:38 +0000 UTC,
     URL: (string) (len=25) "https://www.foldnfly.com/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=12) "tinyprojects"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=43) "I started a <em>paper</em> website business"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=53) "https://daily.tinyprojects.dev/<em>paper</em>_website"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=19) "author_tinyprojects",
      (string) (len=14) "story_29550812"
     },
     Author: (string) (len=12) "tinyprojects",
     Children: ([]int) (len=83 cap=128) {
      (int) 29552432,
      (int) 29552510,
      (int) 29552568,
      (int) 29552579,
      (int) 29552584,
      (int) 29552587,
      (int) 29552596,
      (int) 29552609,
      (int) 29552669,
      (int) 29552718,
      (int) 29552728,
      (int) 29552746,
      (int) 29552749,
      (int) 29552778,
      (int) 29552795,
      (int) 29552822,
      (int) 29552889,
      (int) 29552942,
      (int) 29552983,
      (int) 29553020,
      (int) 29553040,
      (int) 29553046,
      (int) 29553234,
      (int) 29553343,
      (int) 29553411,
      (int) 29553496,
      (int) 29553511,
      (int) 29553541,
      (int) 29553566,
      (int) 29553692,
      (int) 29554029,
      (int) 29554109,
      (int) 29554433,
      (int) 29554448,
      (int) 29554596,
      (int) 29554812,
      (int) 29554936,
      (int) 29555009,
      (int) 29555022,
      (int) 29555042,
      (int) 29555073,
      (int) 29555074,
      (int) 29555114,
      (int) 29555126,
      (int) 29555189,
      (int) 29555303,
      (int) 29555415,
      (int) 29555512,
      (int) 29555600,
      (int) 29555790,
      (int) 29555809,
      (int) 29555815,
      (int) 29555881,
      (int) 29556038,
      (int) 29556652,
      (int) 29556787,
      (int) 29556914,
      (int) 29557193,
      (int) 29557199,
      (int) 29557432,
      (int) 29557622,
      (int) 29558167,
      (int) 29558280,
      (int) 29558325,
      (int) 29558490,
      (int) 29558748,
      (int) 29558779,
      (int) 29559195,
      (int) 29559242,
      (int) 29559300,
      (int) 29559329,
      (int) 29561110,
      (int) 29561297,
      (int) 29561420,
      (int) 29561471,
      (int) 29561665,
      (int) 29563197,
      (int) 29563817,
      (int) 29564258,
      (int) 29564878,
      (int) 29566174,
      (int) 29566248,
      (int) 29577456
     },
     CreatedAt: (time.Time) 2021-12-14 12:17:18 +0000 UTC,
     CreatedAtI: (int) 1639484238,
     NumComments: (int) 257,
     ObjectID: (string) (len=8) "29550812",
     Points: (int) 1511,
     StoryID: (int) 29550812,
     Title: (string) (len=34) "I started a paper website business",
     UpdatedAt: (time.Time) 2023-09-07 10:03:06 +0000 UTC,
     URL: (string) (len=44) "https://daily.tinyprojects.dev/paper_website"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=7) "dralley"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=84) "Stanford president resigns over manipulated research, will retract 3 <em>paper</em>s"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=130) "https://stanforddaily.com/2023/07/19/stanford-president-resigns-over-manipulated-research-will-retract-at-least-3-<em>paper</em>s/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=14) "author_dralley",
      (string) (len=14) "story_36790301"
     },
     Author: (string) (len=7) "dralley",
     Children: ([]int) (len=93 cap=128) {
      (int) 36790637,
      (int) 36790646,
      (int) 36790658,
      (int) 36790678,
      (int) 36790711,
      (int) 36790719,
      (int) 36790736,
      (int) 36790741,
      (int) 36790747,
      (int) 36790761,
      (int) 36790762,
      (int) 36790764,
      (int) 36790790,
      (int) 36790792,
      (int) 36790793,
      (int) 36790797,
      (int) 36790800,
      (int) 36790817,
      (int) 36790868,
      (int) 36790905,
      (int) 36790906,
      (int) 36790931,
      (int) 36790964,
      (int) 36791020,
      (int) 36791102,
      (int) 36791144,
      (int) 36791150,
      (int) 36791224,
      (int) 36791460,
      (int) 36791577,
      (int) 36791605,
      (int) 36791607,
      (int) 36791618,
      (int) 36791669,
      (int) 36791756,
      (int) 36791869,
      (int) 36791890,
      (int) 36791963,
      (int) 36791972,
      (int) 36792021,
      (int) 36792240,
      (int) 36792244,
      (int) 36792310,
      (int) 36792403,
      (int) 36792537,
      (int) 36792543,
      (int) 36792717,
      (int) 36793033,
      (int) 36793178,
      (int) 36793318,
      (int) 36793333,
      (int) 36793416,
      (int) 36793500,
      (int) 36793660,
      (int) 36793701,
      (int) 36793816,
      (int) 36793932,
      (int) 36794179,
      (int) 36794484,
      (int) 36794504,
      (int) 36794549,
      (int) 36794822,
      (int) 36794877,
      (int) 36795151,
      (int) 36795243,
      (int) 36795276,
      (int) 36795309,
      (int) 36795551,
      (int) 36795660,
      (int) 36795663,
      (int) 36795697,
      (int) 36795937,
      (int) 36796020,
      (int) 36796480,
      (int) 36796665,
      (int) 36796707,
      (int) 36797264,
      (int) 36798219,
      (int) 36798244,
      (int) 36798349,
      (int) 36798735,
      (int) 36798767,
      (int) 36799153,
      (int) 36799185,
      (int) 36799384,
      (int) 36799775,
      (int) 36799981,
      (int) 36801174,
      (int) 36802809,
      (int) 36802896,
      (int) 36804449,
      (int) 36807911,
      (int) 36825700
     },
     CreatedAt: (time.Time) 2023-07-19 17:43:19 +0000 UTC,
     CreatedAtI: (int) 1689788599,
     NumComments: (int) 777,
     ObjectID: (string) (len=8) "36790301",
     Points: (int) 1507,
     StoryID: (int) 36790301,
     Title: (string) (len=75) "Stanford president resigns over manipulated research, will retract 3 papers",
     UpdatedAt: (time.Time) 2024-06-14 19:23:41 +0000 UTC,
     URL: (string) (len=121) "https://stanforddaily.com/2023/07/19/stanford-president-resigns-over-manipulated-research-will-retract-at-least-3-papers/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=8) "punnerud"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=68) "ReMarkable 2.0 – A digital notebook that feels like <em>paper</em>"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=35) "https://remarkable.com/#What_Is_New"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=15) "author_punnerud",
      (string) (len=14) "story_24295443"
     },
     Author: (string) (len=8) "punnerud",
     Children: ([]int) (len=169 cap=256) {
      (int) 24295673,
      (int) 24295740,
      (int) 24295769,
      (int) 24295799,
      (int) 24295820,
      (int) 24295827,
      (int) 24295839,
      (int) 24295857,
      (int) 24295867,
      (int) 24295884,
      (int) 24295887,
      (int) 24295889,
      (int) 24295905,
      (int) 24295948,
      (int) 24295954,
      (int) 24295971,
      (int) 24295986,
      (int) 24296027,
      (int) 24296030,
      (int) 24296048,
      (int) 24296096,
      (int) 24296123,
      (int) 24296140,
      (int) 24296169,
      (int) 24296170,
      (int) 24296179,
      (int) 24296190,
      (int) 24296207,
      (int) 24296217,
      (int) 24296272,
      (int) 24296301,
      (int) 24296341,
      (int) 24296343,
      (int) 24296356,
      (int) 24296391,
      (int) 24296407,
      (int) 24296432,
      (int) 24296464,
      (int) 24296490,
      (int) 24296511,
      (int) 24296562,
      (int) 24296608,
      (int) 24296609,
      (int) 24296622,
      (int) 24296661,
      (int) 24296674,
      (int) 24296701,
      (int) 24296738,
      (int) 24296741,
      (int) 24296782,
      (int) 24296803,
      (int) 24296828,
      (int) 24296899,
      (int) 24296925,
      (int) 24296955,
      (int) 24296961,
      (int) 24297014,
      (int) 24297022,
      (int) 24297042,
      (int) 24297089,
      (int) 24297158,
      (int) 24297163,
      (int) 24297178,
      (int) 24297189,
      (int) 24297209,
      (int) 24297214,
      (int) 24297282,
      (int) 24297322,
      (int) 24297389,
      (int) 24297409,
      (int) 24297446,
      (int) 24297461,
      (int) 24297472,
      (int) 24297509,
      (int) 24297528,
      (int) 24297530,
      (int) 24297575,
      (int) 24297596,
      (int) 24297608,
      (int) 24297634,
      (int) 24297637,
      (int) 24297670,
      (int) 24297682,
      (int) 24297782,
      (int) 24297836,
      (int) 24297837,
      (int) 24297876,
      (int) 24297897,
      (int) 24297923,
      (int) 24297924,
      (int) 24297940,
      (int) 24298058,
      (int) 24298080,
      (int) 24298101,
      (int) 24298239,
      (int) 24298253,
      (int) 24298267,
      (int) 24298287,
      (int) 24298300,
      (int) 24298344,
      (int) 24298374,
      (int) 24298447,
      (int) 24298462,
      (int) 24298522,
      (int) 24298531,
      (int) 24298549,
      (int) 24298576,
      (int) 24298608,
      (int) 24298673,
      (int) 24298693,
      (int) 24298717,
      (int) 24298849,
      (int) 24299017,
      (int) 24299177,
      (int) 24299272,
      (int) 24299310,
      (int) 24299342,
      (int) 24299415,
      (int) 24299418,
      (int) 24299517,
      (int) 24299723,
      (int) 24299806,
      (int) 24299872,
      (int) 24299906,
      (int) 24299976,
      (int) 24300047,
      (int) 24300118,
      (int) 24300175,
      (int) 24300177,
      (int) 24300191,
      (int) 24300410,
      (int) 24300451,
      (int) 24300760,
      (int) 24300903,
      (int) 24300997,
      (int) 24301361,
      (int) 24301400,
      (int) 24301408,
      (int) 24301463,
      (int) 24301569,
      (int) 24301595,
      (int) 24301648,
      (int) 24301723,
      (int) 24301780,
      (int) 24301854,
      (int) 24301934,
      (int) 24301958,
      (int) 24302023,
      (int) 24302151,
      (int) 24302254,
      (int) 24302292,
      (int) 24302320,
      (int) 24302330,
      (int) 24302356,
      (int) 24302451,
      (int) 24302643,
      (int) 24302744,
      (int) 24302785,
      (int) 24303014,
      (int) 24303215,
      (int) 24303370,
      (int) 24303487,
      (int) 24304089,
      (int) 24305636,
      (int) 24315402,
      (int) 24315811,
      (int) 24316723,
      (int) 24321494,
      (int) 24337282
     },
     CreatedAt: (time.Time) 2020-08-27 16:38:03 +0000 UTC,
     CreatedAtI: (int) 1598546283,
     NumComments: (int) 685,
     ObjectID: (string) (len=8) "24295443",
     Points: (int) 1410,
     StoryID: (int) 24295443,
     Title: (string) (len=59) "ReMarkable 2.0 – A digital notebook that feels like paper",
     UpdatedAt: (time.Time) 2024-04-11 13:32:49 +0000 UTC,
     URL: (string) (len=35) "https://remarkable.com/#What_Is_New"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=6) "G5ANDY"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=71) "Panama <em>Paper</em>s: Mossack Fonseca leak reveals elite's tax havens"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=38) "http://www.bbc.com/news/world-35918844"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=13) "author_G5ANDY",
      (string) (len=14) "story_11416928"
     },
     Author: (string) (len=6) "G5ANDY",
     Children: ([]int) (len=52 cap=64) {
      (int) 11417005,
      (int) 11417015,
      (int) 11417070,
      (int) 11417074,
      (int) 11417092,
      (int) 11417093,
      (int) 11417099,
      (int) 11417107,
      (int) 11417127,
      (int) 11417168,
      (int) 11417169,
      (int) 11417178,
      (int) 11417189,
      (int) 11417212,
      (int) 11417213,
      (int) 11417242,
      (int) 11417249,
      (int) 11417373,
      (int) 11417380,
      (int) 11417486,
      (int) 11417519,
      (int) 11417673,
      (int) 11417710,
      (int) 11417751,
      (int) 11417844,
      (int) 11417956,
      (int) 11417970,
      (int) 11417976,
      (int) 11418062,
      (int) 11418273,
      (int) 11418292,
      (int) 11418303,
      (int) 11418333,
      (int) 11418567,
      (int) 11418617,
      (int) 11418823,
      (int) 11418935,
      (int) 11418997,
      (int) 11419032,
      (int) 11419161,
      (int) 11419400,
      (int) 11419449,
      (int) 11419455,
      (int) 11419731,
      (int) 11419803,
      (int) 11419830,
      (int) 11420093,
      (int) 11420338,
      (int) 11420447,
      (int) 11421049,
      (int) 11421548,
      (int) 11436342
     },
     CreatedAt: (time.Time) 2016-04-03 17:56:46 +0000 UTC,
     CreatedAtI: (int) 1459706206,
     NumComments: (int) 435,
     ObjectID: (string) (len=8) "11416928",
     Points: (int) 1373,
     StoryID: (int) 11416928,
     Title: (string) (len=62) "Panama Papers: Mossack Fonseca leak reveals elite's tax havens",
     UpdatedAt: (time.Time) 2024-04-15 02:01:18 +0000 UTC,
     URL: (string) (len=38) "http://www.bbc.com/news/world-35918844"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=9) "pseudolus"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=88) "Pandora <em>paper</em>s: biggest leak of offshore data exposes financial secrets of rich"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=150) "https://www.theguardian.com/news/2021/oct/03/pandora-<em>paper</em>s-biggest-ever-leak-of-offshore-data-exposes-financial-secrets-of-rich-and-powerful"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=16) "author_pseudolus",
      (string) (len=14) "story_28738407"
     },
     Author: (string) (len=9) "pseudolus",
     Children: ([]int) (len=81 cap=128) {
      (int) 28738505,
      (int) 28738588,
      (int) 28738599,
      (int) 28738641,
      (int) 28738727,
      (int) 28738768,
      (int) 28738772,
      (int) 28738795,
      (int) 28738876,
      (int) 28738884,
      (int) 28738918,
      (int) 28738934,
      (int) 28738937,
      (int) 28738940,
      (int) 28738960,
      (int) 28738964,
      (int) 28738966,
      (int) 28738967,
      (int) 28738980,
      (int) 28739012,
      (int) 28739034,
      (int) 28739045,
      (int) 28739050,
      (int) 28739092,
      (int) 28739107,
      (int) 28739115,
      (int) 28739122,
      (int) 28739158,
      (int) 28739177,
      (int) 28739202,
      (int) 28739205,
      (int) 28739308,
      (int) 28739313,
      (int) 28739314,
      (int) 28739321,
      (int) 28739342,
      (int) 28739409,
      (int) 28739433,
      (int) 28739487,
      (int) 28739492,
      (int) 28739503,
      (int) 28739629,
      (int) 28739814,
      (int) 28739884,
      (int) 28739941,
      (int) 28739994,
      (int) 28740054,
      (int) 28740072,
      (int) 28740080,
      (int) 28740085,
      (int) 28740180,
      (int) 28740265,
      (int) 28740288,
      (int) 28740376,
      (int) 28740471,
      (int) 28740492,
      (int) 28740537,
      (int) 28740646,
      (int) 28740652,
      (int) 28740676,
      (int) 28740774,
      (int) 28741590,
      (int) 28741594,
      (int) 28741603,
      (int) 28741665,
      (int) 28741778,
      (int) 28742099,
      (int) 28742329,
      (int) 28742594,
      (int) 28742618,
      (int) 28743492,
      (int) 28743494,
      (int) 28743700,
      (int) 28744335,
      (int) 28744462,
      (int) 28744595,
      (int) 28744653,
      (int) 28747056,
      (int) 28759421,
      (int) 28774217,
      (int) 28786929
     },
     CreatedAt: (time.Time) 2021-10-03 16:35:17 +0000 UTC,
     CreatedAtI: (int) 1633278917,
     NumComments: (int) 594,
     ObjectID: (string) (len=8) "28738407",
     Points: (int) 1312,
     StoryID: (int) 28738407,
     Title: (string) (len=79) "Pandora papers: biggest leak of offshore data exposes financial secrets of rich",
     UpdatedAt: (time.Time) 2024-02-13 12:49:39 +0000 UTC,
     URL: (string) (len=141) "https://www.theguardian.com/news/2021/oct/03/pandora-papers-biggest-ever-leak-of-offshore-data-exposes-financial-secrets-of-rich-and-powerful"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=6) "nycpig"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=46) "Cramming '<em>Paper</em>s, Please' onto Phones"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=57) "https://dukope.com/devlogs/<em>paper</em>s-please/mobile/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=13) "author_nycpig",
      (string) (len=14) "story_32371423"
     },
     Author: (string) (len=6) "nycpig",
     Children: ([]int) (len=37 cap=64) {
      (int) 32371659,
      (int) 32371666,
      (int) 32371683,
      (int) 32371694,
      (int) 32371710,
      (int) 32371723,
      (int) 32371767,
      (int) 32371796,
      (int) 32371802,
      (int) 32371805,
      (int) 32371863,
      (int) 32371901,
      (int) 32372048,
      (int) 32372143,
      (int) 32372156,
      (int) 32372216,
      (int) 32372296,
      (int) 32372410,
      (int) 32372580,
      (int) 32372621,
      (int) 32372633,
      (int) 32372701,
      (int) 32372951,
      (int) 32373030,
      (int) 32373355,
      (int) 32373433,
      (int) 32373436,
      (int) 32373700,
      (int) 32374487,
      (int) 32374528,
      (int) 32374942,
      (int) 32375550,
      (int) 32375568,
      (int) 32376423,
      (int) 32376633,
      (int) 32379061,
      (int) 32382487
     },
     CreatedAt: (time.Time) 2022-08-06 20:43:36 +0000 UTC,
     CreatedAtI: (int) 1659818616,
     NumComments: (int) 180,
     ObjectID: (string) (len=8) "32371423",
     Points: (int) 1297,
     StoryID: (int) 32371423,
     Title: (string) (len=37) "Cramming 'Papers, Please' onto Phones",
     UpdatedAt: (time.Time) 2024-02-20 16:55:58 +0000 UTC,
     URL: (string) (len=48) "https://dukope.com/devlogs/papers-please/mobile/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=8) "programd"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=47) "ArXiv now offers <em>paper</em>s in HTML format"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=103) "https://blog.arxiv.org/2023/12/21/accessibility-update-arxiv-now-offers-<em>paper</em>s-in-html-format/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=15) "author_programd",
      (string) (len=14) "story_38724665"
     },
     Author: (string) (len=8) "programd",
     Children: ([]int) (len=74 cap=128) {
      (int) 38724925,
      (int) 38724986,
      (int) 38725019,
      (int) 38725095,
      (int) 38725111,
      (int) 38725174,
      (int) 38725196,
      (int) 38725213,
      (int) 38725227,
      (int) 38725230,
      (int) 38725296,
      (int) 38725385,
      (int) 38725392,
      (int) 38725419,
      (int) 38725428,
      (int) 38725467,
      (int) 38725492,
      (int) 38725570,
      (int) 38725572,
      (int) 38725682,
      (int) 38725737,
      (int) 38725774,
      (int) 38725791,
      (int) 38725861,
      (int) 38725896,
      (int) 38725953,
      (int) 38726148,
      (int) 38726582,
      (int) 38726686,
      (int) 38726987,
      (int) 38727032,
      (int) 38727087,
      (int) 38727105,
      (int) 38727203,
      (int) 38727339,
      (int) 38727900,
      (int) 38727962,
      (int) 38728139,
      (int) 38728219,
      (int) 38728285,
      (int) 38728404,
      (int) 38728491,
      (int) 38728696,
      (int) 38728845,
      (int) 38729145,
      (int) 38729183,
      (int) 38729282,
      (int) 38729574,
      (int) 38729913,
      (int) 38730149,
      (int) 38730200,
      (int) 38730472,
      (int) 38730660,
      (int) 38730874,
      (int) 38730881,
      (int) 38730926,
      (int) 38731317,
      (int) 38731460,
      (int) 38731637,
      (int) 38731693,
      (int) 38731747,
      (int) 38731783,
      (int) 38731795,
      (int) 38732208,
      (int) 38732373,
      (int) 38732805,
      (int) 38733065,
      (int) 38734752,
      (int) 38734839,
      (int) 38735143,
      (int) 38736424,
      (int) 38736640,
      (int) 38738809,
      (int) 38743715
     },
     CreatedAt: (time.Time) 2023-12-21 18:34:53 +0000 UTC,
     CreatedAtI: (int) 1703183693,
     NumComments: (int) 312,
     ObjectID: (string) (len=8) "38724665",
     Points: (int) 1204,
     StoryID: (int) 38724665,
     Title: (string) (len=38) "ArXiv now offers papers in HTML format",
     UpdatedAt: (time.Time) 2024-06-11 01:41:30 +0000 UTC,
     URL: (string) (len=94) "https://blog.arxiv.org/2023/12/21/accessibility-update-arxiv-now-offers-papers-in-html-format/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=8) "mpweiher"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=39) "Paradise <em>Paper</em>s: Dear Tim Cook"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=78) "https://projekte.sueddeutsche.de/paradisepapers/politik/dear-tim-cook-e322998/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=15) "author_mpweiher",
      (string) (len=14) "story_15651058"
     },
     Author: (string) (len=8) "mpweiher",
     Children: ([]int) (len=85 cap=128) {
      (int) 15651269,
      (int) 15651283,
      (int) 15651287,
      (int) 15651296,
      (int) 15651300,
      (int) 15651315,
      (int) 15651349,
      (int) 15651363,
      (int) 15651384,
      (int) 15651393,
      (int) 15651399,
      (int) 15651415,
      (int) 15651437,
      (int) 15651439,
      (int) 15651449,
      (int) 15651453,
      (int) 15651457,
      (int) 15651500,
      (int) 15651505,
      (int) 15651530,
      (int) 15651535,
      (int) 15651562,
      (int) 15651570,
      (int) 15651585,
      (int) 15651731,
      (int) 15651776,
      (int) 15651783,
      (int) 15651791,
      (int) 15651871,
      (int) 15651892,
      (int) 15651900,
      (int) 15651917,
      (int) 15652016,
      (int) 15652026,
      (int) 15652068,
      (int) 15652080,
      (int) 15652109,
      (int) 15652120,
      (int) 15652206,
      (int) 15652274,
      (int) 15652302,
      (int) 15652335,
      (int) 15652365,
      (int) 15652403,
      (int) 15652423,
      (int) 15652434,
      (int) 15652443,
      (int) 15652445,
      (int) 15652457,
      (int) 15652514,
      (int) 15652569,
      (int) 15652596,
      (int) 15652634,
      (int) 15652648,
      (int) 15652689,
      (int) 15652700,
      (int) 15652799,
      (int) 15652815,
      (int) 15653104,
      (int) 15653297,
      (int) 15653338,
      (int) 15653461,
      (int) 15653652,
      (int) 15653796,
      (int) 15653820,
      (int) 15654318,
      (int) 15654466,
      (int) 15654482,
      (int) 15654630,
      (int) 15654727,
      (int) 15655498,
      (int) 15655628,
      (int) 15655649,
      (int) 15655702,
      (int) 15655939,
      (int) 15656233,
      (int) 15657768,
      (int) 15658247,
      (int) 15658261,
      (int) 15658329,
      (int) 15659307,
      (int) 15668445,
      (int) 15675185,
      (int) 15677568,
      (int) 15690687
     },
     CreatedAt: (time.Time) 2017-11-08 10:14:31 +0000 UTC,
     CreatedAtI: (int) 1510136071,
     NumComments: (int) 791,
     ObjectID: (string) (len=8) "15651058",
     Points: (int) 1200,
     StoryID: (int) 15651058,
     Title: (string) (len=30) "Paradise Papers: Dear Tim Cook",
     UpdatedAt: (time.Time) 2023-09-07 03:14:24 +0000 UTC,
     URL: (string) (len=78) "https://projekte.sueddeutsche.de/paradisepapers/politik/dear-tim-cook-e322998/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=5) "nkurz"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=51) "Who's downloading pirated <em>paper</em>s? Everyone"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=88) "http://www.sciencemag.org/news/2016/04/whos-downloading-pirated-<em>paper</em>s-everyone"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=12) "author_nkurz",
      (string) (len=14) "story_11593532"
     },
     Author: (string) (len=5) "nkurz",
     Children: ([]int) (len=65 cap=128) {
      (int) 11593685,
      (int) 11593695,
      (int) 11593710,
      (int) 11593723,
      (int) 11593738,
      (int) 11593756,
      (int) 11593761,
      (int) 11593762,
      (int) 11593768,
      (int) 11593782,
      (int) 11593792,
      (int) 11593797,
      (int) 11593801,
      (int) 11593822,
      (int) 11593881,
      (int) 11593910,
      (int) 11593912,
      (int) 11593919,
      (int) 11593957,
      (int) 11593971,
      (int) 11593974,
      (int) 11593994,
      (int) 11594003,
      (int) 11594022,
      (int) 11594052,
      (int) 11594124,
      (int) 11594208,
      (int) 11594226,
      (int) 11594253,
      (int) 11594312,
      (int) 11594335,
      (int) 11594408,
      (int) 11594458,
      (int) 11594475,
      (int) 11594531,
      (int) 11594625,
      (int) 11594628,
      (int) 11594654,
      (int) 11594722,
      (int) 11594742,
      (int) 11594786,
      (int) 11594851,
      (int) 11594875,
      (int) 11594953,
      (int) 11595050,
      (int) 11595207,
      (int) 11595262,
      (int) 11595486,
      (int) 11595876,
      (int) 11595878,
      (int) 11596262,
      (int) 11596285,
      (int) 11597111,
      (int) 11597597,
      (int) 11597620,
      (int) 11597791,
      (int) 11598189,
      (int) 11598208,
      (int) 11598285,
      (int) 11598309,
      (int) 11599080,
      (int) 11599327,
      (int) 11600885,
      (int) 11601070,
      (int) 11606208
     },
     CreatedAt: (time.Time) 2016-04-29 03:07:03 +0000 UTC,
     CreatedAtI: (int) 1461899223,
     NumComments: (int) 381,
     ObjectID: (string) (len=8) "11593532",
     Points: (int) 1085,
     StoryID: (int) 11593532,
     Title: (string) (len=42) "Who's downloading pirated papers? Everyone",
     UpdatedAt: (time.Time) 2023-09-07 00:18:35 +0000 UTC,
     URL: (string) (len=79) "http://www.sciencemag.org/news/2016/04/whos-downloading-pirated-papers-everyone"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=5) "j4mie"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=32) "Seymour <em>Paper</em>t has died"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=57) "http://www.media.mit.edu/people/in-memory/<em>paper</em>t"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=12) "author_j4mie",
      (string) (len=14) "story_12201810"
     },
     Author: (string) (len=5) "j4mie",
     Children: ([]int) (len=62 cap=64) {
      (int) 12201885,
      (int) 12201953,
      (int) 12202029,
      (int) 12202139,
      (int) 12202168,
      (int) 12202175,
      (int) 12202242,
      (int) 12202244,
      (int) 12202258,
      (int) 12202306,
      (int) 12202330,
      (int) 12202409,
      (int) 12202479,
      (int) 12202616,
      (int) 12202626,
      (int) 12202727,
      (int) 12202859,
      (int) 12202910,
      (int) 12203000,
      (int) 12203027,
      (int) 12203048,
      (int) 12203059,
      (int) 12203061,
      (int) 12203155,
      (int) 12203159,
      (int) 12203211,
      (int) 12203255,
      (int) 12203290,
      (int) 12203457,
      (int) 12203698,
      (int) 12204229,
      (int) 12204357,
      (int) 12204800,
      (int) 12204818,
      (int) 12204942,
      (int) 12205013,
      (int) 12205059,
      (int) 12205266,
      (int) 12205527,
      (int) 12205543,
      (int) 12205556,
      (int) 12205578,
      (int) 12205586,
      (int) 12205651,
      (int) 12206038,
      (int) 12206133,
      (int) 12206391,
      (int) 12206748,
      (int) 12207238,
      (int) 12207320,
      (int) 12207331,
      (int) 12207532,
      (int) 12207761,
      (int) 12207986,
      (int) 12208386,
      (int) 12208931,
      (int) 12208933,
      (int) 12209156,
      (int) 12209368,
      (int) 12211000,
      (int) 12217402,
      (int) 12219498
     },
     CreatedAt: (time.Time) 2016-08-01 12:26:57 +0000 UTC,
     CreatedAtI: (int) 1470054417,
     NumComments: (int) 137,
     ObjectID: (string) (len=8) "12201810",
     Points: (int) 820,
     StoryID: (int) 12201810,
     Title: (string) (len=23) "Seymour Papert has died",
     UpdatedAt: (time.Time) 2023-09-07 00:59:01 +0000 UTC,
     URL: (string) (len=48) "http://www.media.mit.edu/people/in-memory/papert"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=6) "lainon"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=48) "Ask HN: What is your favorite CS <em>paper</em>?"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) "",
       MatchedWords: ([]string) <nil>,
       Value: (string) ""
      }
     },
     Tags: ([]string) (len=4 cap=4) {
      (string) (len=5) "story",
      (string) (len=13) "author_lainon",
      (string) (len=14) "story_15089476",
      (string) (len=6) "ask_hn"
     },
     Author: (string) (len=6) "lainon",
     Children: ([]int) (len=123 cap=128) {
      (int) 15090332,
      (int) 15090390,
      (int) 15090410,
      (int) 15090465,
      (int) 15090476,
      (int) 15090496,
      (int) 15090518,
      (int) 15090523,
      (int) 15090533,
      (int) 15090538,
      (int) 15090549,
      (int) 15090551,
      (int) 15090562,
      (int) 15090572,
      (int) 15090573,
      (int) 15090574,
      (int) 15090639,
      (int) 15090649,
      (int) 15090672,
      (int) 15090678,
      (int) 15090680,
      (int) 15090685,
      (int) 15090763,
      (int) 15090785,
      (int) 15090817,
      (int) 15090857,
      (int) 15090860,
      (int) 15090862,
      (int) 15090864,
      (int) 15090882,
      (int) 15090895,
      (int) 15090922,
      (int) 15090982,
      (int) 15091059,
      (int) 15091075,
      (int) 15091143,
      (int) 15091170,
      (int) 15091188,
      (int) 15091206,
      (int) 15091221,
      (int) 15091235,
      (int) 15091240,
      (int) 15091242,
      (int) 15091248,
      (int) 15091272,
      (int) 15091277,
      (int) 15091281,
      (int) 15091285,
      (int) 15091307,
      (int) 15091347,
      (int) 15091369,
      (int) 15091391,
      (int) 15091397,
      (int) 15091426,
      (int) 15091480,
      (int) 15091497,
      (int) 15091519,
      (int) 15091572,
      (int) 15091574,
      (int) 15091585,
      (int) 15091637,
      (int) 15091725,
      (int) 15091727,
      (int) 15091766,
      (int) 15091889,
      (int) 15091967,
      (int) 15091990,
      (int) 15092004,
      (int) 15092100,
      (int) 15092116,
      (int) 15092121,
      (int) 15092155,
      (int) 15092175,
      (int) 15092288,
      (int) 15092312,
      (int) 15092409,
      (int) 15092454,
      (int) 15092498,
      (int) 15092619,
      (int) 15092629,
      (int) 15092686,
      (int) 15092762,
      (int) 15092969,
      (int) 15093054,
      (int) 15093072,
      (int) 15093143,
      (int) 15093216,
      (int) 15093240,
      (int) 15093248,
      (int) 15093586,
      (int) 15093746,
      (int) 15093893,
      (int) 15094353,
      (int) 15094360,
      (int) 15094406,
      (int) 15094413,
      (int) 15094541,
      (int) 15094560,
      (int) 15094575,
      (int) 15094789,
      (int) 15094920,
      (int) 15095023,
      (int) 15095074,
      (int) 15095076,
      (int) 15095109,
      (int) 15095325,
      (int) 15095354,
      (int) 15095834,
      (int) 15095885,
      (int) 15096457,
      (int) 15096604,
      (int) 15096712,
      (int) 15096724,
      (int) 15098154,
      (int) 15098286,
      (int) 15098288,
      (int) 15098531,
      (int) 15098896,
      (int) 15099333,
      (int) 15099426,
      (int) 15101255,
      (int) 15105766,
      (int) 15106954
     },
     CreatedAt: (time.Time) 2017-08-24 12:24:20 +0000 UTC,
     CreatedAtI: (int) 1503577460,
     NumComments: (int) 257,
     ObjectID: (string) (len=8) "15089476",
     Points: (int) 793,
     StoryID: (int) 15089476,
     Title: (string) (len=39) "Ask HN: What is your favorite CS paper?",
     UpdatedAt: (time.Time) 2024-05-19 03:07:56 +0000 UTC,
     URL: (string) ""
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=8) "reimertz"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=21) "<em>Paper</em> Planes"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=33) "http://<em>paper</em>planes.world"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=15) "author_reimertz",
      (string) (len=14) "story_12629921"
     },
     Author: (string) (len=8) "reimertz",
     Children: ([]int) (len=70 cap=128) {
      (int) 12630304,
      (int) 12630358,
      (int) 12630364,
      (int) 12630365,
      (int) 12630406,
      (int) 12630434,
      (int) 12630441,
      (int) 12630446,
      (int) 12630530,
      (int) 12630536,
      (int) 12630544,
      (int) 12630591,
      (int) 12630710,
      (int) 12630712,
      (int) 12630740,
      (int) 12630859,
      (int) 12630927,
      (int) 12631104,
      (int) 12631126,
      (int) 12631142,
      (int) 12631144,
      (int) 12631204,
      (int) 12631235,
      (int) 12631252,
      (int) 12631315,
      (int) 12631372,
      (int) 12631374,
      (int) 12631452,
      (int) 12631463,
      (int) 12631491,
      (int) 12631604,
      (int) 12631635,
      (int) 12631688,
      (int) 12631690,
      (int) 12631697,
      (int) 12631742,
      (int) 12631787,
      (int) 12631805,
      (int) 12631809,
      (int) 12631827,
      (int) 12631835,
      (int) 12631894,
      (int) 12632233,
      (int) 12632236,
      (int) 12632323,
      (int) 12632339,
      (int) 12632362,
      (int) 12632491,
      (int) 12632520,
      (int) 12632657,
      (int) 12632750,
      (int) 12632804,
      (int) 12632886,
      (int) 12632922,
      (int) 12633244,
      (int) 12633258,
      (int) 12633261,
      (int) 12633264,
      (int) 12633380,
      (int) 12633396,
      (int) 12633541,
      (int) 12633945,
      (int) 12634286,
      (int) 12634287,
      (int) 12634665,
      (int) 12634798,
      (int) 12634943,
      (int) 12635137,
      (int) 12635816,
      (int) 12655201
     },
     CreatedAt: (time.Time) 2016-10-03 18:17:58 +0000 UTC,
     CreatedAtI: (int) 1475518678,
     NumComments: (int) 192,
     ObjectID: (string) (len=8) "12629921",
     Points: (int) 792,
     StoryID: (int) 12629921,
     Title: (string) (len=12) "Paper Planes",
     UpdatedAt: (time.Time) 2023-09-07 01:34:21 +0000 UTC,
     URL: (string) (len=24) "http://paperplanes.world"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=6) "homarp"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=76) "4.2″ and 7.5″ NFC-powered e-<em>Paper</em> Displays Work without Battery"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=99) "https://www.cnx-software.com/2020/03/17/nfc-powered-e-<em>paper</em>-displays-work-without-battery/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=13) "author_homarp",
      (string) (len=14) "story_22604617"
     },
     Author: (string) (len=6) "homarp",
     Children: ([]int) (len=26 cap=32) {
      (int) 22604753,
      (int) 22605196,
      (int) 22605199,
      (int) 22605210,
      (int) 22605222,
      (int) 22605251,
      (int) 22605256,
      (int) 22605382,
      (int) 22605655,
      (int) 22605771,
      (int) 22606021,
      (int) 22606245,
      (int) 22606566,
      (int) 22607583,
      (int) 22607616,
      (int) 22607734,
      (int) 22607978,
      (int) 22608723,
      (int) 22609976,
      (int) 22611084,
      (int) 22611442,
      (int) 22611537,
      (int) 22611825,
      (int) 22611971,
      (int) 22612757,
      (int) 22613519
     },
     CreatedAt: (time.Time) 2020-03-17 13:22:28 +0000 UTC,
     CreatedAtI: (int) 1584451348,
     NumComments: (int) 146,
     ObjectID: (string) (len=8) "22604617",
     Points: (int) 770,
     StoryID: (int) 22604617,
     Title: (string) (len=67) "4.2″ and 7.5″ NFC-powered e-Paper Displays Work without Battery",
     UpdatedAt: (time.Time) 2023-09-07 07:09:02 +0000 UTC,
     URL: (string) (len=90) "https://www.cnx-software.com/2020/03/17/nfc-powered-e-paper-displays-work-without-battery/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=8) "cyrksoft"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=86) "Major U.K. science funder to require grantees to make <em>paper</em>s immediately free"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=122) "https://www.sciencemag.org/news/2021/08/major-uk-science-funder-require-grantees-make-<em>paper</em>s-immediately-free-all"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=15) "author_cyrksoft",
      (string) (len=14) "story_28105966"
     },
     Author: (string) (len=8) "cyrksoft",
     Children: ([]int) (len=18 cap=32) {
      (int) 28106590,
      (int) 28106650,
      (int) 28106774,
      (int) 28106852,
      (int) 28106893,
      (int) 28106898,
      (int) 28107032,
      (int) 28107153,
      (int) 28107407,
      (int) 28107489,
      (int) 28107525,
      (int) 28109225,
      (int) 28109378,
      (int) 28109863,
      (int) 28110213,
      (int) 28110603,
      (int) 28111503,
      (int) 28111745
     },
     CreatedAt: (time.Time) 2021-08-08 11:31:37 +0000 UTC,
     CreatedAtI: (int) 1628422297,
     NumComments: (int) 92,
     ObjectID: (string) (len=8) "28105966",
     Points: (int) 761,
     StoryID: (int) 28105966,
     Title: (string) (len=77) "Major U.K. science funder to require grantees to make papers immediately free",
     UpdatedAt: (time.Time) 2023-09-07 09:16:26 +0000 UTC,
     URL: (string) (len=113) "https://www.sciencemag.org/news/2021/08/major-uk-science-funder-require-grantees-make-papers-immediately-free-all"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=5) "Tomte"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=86) "European leaders call for open access to all scientific <em>paper</em>s by 2020 (2016)"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=132) "http://www.sciencemag.org/news/2016/05/dramatic-statement-european-leaders-call-immediate-open-access-all-scientific-<em>paper</em>s"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=12) "author_Tomte",
      (string) (len=14) "story_14574444"
     },
     Author: (string) (len=5) "Tomte",
     Children: ([]int) (len=17 cap=32) {
      (int) 14574665,
      (int) 14574675,
      (int) 14574683,
      (int) 14574692,
      (int) 14574768,
      (int) 14574918,
      (int) 14575007,
      (int) 14575176,
      (int) 14575356,
      (int) 14575399,
      (int) 14575407,
      (int) 14576047,
      (int) 14577025,
      (int) 14577428,
      (int) 14579483,
      (int) 14580998,
      (int) 14613335
     },
     CreatedAt: (time.Time) 2017-06-17 05:32:05 +0000 UTC,
     CreatedAtI: (int) 1497677525,
     NumComments: (int) 102,
     ObjectID: (string) (len=8) "14574444",
     Points: (int) 756,
     StoryID: (int) 14574444,
     Title: (string) (len=77) "European leaders call for open access to all scientific papers by 2020 (2016)",
     UpdatedAt: (time.Time) 2023-09-07 02:55:24 +0000 UTC,
     URL: (string) (len=123) "http://www.sciencemag.org/news/2016/05/dramatic-statement-european-leaders-call-immediate-open-access-all-scientific-papers"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=5) "casca"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=58) "Why A4? – The Mathematical Beauty of <em>Paper</em> Size"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=86) "https://scilogs.spektrum.de/hlf/why-a4-the-mathematical-beauty-of-<em>paper</em>-size/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=12) "author_casca",
      (string) (len=14) "story_32721602"
     },
     Author: (string) (len=5) "casca",
     Children: ([]int) (len=37 cap=64) {
      (int) 32722067,
      (int) 32722092,
      (int) 32722131,
      (int) 32722134,
      (int) 32722198,
      (int) 32722210,
      (int) 32722276,
      (int) 32722283,
      (int) 32722284,
      (int) 32722287,
      (int) 32722320,
      (int) 32722383,
      (int) 32722443,
      (int) 32722471,
      (int) 32722496,
      (int) 32722547,
      (int) 32722568,
      (int) 32722725,
      (int) 32722779,
      (int) 32723328,
      (int) 32723417,
      (int) 32723419,
      (int) 32723486,
      (int) 32724079,
      (int) 32724343,
      (int) 32724723,
      (int) 32724974,
      (int) 32725615,
      (int) 32725868,
      (int) 32725981,
      (int) 32726201,
      (int) 32726247,
      (int) 32727001,
      (int) 32727253,
      (int) 32727541,
      (int) 32729832,
      (int) 32736390
     },
     CreatedAt: (time.Time) 2022-09-05 07:47:56 +0000 UTC,
     CreatedAtI: (int) 1662364076,
     NumComments: (int) 608,
     ObjectID: (string) (len=8) "32721602",
     Points: (int) 750,
     StoryID: (int) 32721602,
     Title: (string) (len=49) "Why A4? – The Mathematical Beauty of Paper Size",
     UpdatedAt: (time.Time) 2023-09-07 11:42:50 +0000 UTC,
     URL: (string) (len=77) "https://scilogs.spektrum.de/hlf/why-a4-the-mathematical-beauty-of-paper-size/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=7) "erohead"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=71) "Show HN: Beepberry – a portable e-<em>paper</em> computer for hackers"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=28) "https://beepberry.sqfmi.com/"
      }
     },
     Tags: ([]string) (len=4 cap=4) {
      (string) (len=5) "story",
      (string) (len=14) "author_erohead",
      (string) (len=14) "story_35976488",
      (string) (len=7) "show_hn"
     },
     Author: (string) (len=7) "erohead",
     Children: ([]int) (len=66 cap=128) {
      (int) 35976667,
      (int) 35976976,
      (int) 35976984,
      (int) 35978460,
      (int) 35978551,
      (int) 35978639,
      (int) 35978827,
      (int) 35978947,
      (int) 35978995,
      (int) 35979025,
      (int) 35979136,
      (int) 35979147,
      (int) 35979249,
      (int) 35979262,
      (int) 35979373,
      (int) 35979376,
      (int) 35979378,
      (int) 35979381,
      (int) 35979416,
      (int) 35979438,
      (int) 35979606,
      (int) 35979619,
      (int) 35979648,
      (int) 35979658,
      (int) 35979718,
      (int) 35979807,
      (int) 35979835,
      (int) 35979931,
      (int) 35979959,
      (int) 35979979,
      (int) 35979984,
      (int) 35980039,
      (int) 35980144,
      (int) 35980155,
      (int) 35980277,
      (int) 35980280,
      (int) 35980621,
      (int) 35980709,
      (int) 35980935,
      (int) 35981449,
      (int) 35981590,
      (int) 35981888,
      (int) 35981921,
      (int) 35981997,
      (int) 35982292,
      (int) 35982755,
      (int) 35983135,
      (int) 35983595,
      (int) 35984600,
      (int) 35984724,
      (int) 35984779,
      (int) 35984904,
      (int) 35984939,
      (int) 35985028,
      (int) 35985075,
      (int) 35985281,
      (int) 35985993,
      (int) 35986107,
      (int) 35986416,
      (int) 35987517,
      (int) 35987872,
      (int) 35988532,
      (int) 35989796,
      (int) 35990693,
      (int) 35995061,
      (int) 36048428
     },
     CreatedAt: (time.Time) 2023-05-17 15:13:53 +0000 UTC,
     CreatedAtI: (int) 1684336433,
     NumComments: (int) 227,
     ObjectID: (string) (len=8) "35976488",
     Points: (int) 731,
     StoryID: (int) 35976488,
     Title: (string) (len=62) "Show HN: Beepberry – a portable e-paper computer for hackers",
     UpdatedAt: (time.Time) 2024-01-16 13:52:02 +0000 UTC,
     URL: (string) (len=28) "https://beepberry.sqfmi.com/"
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; NumComments int "json:\"num_comments\""; ObjectID string "json:\"objectID\""; Points int "json:\"points\""; StoryID int "json:\"story_id\""; Title string "json:\"title\""; UpdatedAt time.Time "json:\"updated_at\""; URL string "json:\"url\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; Title struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"title\""; URL struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=15) "rdpintqogeogsaa"
      },
      Title: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=50) "Fixing stutters in <em>Paper</em>s Please on Linux"
      },
      URL: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=50) "https://blog.jhm.dev/posts/<em>paper</em>s-please/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=5) "story",
      (string) (len=22) "author_rdpintqogeogsaa",
      (string) (len=14) "story_29767826"
     },
     Author: (string) (len=15) "rdpintqogeogsaa",
     Children: ([]int) (len=24 cap=32) {
      (int) 29768075,
      (int) 29768096,
      (int) 29768235,
      (int) 29768267,
      (int) 29768720,
      (int) 29768818,
      (int) 29768927,
      (int) 29769162,
      (int) 29769208,
      (int) 29769221,
      (int) 29769237,
      (int) 29769318,
      (int) 29769332,
      (int) 29770033,
      (int) 29771349,
      (int) 29771462,
      (int) 29772413,
      (int) 29772885,
      (int) 29773249,
      (int) 29773701,
      (int) 29774460,
      (int) 29775885,
      (int) 29777058,
      (int) 29778939
     },
     CreatedAt: (time.Time) 2022-01-02 11:20:04 +0000 UTC,
     CreatedAtI: (int) 1641122404,
     NumComments: (int) 190,
     ObjectID: (string) (len=8) "29767826",
     Points: (int) 726,
     StoryID: (int) 29767826,
     Title: (string) (len=41) "Fixing stutters in Papers Please on Linux",
     UpdatedAt: (time.Time) 2023-09-07 10:22:06 +0000 UTC,
     URL: (string) (len=41) "https://blog.jhm.dev/posts/papers-please/"
    }
   },
   HitsPerPage: (int) 20,
   NbHits: (int) 26259,
   NbPages: (int) 50,
   Page: (int) 0,
   Params: (string) (len=64) "query=Paper&tags=story&advancedSyntax=true&analyticsTags=backend",
   ProcessingTimeMS: (int) 9,
   ProcessingTimingsMS: (struct { Request struct { RoundTrip int "json:\"roundTrip\"" } "json:\"_request\""; AfterFetch struct { Merge struct { Total int "json:\"total\"" } "json:\"merge\""; Total int "json:\"total\"" } "json:\"afterFetch\""; Fetch struct { Query int "json:\"query\""; Scanning int "json:\"scanning\""; Total int "json:\"total\"" } "json:\"fetch\""; Total int "json:\"total\"" }) {
    Request: (struct { RoundTrip int "json:\"roundTrip\"" }) {
     RoundTrip: (int) 17
    },
    AfterFetch: (struct { Merge struct { Total int "json:\"total\"" } "json:\"merge\""; Total int "json:\"total\"" }) {
     Merge: (struct { Total int "json:\"total\"" }) {
      Total: (int) 0
     },
     Total: (int) 0
    },
    Fetch: (struct { Query int "json:\"query\""; Scanning int "json:\"scanning\""; Total int "json:\"total\"" }) {
     Query: (int) 4,
     Scanning: (int) 4,
     Total: (int) 8
    },
    Total: (int) 9
   },
   Query: (string) (len=5) "Paper",
   ServerTimeMS: (int) 10
  }),
  HackernewsCommentsPtr: (*hackernews.HackernewsCommentsResponse)(0xc00030c3c0)({
   Exhaustive: (struct { NbHits bool "json:\"nbHits\""; Typo bool "json:\"typo\"" }) {
    NbHits: (bool) false,
    Typo: (bool) false
   },
   ExhaustiveNbHits: (bool) false,
   ExhaustiveTypo: (bool) false,
   Hits: ([]struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) (len=20 cap=37) {
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=12) "omginternets"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1451) "I agree, and this line from Mr. Iseman's post is a great example:<p>&gt;Why give half of the money you raise to your university when you can rent lab space for hundreds of dollars a month?<p>Because:<p>1. In practice, you don't actually have to give half the money you raise to a university.  Universities reap huge benefits from collaborations with the private sector.<p>2. SBIR/STTR grants come with <i>far</i> fewer strings attached than do funds from VCs.<p>3. Scientific startups often need credibility, and working with a university all but completely resolves that issue.<p>4. Universities are not simply a monetary resource; you benefit from (a) access to domain-specific expertise (b) cutting-edge research (c) a pool of highly-educated people to take on as interns and employees.<p>YC should pay special attention to point 2.  I'm co-founder a startup that offers cognitive biometric analysis -- we can make inferences on cognitive and affective state through video analysis.  We have a general-purpose product (read:  large and diverse customer base) and we can go very far with very little funding, so why sell shares when we can get a 50k grant in exchange for some (admittedly tedious) <em>paper</em>work?<p>Can we go faster with, say, 1 million? Sure, <i>much</i> faster, but then we have to deal with investors who probably don't know much about our product.  And more to the point:  universities, to a certain extent, behave like VCs."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=22) "Joining a Different YC"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=50) "http://blog.ycombinator.com/joining-a-different-yc"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=19) "author_omginternets",
      (string) (len=13) "story_9997722"
     },
     Author: (string) (len=12) "omginternets",
     Children: ([]int) (len=1 cap=1) {
      (int) 10000380
     },
     CommentText: (string) (len=1467) "I agree, and this line from Mr. Iseman&#x27;s post is a great example:<p>&gt;Why give half of the money you raise to your university when you can rent lab space for hundreds of dollars a month?<p>Because:<p>1. In practice, you don&#x27;t actually have to give half the money you raise to a university.  Universities reap huge benefits from collaborations with the private sector.<p>2. SBIR&#x2F;STTR grants come with <i>far</i> fewer strings attached than do funds from VCs.<p>3. Scientific startups often need credibility, and working with a university all but completely resolves that issue.<p>4. Universities are not simply a monetary resource; you benefit from (a) access to domain-specific expertise (b) cutting-edge research (c) a pool of highly-educated people to take on as interns and employees.<p>YC should pay special attention to point 2.  I&#x27;m co-founder a startup that offers cognitive biometric analysis -- we can make inferences on cognitive and affective state through video analysis.  We have a general-purpose product (read:  large and diverse customer base) and we can go very far with very little funding, so why sell shares when we can get a 50k grant in exchange for some (admittedly tedious) paperwork?<p>Can we go faster with, say, 1 million? Sure, <i>much</i> faster, but then we have to deal with investors who probably don&#x27;t know much about our product.  And more to the point:  universities, to a certain extent, behave like VCs.",
     CreatedAt: (time.Time) 2015-08-03 21:20:56 +0000 UTC,
     CreatedAtI: (int) 1438636856,
     ObjectID: (string) (len=7) "9999920",
     ParentID: (int) 9999070,
     Points: (*int)(<nil>),
     StoryID: (int) 9997722,
     StoryTitle: (string) (len=22) "Joining a Different YC",
     StoryURL: (string) (len=50) "http://blog.ycombinator.com/joining-a-different-yc",
     UpdatedAt: (time.Time) 2023-09-07 03:22:05 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=11) "timothybone"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=239) "I loved the original zelda as a kid, it was loaded with eurekons imo. <a href=\"http://www.aaai.org/ocs/index.php/INT/INT7/paper/viewFile/9265/9206\" rel=\"nofollow\">http://www.aaai.org/ocs/index.php/INT/INT7/<em>paper</em>/viewFile/92...</a>"
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=19) "Saving Zelda (2012)"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=38) "http://tevisthompson.com/saving-zelda/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=18) "author_timothybone",
      (string) (len=13) "story_9993901"
     },
     Author: (string) (len=11) "timothybone",
     Children: ([]int) <nil>,
     CommentText: (string) (len=325) "I loved the original zelda as a kid, it was loaded with eurekons imo. <a href=\"http:&#x2F;&#x2F;www.aaai.org&#x2F;ocs&#x2F;index.php&#x2F;INT&#x2F;INT7&#x2F;paper&#x2F;viewFile&#x2F;9265&#x2F;9206\" rel=\"nofollow\">http:&#x2F;&#x2F;www.aaai.org&#x2F;ocs&#x2F;index.php&#x2F;INT&#x2F;INT7&#x2F;paper&#x2F;viewFile&#x2F;92...</a>",
     CreatedAt: (time.Time) 2015-08-03 20:18:30 +0000 UTC,
     CreatedAtI: (int) 1438633110,
     ObjectID: (string) (len=7) "9999467",
     ParentID: (int) 9993901,
     Points: (*int)(<nil>),
     StoryID: (int) 9993901,
     StoryTitle: (string) (len=19) "Saving Zelda (2012)",
     StoryURL: (string) (len=38) "http://tevisthompson.com/saving-zelda/",
     UpdatedAt: (time.Time) 2023-09-07 03:22:05 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=14) "CyberDildonics"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=696) "I'm actually really glad they got the <em>paper</em> out there as a small pdf (and I'm actually glad they compared it to other commercial renderers).  The reason is that it shows very real world performance results. Not only that but cache coherency optimization results are shocking and illuminating to many people because it seems so counter intuitive when there technically aren't more instructions being ran.<p>Every <em>paper</em> I read now I am looking for all the things that were left out, how the comparisons have been changed for each scene to make that particular algorithm look good etc.<p>It answered a big question lingering in my mind that I haven't been able to actually try out."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=26) "Disney's Hyperion Renderer"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=21) "author_CyberDildonics",
      (string) (len=13) "story_9994032"
     },
     Author: (string) (len=14) "CyberDildonics",
     Children: ([]int) <nil>,
     CommentText: (string) (len=698) "I&#x27;m actually really glad they got the paper out there as a small pdf (and I&#x27;m actually glad they compared it to other commercial renderers).  The reason is that it shows very real world performance results. Not only that but cache coherency optimization results are shocking and illuminating to many people because it seems so counter intuitive when there technically aren&#x27;t more instructions being ran.<p>Every paper I read now I am looking for all the things that were left out, how the comparisons have been changed for each scene to make that particular algorithm look good etc.<p>It answered a big question lingering in my mind that I haven&#x27;t been able to actually try out.",
     CreatedAt: (time.Time) 2015-08-03 19:14:49 +0000 UTC,
     CreatedAtI: (int) 1438629289,
     ObjectID: (string) (len=7) "9999028",
     ParentID: (int) 9998909,
     Points: (*int)(<nil>),
     StoryID: (int) 9994032,
     StoryTitle: (string) (len=26) "Disney's Hyperion Renderer",
     StoryURL: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion",
     UpdatedAt: (time.Time) 2023-09-07 03:22:05 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=10) "tomvbussel"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=870) "I completely agree with you that the information in that <em>paper</em> is excellent and I think it's amazing that Disney is so willing to share so much information about their renderer, even though their sister company Pixar sells a renderer.<p>The question though is whether or not this <em>paper</em> should have been published at EGSR. Personally I think that an EGSR <em>paper</em> should either propose a novel idea or should provide a good survey of the field. I don't think this <em>paper</em> succeeds at either of those. Their method is 'simply' a combination of already published ideas and I don't think that they do a very good job at comparing those existing ideas.<p>Personally, I think this <em>paper</em> would have been better suited as a talk at SIGGRAPH, a publication at JCGT or a technical report (like Pixar). So: great <em>paper</em>, wrong venue."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=26) "Disney's Hyperion Renderer"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=17) "author_tomvbussel",
      (string) (len=13) "story_9994032"
     },
     Author: (string) (len=10) "tomvbussel",
     Children: ([]int) (len=1 cap=1) {
      (int) 9999028
     },
     CommentText: (string) (len=841) "I completely agree with you that the information in that paper is excellent and I think it&#x27;s amazing that Disney is so willing to share so much information about their renderer, even though their sister company Pixar sells a renderer.<p>The question though is whether or not this paper should have been published at EGSR. Personally I think that an EGSR paper should either propose a novel idea or should provide a good survey of the field. I don&#x27;t think this paper succeeds at either of those. Their method is &#x27;simply&#x27; a combination of already published ideas and I don&#x27;t think that they do a very good job at comparing those existing ideas.<p>Personally, I think this paper would have been better suited as a talk at SIGGRAPH, a publication at JCGT or a technical report (like Pixar). So: great paper, wrong venue.",
     CreatedAt: (time.Time) 2015-08-03 19:01:33 +0000 UTC,
     CreatedAtI: (int) 1438628493,
     ObjectID: (string) (len=7) "9998909",
     ParentID: (int) 9998478,
     Points: (*int)(<nil>),
     StoryID: (int) 9994032,
     StoryTitle: (string) (len=26) "Disney's Hyperion Renderer",
     StoryURL: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=6) "jazzyk"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=115) "On <em>paper</em>.<p>In reality, there are many loopholes (the more money involved, the more fully legal loopholes)"
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=25) "Defending the One Percent"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=54) "http://pubs.aeaweb.org/doi/pdfplus/10.1257/jep.27.3.21"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=13) "author_jazzyk",
      (string) (len=13) "story_9994967"
     },
     Author: (string) (len=6) "jazzyk",
     Children: ([]int) (len=1 cap=1) {
      (int) 10000707
     },
     CommentText: (string) (len=106) "On paper.<p>In reality, there are many loopholes (the more money involved, the more fully legal loopholes)",
     CreatedAt: (time.Time) 2015-08-03 18:52:11 +0000 UTC,
     CreatedAtI: (int) 1438627931,
     ObjectID: (string) (len=7) "9998843",
     ParentID: (int) 9998591,
     Points: (*int)(<nil>),
     StoryID: (int) 9994967,
     StoryTitle: (string) (len=25) "Defending the One Percent",
     StoryURL: (string) (len=54) "http://pubs.aeaweb.org/doi/pdfplus/10.1257/jep.27.3.21",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=14) "CyberDildonics"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1096) "I'll just say that I don't want to dismiss anything except for exaggerated marketing. I think it is reasonable to say that I should ignore it though.<p>&gt; I think the <em>paper</em> is excellent. First, there's a big gap between academic <em>paper</em>s on a topic and the experience of actually building a real system that works for real movies. It's unusual for people in industry to take the time to write up their experiences building these systems, so I salute their making this contribution to general knowledge about rendering systems.<p>I'm %100 with you. I love seeing the results of cache coherency used in a real scenario.  I was only trying to say that the actual imagery could have been done in other renderers, albeit with more pain and I would guess more attention to level of detail.<p>So I'm not trying to downplay anything except for the idea that the actual movie itself couldn't have been done without cache coherent batch ray tracing, when in reality it is a big optimization that came from a bit of a leap of faith, which I think is significant enough to pay attention to."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=26) "Disney's Hyperion Renderer"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=21) "author_CyberDildonics",
      (string) (len=13) "story_9994032"
     },
     Author: (string) (len=14) "CyberDildonics",
     Children: ([]int) <nil>,
     CommentText: (string) (len=1113) "I&#x27;ll just say that I don&#x27;t want to dismiss anything except for exaggerated marketing. I think it is reasonable to say that I should ignore it though.<p>&gt; I think the paper is excellent. First, there&#x27;s a big gap between academic papers on a topic and the experience of actually building a real system that works for real movies. It&#x27;s unusual for people in industry to take the time to write up their experiences building these systems, so I salute their making this contribution to general knowledge about rendering systems.<p>I&#x27;m %100 with you. I love seeing the results of cache coherency used in a real scenario.  I was only trying to say that the actual imagery could have been done in other renderers, albeit with more pain and I would guess more attention to level of detail.<p>So I&#x27;m not trying to downplay anything except for the idea that the actual movie itself couldn&#x27;t have been done without cache coherent batch ray tracing, when in reality it is a big optimization that came from a bit of a leap of faith, which I think is significant enough to pay attention to.",
     CreatedAt: (time.Time) 2015-08-03 18:49:20 +0000 UTC,
     CreatedAtI: (int) 1438627760,
     ObjectID: (string) (len=7) "9998802",
     ParentID: (int) 9998478,
     Points: (*int)(<nil>),
     StoryID: (int) 9994032,
     StoryTitle: (string) (len=26) "Disney's Hyperion Renderer",
     StoryURL: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=8) "arjun810"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1150) "Gradescope - <a href=\"https://gradescope.com\" rel=\"nofollow\">https://gradescope.com</a> Berkeley, CA | ONSITE<p>Gradescope lets instructors give out the same <em>paper</em>-based assignments they've always used, but then grade them online, while keeping track of the exact mistakes made by every student on every question. This enables unprecedented data analytics: for example, we can reveal which concepts a student needs help with, or which questions are too difficult. To top it off, instructors finish grading in half the time.<p>Our product has been used to grade over 3.5 million pages of work belonging to over 30,000 students. We’ve raised a seed round, and are making our first full-time engineering hire to join the founding team of two PhDs and professor from Berkeley CS. Over the next few months, we’re looking to expand our user base and roll out advanced features including autograding, analytics, and more. We offer market-rate salary with generous equity.<p>We’re currently looking for a full-stack engineer. We've got a Rails backend with some React on the frontend.<p>If you’re interested, please email jobs@gradescope.com"
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=36) "Ask HN: Who is hiring? (August 2015)"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) "",
       MatchedWords: ([]string) <nil>,
       Value: (string) ""
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=15) "author_arjun810",
      (string) (len=13) "story_9996333"
     },
     Author: (string) (len=8) "arjun810",
     Children: ([]int) <nil>,
     CommentText: (string) (len=1171) "Gradescope - <a href=\"https:&#x2F;&#x2F;gradescope.com\" rel=\"nofollow\">https:&#x2F;&#x2F;gradescope.com</a> Berkeley, CA | ONSITE<p>Gradescope lets instructors give out the same paper-based assignments they&#x27;ve always used, but then grade them online, while keeping track of the exact mistakes made by every student on every question. This enables unprecedented data analytics: for example, we can reveal which concepts a student needs help with, or which questions are too difficult. To top it off, instructors finish grading in half the time.<p>Our product has been used to grade over 3.5 million pages of work belonging to over 30,000 students. We’ve raised a seed round, and are making our first full-time engineering hire to join the founding team of two PhDs and professor from Berkeley CS. Over the next few months, we’re looking to expand our user base and roll out advanced features including autograding, analytics, and more. We offer market-rate salary with generous equity.<p>We’re currently looking for a full-stack engineer. We&#x27;ve got a Rails backend with some React on the frontend.<p>If you’re interested, please email jobs@gradescope.com",
     CreatedAt: (time.Time) 2015-08-03 18:45:17 +0000 UTC,
     CreatedAtI: (int) 1438627517,
     ObjectID: (string) (len=7) "9998762",
     ParentID: (int) 9996333,
     Points: (*int)(<nil>),
     StoryID: (int) 9996333,
     StoryTitle: (string) (len=36) "Ask HN: Who is hiring? (August 2015)",
     StoryURL: (string) "",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=8) "seliopou"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=3225) "Something like this could be implemented in Haskell or OCaml using GADTs[0]. You can add a phantom type parameter to the expression type and use that indicate whether or not the expression is well-formed according to some predicate--in your example, &quot;non-nested added-ness.&quot; In fact this technique is often used as an introductory example to the use of GADTs, except the well-formed-ness property that's typically presented is that the expression is well-typed.<p>It's possible to express multiple properties using the same phantom type parameter is both languages. However, as you sort of alluded to, this encoding is much simpler if your language supports subtyping. Since OCaml does support subtyping, you can use polymorphic variants[1] for this purpose. For example, if you had the NotAdd property as well as the NotMult property, you could write down the type for an operation that depends on just the NotAdd operation like this:<p><pre><code>    val notAddOp : ([&gt; `NotAdd] as 'a) expr -&gt; 'a t\n</code></pre>\n... and write down an operation that depends on both like this:<p><pre><code>    val bothOp : ([&gt; `NotAdd | `NotMult] as 'a) expr -&gt; 'a u\n</code></pre>\nIn Haskell, things would get more complicated. The type of the first operation would like more like this:<p><pre><code>    notAddOp : Contains NotAdd a -&gt; Expr a -&gt; T a\n</code></pre>\n... where the first argument is acting like a proof witness that the type parameter 'a in some sense &quot;contains&quot; tye type NotAdd. Similarly again for the second, except with two witnesses:<p><pre><code>    bothOp : Contains NotAdd a -&gt; Contains NotMult a -&gt; Expr a -&gt; T a\n</code></pre>\nI haven't thought it completely through, but I'm almost certain that a combination of type classes and GCH extensions would allow you to turn those proof witness arguments into type class contexts.<p>Anyways, doing this sort of encoding of properties in types is all well and good until you start considering more realistic examples. Even in the one you presented, it's going to cause you problems if, say, you want to write an inliner for your language. Substituting an expression for a variable within a &quot;NotAdd&quot; addition may very well break the &quot;NotAdd&quot; property. This means that your inliner has to be aware of that property, so that it can preserve it while doing its job. In other words, the option of writing code that will break an invariant, and then immediately recover the invariant, is no longer on the table when you take this approach to verifying the correctness of your code. That may seem bad, until you try to verifiably balanced red-black tree without learning Coq and reading this[2].<p>Life's full of trade-offs.<p>[0]: <a href=\"https://en.wikipedia.org/wiki/Generalized_algebraic_data_type\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Generalized_algebraic_data_typ...</a><p>[1]: <a href=\"https://realworldocaml.org/v1/en/html/variants.html#polymorphic-variants\" rel=\"nofollow\">https://realworldocaml.org/v1/en/html/variants.html#polymorp...</a><p>[2]: <a href=\"http://www.cs.princeton.edu/~appel/papers/redblack.pdf\" rel=\"nofollow\">http://www.cs.princeton.edu/~appel/<em>paper</em>s/redblack.pdf</a>"
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=57) "Automated reasoning in F#, Scala, Haskell, C++, and Julia"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=63) "http://phdp.github.io/posts/2015-04-05-automated-reasoning.html"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=15) "author_seliopou",
      (string) (len=13) "story_9995896"
     },
     Author: (string) (len=8) "seliopou",
     Children: ([]int) (len=1 cap=1) {
      (int) 9998786
     },
     CommentText: (string) (len=3421) "Something like this could be implemented in Haskell or OCaml using GADTs[0]. You can add a phantom type parameter to the expression type and use that indicate whether or not the expression is well-formed according to some predicate--in your example, &quot;non-nested added-ness.&quot; In fact this technique is often used as an introductory example to the use of GADTs, except the well-formed-ness property that&#x27;s typically presented is that the expression is well-typed.<p>It&#x27;s possible to express multiple properties using the same phantom type parameter is both languages. However, as you sort of alluded to, this encoding is much simpler if your language supports subtyping. Since OCaml does support subtyping, you can use polymorphic variants[1] for this purpose. For example, if you had the NotAdd property as well as the NotMult property, you could write down the type for an operation that depends on just the NotAdd operation like this:<p><pre><code>    val notAddOp : ([&gt; `NotAdd] as &#x27;a) expr -&gt; &#x27;a t\n</code></pre>\n... and write down an operation that depends on both like this:<p><pre><code>    val bothOp : ([&gt; `NotAdd | `NotMult] as &#x27;a) expr -&gt; &#x27;a u\n</code></pre>\nIn Haskell, things would get more complicated. The type of the first operation would like more like this:<p><pre><code>    notAddOp : Contains NotAdd a -&gt; Expr a -&gt; T a\n</code></pre>\n... where the first argument is acting like a proof witness that the type parameter &#x27;a in some sense &quot;contains&quot; tye type NotAdd. Similarly again for the second, except with two witnesses:<p><pre><code>    bothOp : Contains NotAdd a -&gt; Contains NotMult a -&gt; Expr a -&gt; T a\n</code></pre>\nI haven&#x27;t thought it completely through, but I&#x27;m almost certain that a combination of type classes and GCH extensions would allow you to turn those proof witness arguments into type class contexts.<p>Anyways, doing this sort of encoding of properties in types is all well and good until you start considering more realistic examples. Even in the one you presented, it&#x27;s going to cause you problems if, say, you want to write an inliner for your language. Substituting an expression for a variable within a &quot;NotAdd&quot; addition may very well break the &quot;NotAdd&quot; property. This means that your inliner has to be aware of that property, so that it can preserve it while doing its job. In other words, the option of writing code that will break an invariant, and then immediately recover the invariant, is no longer on the table when you take this approach to verifying the correctness of your code. That may seem bad, until you try to verifiably balanced red-black tree without learning Coq and reading this[2].<p>Life&#x27;s full of trade-offs.<p>[0]: <a href=\"https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Generalized_algebraic_data_type\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Generalized_algebraic_data_typ...</a><p>[1]: <a href=\"https:&#x2F;&#x2F;realworldocaml.org&#x2F;v1&#x2F;en&#x2F;html&#x2F;variants.html#polymorphic-variants\" rel=\"nofollow\">https:&#x2F;&#x2F;realworldocaml.org&#x2F;v1&#x2F;en&#x2F;html&#x2F;variants.html#polymorp...</a><p>[2]: <a href=\"http:&#x2F;&#x2F;www.cs.princeton.edu&#x2F;~appel&#x2F;papers&#x2F;redblack.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;www.cs.princeton.edu&#x2F;~appel&#x2F;papers&#x2F;redblack.pdf</a>",
     CreatedAt: (time.Time) 2015-08-03 18:18:08 +0000 UTC,
     CreatedAtI: (int) 1438625888,
     ObjectID: (string) (len=7) "9998485",
     ParentID: (int) 9997768,
     Points: (*int)(<nil>),
     StoryID: (int) 9995896,
     StoryTitle: (string) (len=57) "Automated reasoning in F#, Scala, Haskell, C++, and Julia",
     StoryURL: (string) (len=63) "http://phdp.github.io/posts/2015-04-05-automated-reasoning.html",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=11) "nosuchthing"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=154) "I could imagine a programers union being able to prove much greater transparency in collective decision making, and <em>paper</em> trails of expenditures."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=26) "Ask HN: Programmer Unions?"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) "",
       MatchedWords: ([]string) <nil>,
       Value: (string) ""
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=18) "author_nosuchthing",
      (string) (len=13) "story_9997632"
     },
     Author: (string) (len=11) "nosuchthing",
     Children: ([]int) <nil>,
     CommentText: (string) (len=145) "I could imagine a programers union being able to prove much greater transparency in collective decision making, and paper trails of expenditures.",
     CreatedAt: (time.Time) 2015-08-03 18:18:00 +0000 UTC,
     CreatedAtI: (int) 1438625880,
     ObjectID: (string) (len=7) "9998484",
     ParentID: (int) 9998386,
     Points: (*int)(<nil>),
     StoryID: (int) 9997632,
     StoryTitle: (string) (len=26) "Ask HN: Programmer Unions?",
     StoryURL: (string) "",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=9) "mattpharr"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=907) "Given that this is HN, I'd encourage reading and commenting on the substance of the technical <em>paper</em> rather than the marketing webpage.<p>Those ideas have indeed been around for a long time; the <em>paper</em> nicely cites all of the related research work.  (Including among many others, a SIGGRAPH <em>paper</em> I wrote on the topic 18 years ago.)<p>I think the <em>paper</em> is excellent. First, there's a big gap between academic <em>paper</em>s on a topic and the experience of actually building a real system that works for real movies. It's unusual for people in industry to take the time to write up their experiences building these systems, so I salute their making this contribution to general knowledge about rendering systems.<p>It's easy to carp about &quot;all could have been done before&quot;; that seems like an argument that could be applied to try to dismiss just about anything."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=26) "Disney's Hyperion Renderer"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=16) "author_mattpharr",
      (string) (len=13) "story_9994032"
     },
     Author: (string) (len=9) "mattpharr",
     Children: ([]int) (len=2 cap=2) {
      (int) 9998802,
      (int) 9998909
     },
     CommentText: (string) (len=882) "Given that this is HN, I&#x27;d encourage reading and commenting on the substance of the technical paper rather than the marketing webpage.<p>Those ideas have indeed been around for a long time; the paper nicely cites all of the related research work.  (Including among many others, a SIGGRAPH paper I wrote on the topic 18 years ago.)<p>I think the paper is excellent. First, there&#x27;s a big gap between academic papers on a topic and the experience of actually building a real system that works for real movies. It&#x27;s unusual for people in industry to take the time to write up their experiences building these systems, so I salute their making this contribution to general knowledge about rendering systems.<p>It&#x27;s easy to carp about &quot;all could have been done before&quot;; that seems like an argument that could be applied to try to dismiss just about anything.",
     CreatedAt: (time.Time) 2015-08-03 18:17:27 +0000 UTC,
     CreatedAtI: (int) 1438625847,
     ObjectID: (string) (len=7) "9998478",
     ParentID: (int) 9995953,
     Points: (*int)(<nil>),
     StoryID: (int) 9994032,
     StoryTitle: (string) (len=26) "Disney's Hyperion Renderer",
     StoryURL: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=12) "bcrescimanno"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1056) "PayPal | San Jose, CA | Onsite (relocation available) | Hiring Web Application Engineers<p>PayPal is looking for JavaScript engineers who want to work both in the browser and on the server-side in Node.js. Come help us as we continue to completely re-engineer the entire tech stack and innovate on how people exchange money and pay both online and offline.<p>I am on of the hiring managers, you can reach out to me directly at my HN username at paypal.com or nodejs@paypal.com. We're looking for talented JavaScript developers. Experience with Backbone, React, and Flux would be hugely helpful while experience with other frameworks like Ember and Angular would also be quite useful. We've got some amazing teams of JS engineers and we'd love to have you join!<p>We've got openings in various areas including online checkout, account servicing, p2p money, etc.<p>At the present time due to <em>paper</em>work deadlines, you must be currently legally authorized to work in the USA. We are able to sponsor current VISA; however, we cannot apply for new VISA."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=36) "Ask HN: Who is hiring? (August 2015)"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) "",
       MatchedWords: ([]string) <nil>,
       Value: (string) ""
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=19) "author_bcrescimanno",
      (string) (len=13) "story_9996333"
     },
     Author: (string) (len=12) "bcrescimanno",
     Children: ([]int) <nil>,
     CommentText: (string) (len=1067) "PayPal | San Jose, CA | Onsite (relocation available) | Hiring Web Application Engineers<p>PayPal is looking for JavaScript engineers who want to work both in the browser and on the server-side in Node.js. Come help us as we continue to completely re-engineer the entire tech stack and innovate on how people exchange money and pay both online and offline.<p>I am on of the hiring managers, you can reach out to me directly at my HN username at paypal.com or nodejs@paypal.com. We&#x27;re looking for talented JavaScript developers. Experience with Backbone, React, and Flux would be hugely helpful while experience with other frameworks like Ember and Angular would also be quite useful. We&#x27;ve got some amazing teams of JS engineers and we&#x27;d love to have you join!<p>We&#x27;ve got openings in various areas including online checkout, account servicing, p2p money, etc.<p>At the present time due to paperwork deadlines, you must be currently legally authorized to work in the USA. We are able to sponsor current VISA; however, we cannot apply for new VISA.",
     CreatedAt: (time.Time) 2015-08-03 17:55:07 +0000 UTC,
     CreatedAtI: (int) 1438624507,
     ObjectID: (string) (len=7) "9998286",
     ParentID: (int) 9996333,
     Points: (*int)(<nil>),
     StoryID: (int) 9996333,
     StoryTitle: (string) (len=36) "Ask HN: Who is hiring? (August 2015)",
     StoryURL: (string) "",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=10) "kevinwuhoo"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1026) "San Francisco, CA - Academia.edu - Full Time Onsite<p>We're a team of 15 engineers (21 total) building an Open Science platform to bring the world's research online, available to all, for free. With over 23M registered users (that's a user-to-engineer ratio of 1.5M to 1!) and growing at 10% per month, we're looking to reach to 60M registered within the next year. We're currently working on products which accelerate the speed of <em>paper</em> peer review and publication.<p>We're hiring full-stack engineers, front-end engineers, an infrastructure engineer, a data scientist, and a product designer. We use Ruby on Rails, RSpec, Postgres, Redis, Elasticsearch, Backbone, and React on AWS. We're 3 blocks from the Montgomery BART station. Check out our hiring page at <a href=\"https://www.academia.edu/hiring\" rel=\"nofollow\">https://www.academia.edu/hiring</a>.<p>Please contact me if you have any questions or if you'd like to chat: kevin@academia.edu (software engineer). Check my profile for more contact info if needed."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=36) "Ask HN: Who is hiring? (August 2015)"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) "",
       MatchedWords: ([]string) <nil>,
       Value: (string) ""
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=17) "author_kevinwuhoo",
      (string) (len=13) "story_9996333"
     },
     Author: (string) (len=10) "kevinwuhoo",
     Children: ([]int) (len=1 cap=1) {
      (int) 9998355
     },
     CommentText: (string) (len=1087) "San Francisco, CA - Academia.edu - Full Time Onsite<p>We&#x27;re a team of 15 engineers (21 total) building an Open Science platform to bring the world&#x27;s research online, available to all, for free. With over 23M registered users (that&#x27;s a user-to-engineer ratio of 1.5M to 1!) and growing at 10% per month, we&#x27;re looking to reach to 60M registered within the next year. We&#x27;re currently working on products which accelerate the speed of paper peer review and publication.<p>We&#x27;re hiring full-stack engineers, front-end engineers, an infrastructure engineer, a data scientist, and a product designer. We use Ruby on Rails, RSpec, Postgres, Redis, Elasticsearch, Backbone, and React on AWS. We&#x27;re 3 blocks from the Montgomery BART station. Check out our hiring page at <a href=\"https:&#x2F;&#x2F;www.academia.edu&#x2F;hiring\" rel=\"nofollow\">https:&#x2F;&#x2F;www.academia.edu&#x2F;hiring</a>.<p>Please contact me if you have any questions or if you&#x27;d like to chat: kevin@academia.edu (software engineer). Check my profile for more contact info if needed.",
     CreatedAt: (time.Time) 2015-08-03 17:52:08 +0000 UTC,
     CreatedAtI: (int) 1438624328,
     ObjectID: (string) (len=7) "9998251",
     ParentID: (int) 9996333,
     Points: (*int)(<nil>),
     StoryID: (int) 9996333,
     StoryTitle: (string) (len=36) "Ask HN: Who is hiring? (August 2015)",
     StoryURL: (string) "",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=9) "graphific"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1665) "Nice post and especially your blog post &quot;gitwikxiv&quot;. So many models &amp; projects are already out there: <em>Paper</em>Bricks, <a href=\"http://knowen.org/\" rel=\"nofollow\">http://knowen.org/</a>, <a href=\"https://www.authorea.com/\" rel=\"nofollow\">https://www.authorea.com/</a>, <a href=\"https://casetext.com/\" rel=\"nofollow\">https://casetext.com/</a>, <a href=\"https://www.sharelatex.com/\" rel=\"nofollow\">https://www.sharelatex.com/</a>, <a href=\"https://selectedpapers.net/\" rel=\"nofollow\">https://selectedpapers.net/</a>, <a href=\"http://stacks.math.columbia.edu/\" rel=\"nofollow\">http://stacks.math.columbia.edu/</a>, <a href=\"https://www.codalab.org/\" rel=\"nofollow\">https://www.codalab.org/</a>, <a href=\"https://pubpeer.com/\" rel=\"nofollow\">https://pubpeer.com/</a>, <a href=\"http://thinklab.com/publications\" rel=\"nofollow\">http://thinklab.com/publications</a><p>With GitXiv as one commenter also implied we really want to focus on building a bridge between the 2 core issues of making real research possible/replicatable: articles &amp; code (of course with the 3th even more difficult problem to solve being &quot;data&quot;), as well as building a community around it.\nAnother point of focus is making everything what goes on with GitXiv as transparent as possible, ie by having public &quot;issues&quot; at github (<a href=\"https://github.com/samim23/GitXiv/issues\" rel=\"nofollow\">https://github.com/samim23/GitXiv/issues</a>), and open discussions at our wiki: <a href=\"https://github.com/samim23/GitXiv/wiki/Thoughts-on-GitXiv\" rel=\"nofollow\">https://github.com/samim23/GitXiv/wiki/Thoughts-on-GitXiv</a><p>Jess: Let's have a hangout for sure!"
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=43) "GitXiv: Collaborative Open Computer Science"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=18) "http://gitxiv.com/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=16) "author_graphific",
      (string) (len=13) "story_9994182"
     },
     Author: (string) (len=9) "graphific",
     Children: ([]int) <nil>,
     CommentText: (string) (len=2046) "Nice post and especially your blog post &quot;gitwikxiv&quot;. So many models &amp; projects are already out there: PaperBricks, <a href=\"http:&#x2F;&#x2F;knowen.org&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;knowen.org&#x2F;</a>, <a href=\"https:&#x2F;&#x2F;www.authorea.com&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.authorea.com&#x2F;</a>, <a href=\"https:&#x2F;&#x2F;casetext.com&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;casetext.com&#x2F;</a>, <a href=\"https:&#x2F;&#x2F;www.sharelatex.com&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.sharelatex.com&#x2F;</a>, <a href=\"https:&#x2F;&#x2F;selectedpapers.net&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;selectedpapers.net&#x2F;</a>, <a href=\"http:&#x2F;&#x2F;stacks.math.columbia.edu&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;stacks.math.columbia.edu&#x2F;</a>, <a href=\"https:&#x2F;&#x2F;www.codalab.org&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;www.codalab.org&#x2F;</a>, <a href=\"https:&#x2F;&#x2F;pubpeer.com&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;pubpeer.com&#x2F;</a>, <a href=\"http:&#x2F;&#x2F;thinklab.com&#x2F;publications\" rel=\"nofollow\">http:&#x2F;&#x2F;thinklab.com&#x2F;publications</a><p>With GitXiv as one commenter also implied we really want to focus on building a bridge between the 2 core issues of making real research possible&#x2F;replicatable: articles &amp; code (of course with the 3th even more difficult problem to solve being &quot;data&quot;), as well as building a community around it.\nAnother point of focus is making everything what goes on with GitXiv as transparent as possible, ie by having public &quot;issues&quot; at github (<a href=\"https:&#x2F;&#x2F;github.com&#x2F;samim23&#x2F;GitXiv&#x2F;issues\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;samim23&#x2F;GitXiv&#x2F;issues</a>), and open discussions at our wiki: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;samim23&#x2F;GitXiv&#x2F;wiki&#x2F;Thoughts-on-GitXiv\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;samim23&#x2F;GitXiv&#x2F;wiki&#x2F;Thoughts-on-GitXiv</a><p>Jess: Let&#x27;s have a hangout for sure!",
     CreatedAt: (time.Time) 2015-08-03 17:50:28 +0000 UTC,
     CreatedAtI: (int) 1438624228,
     ObjectID: (string) (len=7) "9998236",
     ParentID: (int) 9997355,
     Points: (*int)(<nil>),
     StoryID: (int) 9994182,
     StoryTitle: (string) (len=43) "GitXiv: Collaborative Open Computer Science",
     StoryURL: (string) (len=18) "http://gitxiv.com/",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=7) "kscottz"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=2516) "---<p>Junior Roboticist (mechatronics)<p>The Job\n* Help us design and fabricate the next generation factory robots.<p>* Iterate on subsystems for the current factory robots.<p>* Design and fabricate electrical subsystems for robots.<p>* Design and fabricate mechanical subsystems for the robot.<p>The Candidate<p>* Bachelor or Masters degree in mechanical engineering / aerospace engineer / electrical engineering / mechatronics.<p>* Experienced with SolidWorks and/or Altium.<p>* Familiarity with Robot Operating System a strong plus.<p>* Experience with systems integration particularly in a factory setting.<p>* Reasonable design for manufacturing experience.<p>---<p>Operations Associate / Office Manager<p>The Job<p>* Design, implement, and maintain various compliance requirements (OSHA, EPA, ISO, etc).\nPerform basic human resource tasks.<p>* Assist the factory staff with material tracking and logistics.<p>* Keeping ducks in a row with respect to scheduling and calendars.<p>* Moving <em>paper</em>work from an input queue to the appropriate bucket.<p>* Filling the things that are empty, emptying things that are full, scratching where it itches.<p>The Candidate<p>* Detail oriented, exceptionally organized, and great communication and people skills.<p>* Capable of keeping an office of 20 people running smoothly with minimal supervision.<p>* Prior experience in management or logistics.<p>* Experience doing bookkeeping a big plus.<p>* Bachelor degree in liberal arts or accounting.<p>---<p>Fabrication Technician<p>The Job<p>* Generous living wage factory job with overtime, benefits, and vacation.<p>* You will work with our robots and our customer to deliver completed circuit boards.<p>* This job involves a lot of fine manual labor with attention to detail and a passion for quality.<p>* Technicians will perform SMD and through hole soldering, SMT rework, board cleaning, quality control, and documentation.<p>* Technicians may also perform general factory labor, deliveries, order logistics, and training.<p>The Candidate<p>* No college degree required.<p>* This job requires smart and detailed oriented individuals with good hand eye coordination.<p>* A passion for working with your hands and learning a skilled trade.<p>* Solid communication skills and an ability and willingness to work with factory robotics.<p>* Prior experience in electronics assembly is highly desired.<p>* Candidates with working and well maintained vehicles who could occasionally perform deliveries are highly desired."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=36) "Ask HN: Who is hiring? (August 2015)"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) "",
       MatchedWords: ([]string) <nil>,
       Value: (string) ""
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=14) "author_kscottz",
      (string) (len=13) "story_9996333"
     },
     Author: (string) (len=7) "kscottz",
     Children: ([]int) (len=1 cap=1) {
      (int) 9999502
     },
     CommentText: (string) (len=2532) "---<p>Junior Roboticist (mechatronics)<p>The Job\n* Help us design and fabricate the next generation factory robots.<p>* Iterate on subsystems for the current factory robots.<p>* Design and fabricate electrical subsystems for robots.<p>* Design and fabricate mechanical subsystems for the robot.<p>The Candidate<p>* Bachelor or Masters degree in mechanical engineering &#x2F; aerospace engineer &#x2F; electrical engineering &#x2F; mechatronics.<p>* Experienced with SolidWorks and&#x2F;or Altium.<p>* Familiarity with Robot Operating System a strong plus.<p>* Experience with systems integration particularly in a factory setting.<p>* Reasonable design for manufacturing experience.<p>---<p>Operations Associate &#x2F; Office Manager<p>The Job<p>* Design, implement, and maintain various compliance requirements (OSHA, EPA, ISO, etc).\nPerform basic human resource tasks.<p>* Assist the factory staff with material tracking and logistics.<p>* Keeping ducks in a row with respect to scheduling and calendars.<p>* Moving paperwork from an input queue to the appropriate bucket.<p>* Filling the things that are empty, emptying things that are full, scratching where it itches.<p>The Candidate<p>* Detail oriented, exceptionally organized, and great communication and people skills.<p>* Capable of keeping an office of 20 people running smoothly with minimal supervision.<p>* Prior experience in management or logistics.<p>* Experience doing bookkeeping a big plus.<p>* Bachelor degree in liberal arts or accounting.<p>---<p>Fabrication Technician<p>The Job<p>* Generous living wage factory job with overtime, benefits, and vacation.<p>* You will work with our robots and our customer to deliver completed circuit boards.<p>* This job involves a lot of fine manual labor with attention to detail and a passion for quality.<p>* Technicians will perform SMD and through hole soldering, SMT rework, board cleaning, quality control, and documentation.<p>* Technicians may also perform general factory labor, deliveries, order logistics, and training.<p>The Candidate<p>* No college degree required.<p>* This job requires smart and detailed oriented individuals with good hand eye coordination.<p>* A passion for working with your hands and learning a skilled trade.<p>* Solid communication skills and an ability and willingness to work with factory robotics.<p>* Prior experience in electronics assembly is highly desired.<p>* Candidates with working and well maintained vehicles who could occasionally perform deliveries are highly desired.",
     CreatedAt: (time.Time) 2015-08-03 17:50:04 +0000 UTC,
     CreatedAtI: (int) 1438624204,
     ObjectID: (string) (len=7) "9998229",
     ParentID: (int) 9998163,
     Points: (*int)(<nil>),
     StoryID: (int) 9996333,
     StoryTitle: (string) (len=36) "Ask HN: Who is hiring? (August 2015)",
     StoryURL: (string) "",
     UpdatedAt: (time.Time) 2023-09-07 03:21:59 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=10) "deadgrey19"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=993) "Very interesting until I got to the word &quot;toxins&quot;. At that point I stopped reading. Any time you use the word &quot;toxins&quot; my pseudo-science radar turns on and my ears/eyes turn off.<p>It turns out that the <em>paper</em> referenced was written in 1995 (yes, 20 years ago), in the Journal of Range Management which was discontinued in 2004 (11 years ago) (<a href=\"http://www.researchgate.net/journal/0022-409X_Journal_of_Range_Management\" rel=\"nofollow\">http://www.researchgate.net/journal/0022-409X_Journal_of_Ran...</a>) it was an invited article (ie. probably not peer reviewed although I cannot tell for sure) and it appears that author has no medical training. The author &quot;is currently a professor in the Department of\nRangeland Resources.&quot; This professorship seems to have ended in 2008: <a href=\"https://www.cnr.usu.edu/files/uploads/WILD%20Vitaes/ProvenzaResumeCitations.pdf\" rel=\"nofollow\">https://www.cnr.usu.edu/files/uploads/WILD%20Vitaes/Provenza...</a>"
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=64) "Your gut is telling you what to eat – and you're not listening"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=49) "http://www.vox.com/2015/8/3/9074927/food-hangover"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=17) "author_deadgrey19",
      (string) (len=13) "story_9996437"
     },
     Author: (string) (len=10) "deadgrey19",
     Children: ([]int) <nil>,
     CommentText: (string) (len=1089) "Very interesting until I got to the word &quot;toxins&quot;. At that point I stopped reading. Any time you use the word &quot;toxins&quot; my pseudo-science radar turns on and my ears&#x2F;eyes turn off.<p>It turns out that the paper referenced was written in 1995 (yes, 20 years ago), in the Journal of Range Management which was discontinued in 2004 (11 years ago) (<a href=\"http:&#x2F;&#x2F;www.researchgate.net&#x2F;journal&#x2F;0022-409X_Journal_of_Range_Management\" rel=\"nofollow\">http:&#x2F;&#x2F;www.researchgate.net&#x2F;journal&#x2F;0022-409X_Journal_of_Ran...</a>) it was an invited article (ie. probably not peer reviewed although I cannot tell for sure) and it appears that author has no medical training. The author &quot;is currently a professor in the Department of\nRangeland Resources.&quot; This professorship seems to have ended in 2008: <a href=\"https:&#x2F;&#x2F;www.cnr.usu.edu&#x2F;files&#x2F;uploads&#x2F;WILD%20Vitaes&#x2F;ProvenzaResumeCitations.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;www.cnr.usu.edu&#x2F;files&#x2F;uploads&#x2F;WILD%20Vitaes&#x2F;Provenza...</a>",
     CreatedAt: (time.Time) 2015-08-03 17:26:07 +0000 UTC,
     CreatedAtI: (int) 1438622767,
     ObjectID: (string) (len=7) "9997973",
     ParentID: (int) 9996437,
     Points: (*int)(<nil>),
     StoryID: (int) 9996437,
     StoryTitle: (string) (len=64) "Your gut is telling you what to eat – and you're not listening",
     StoryURL: (string) (len=49) "http://www.vox.com/2015/8/3/9074927/food-hangover",
     UpdatedAt: (time.Time) 2023-09-07 03:21:54 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=13) "nickpsecurity"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1660) "I'm talking about this one (see Storage Management on p17):<p><a href=\"http://repository.readscheme.org/ftp/papers/ai-lab-pubs/AIM-514.pdf\" rel=\"nofollow\">http://repository.readscheme.org/ftp/<em>paper</em>s/ai-lab-pubs/AIM-...</a><p>They had to leave it out of the first prototype due to space constraints but describe the approach. They build a second, state machine into storage interface that continuously looks for stuff it can reclaim. The idea was clearly to make it concurrent and use dedicated circuits. An enterprising reader of old wisdom would combine this with any number of parallel/concurrent algorithms in literature to achieve GC w/ predictable, performance impact.<p>That work was later referenced in a 1976 treatment of the subject that worked out foundational issues for concurrent collection:<p><a href=\"http://repository.tudelft.nl/assets/uuid:8b7d64a2-e9a7-4b04-93fe-1845088e5d58/P_1866_1258.pdf\" rel=\"nofollow\">http://repository.tudelft.nl/assets/uuid:8b7d64a2-e9a7-4b04-...</a><p>Most work in GC from them on focused on software implementations. Did find a hardware implementation in embedded space with some interesting choices:<p><a href=\"http://www.ece.iastate.edu/~morris/papers/IEEE_TMC_03.pdf\" rel=\"nofollow\">http://www.ece.iastate.edu/~morris/<em>paper</em>s/IEEE_TMC_03.pdf</a><p>So, the original LISP machines and many later used mark-and-sweep often around or during a heap exhaustion. There were concurrent ones, with most using software. The Steele chip describes a concurrent design w/ straightforward implementation in hardware. That combined with literature gave people more than enough to acceptably solve this problem."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=64) "Tech industry's persistent claim of worker shortage may be phony"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=81) "http://www.latimes.com/business/hiltzik/la-fi-hiltzik-20150802-column.html#page=1"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=20) "author_nickpsecurity",
      (string) (len=13) "story_9993576"
     },
     Author: (string) (len=13) "nickpsecurity",
     Children: ([]int) <nil>,
     CommentText: (string) (len=1817) "I&#x27;m talking about this one (see Storage Management on p17):<p><a href=\"http:&#x2F;&#x2F;repository.readscheme.org&#x2F;ftp&#x2F;papers&#x2F;ai-lab-pubs&#x2F;AIM-514.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;repository.readscheme.org&#x2F;ftp&#x2F;papers&#x2F;ai-lab-pubs&#x2F;AIM-...</a><p>They had to leave it out of the first prototype due to space constraints but describe the approach. They build a second, state machine into storage interface that continuously looks for stuff it can reclaim. The idea was clearly to make it concurrent and use dedicated circuits. An enterprising reader of old wisdom would combine this with any number of parallel&#x2F;concurrent algorithms in literature to achieve GC w&#x2F; predictable, performance impact.<p>That work was later referenced in a 1976 treatment of the subject that worked out foundational issues for concurrent collection:<p><a href=\"http:&#x2F;&#x2F;repository.tudelft.nl&#x2F;assets&#x2F;uuid:8b7d64a2-e9a7-4b04-93fe-1845088e5d58&#x2F;P_1866_1258.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;repository.tudelft.nl&#x2F;assets&#x2F;uuid:8b7d64a2-e9a7-4b04-...</a><p>Most work in GC from them on focused on software implementations. Did find a hardware implementation in embedded space with some interesting choices:<p><a href=\"http:&#x2F;&#x2F;www.ece.iastate.edu&#x2F;~morris&#x2F;papers&#x2F;IEEE_TMC_03.pdf\" rel=\"nofollow\">http:&#x2F;&#x2F;www.ece.iastate.edu&#x2F;~morris&#x2F;papers&#x2F;IEEE_TMC_03.pdf</a><p>So, the original LISP machines and many later used mark-and-sweep often around or during a heap exhaustion. There were concurrent ones, with most using software. The Steele chip describes a concurrent design w&#x2F; straightforward implementation in hardware. That combined with literature gave people more than enough to acceptably solve this problem.",
     CreatedAt: (time.Time) 2015-08-03 17:10:40 +0000 UTC,
     CreatedAtI: (int) 1438621840,
     ObjectID: (string) (len=7) "9997831",
     ParentID: (int) 9994158,
     Points: (*int)(<nil>),
     StoryID: (int) 9993576,
     StoryTitle: (string) (len=64) "Tech industry's persistent claim of worker shortage may be phony",
     StoryURL: (string) (len=81) "http://www.latimes.com/business/hiltzik/la-fi-hiltzik-20150802-column.html#page=1",
     UpdatedAt: (time.Time) 2023-09-07 03:21:54 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=10) "louislouis"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=260) "In Hong Kong Haagen-Daz sells an icecream on a stick. It's packaged in a plastic wrapper inside a <em>paper</em> box. I bought it once and when I finally got through all the packaging the actual icecream was half the size of the box it came in! What a rip-off."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=6) "[dead]"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) "",
       MatchedWords: ([]string) <nil>,
       Value: (string) ""
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=17) "author_louislouis",
      (string) (len=12) "story_999663"
     },
     Author: (string) (len=10) "louislouis",
     Children: ([]int) (len=2 cap=2) {
      (int) 999784,
      (int) 999870
     },
     CommentText: (string) (len=251) "In Hong Kong Haagen-Daz sells an icecream on a stick. It's packaged in a plastic wrapper inside a paper box. I bought it once and when I finally got through all the packaging the actual icecream was half the size of the box it came in! What a rip-off.",
     CreatedAt: (time.Time) 2009-12-16 21:31:36 +0000 UTC,
     CreatedAtI: (int) 1260999096,
     ObjectID: (string) (len=6) "999779",
     ParentID: (int) 999663,
     Points: (*int)(<nil>),
     StoryID: (int) 999663,
     StoryTitle: (string) (len=6) "[dead]",
     StoryURL: (string) "",
     UpdatedAt: (time.Time) 2023-09-06 20:19:17 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=14) "CyberDildonics"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=1505) "&gt; There were no real new ideas in that <em>paper</em> that were worth publishing.<p>The real world speed improvements from specific methods are the significant part.  There are many ideas floating around, not all of them work out once you discover all the comparisons and data omitted from an academic <em>paper</em>.<p>&gt;I do think you should give them more credit on the engineering side though. Using large amounts of geometry has been done before, but renderers such as RenderMan and Arnold require that all geometry fits in the memory at once.<p>This is out of core tracing and is great that they implemented it, but neither out of core tracing and sorting rays are feats of engineering.<p>It has actually been done many times in both academics and commercial renderers from at least a decade ago. SIMD is also used to various extents in any decent renderer to varying degrees of success.  Sorting into packets isn't the only way to use SIMD, or even the only way to use to scale SIMD use to wider lanes.  Interestingly Skylake should have fast gather/scatter operations which will change the effectiveness of various techniques.<p>Basically good design choices and some practical knowledge from trial and error has been heavily exaggerated by marketing.  I would guess that the actual render programmers would say the same.  This isn't a breakthrough, it is a refinement and that's good enough. I love what they did, but to carry the torch that the impossible was made possible is disingenuous."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=26) "Disney's Hyperion Renderer"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=21) "author_CyberDildonics",
      (string) (len=13) "story_9994032"
     },
     Author: (string) (len=14) "CyberDildonics",
     Children: ([]int) (len=1 cap=1) {
      (int) 9998506
     },
     CommentText: (string) (len=1507) "&gt; There were no real new ideas in that paper that were worth publishing.<p>The real world speed improvements from specific methods are the significant part.  There are many ideas floating around, not all of them work out once you discover all the comparisons and data omitted from an academic paper.<p>&gt;I do think you should give them more credit on the engineering side though. Using large amounts of geometry has been done before, but renderers such as RenderMan and Arnold require that all geometry fits in the memory at once.<p>This is out of core tracing and is great that they implemented it, but neither out of core tracing and sorting rays are feats of engineering.<p>It has actually been done many times in both academics and commercial renderers from at least a decade ago. SIMD is also used to various extents in any decent renderer to varying degrees of success.  Sorting into packets isn&#x27;t the only way to use SIMD, or even the only way to use to scale SIMD use to wider lanes.  Interestingly Skylake should have fast gather&#x2F;scatter operations which will change the effectiveness of various techniques.<p>Basically good design choices and some practical knowledge from trial and error has been heavily exaggerated by marketing.  I would guess that the actual render programmers would say the same.  This isn&#x27;t a breakthrough, it is a refinement and that&#x27;s good enough. I love what they did, but to carry the torch that the impossible was made possible is disingenuous.",
     CreatedAt: (time.Time) 2015-08-03 16:47:10 +0000 UTC,
     CreatedAtI: (int) 1438620430,
     ObjectID: (string) (len=7) "9997596",
     ParentID: (int) 9996583,
     Points: (*int)(<nil>),
     StoryID: (int) 9994032,
     StoryTitle: (string) (len=26) "Disney's Hyperion Renderer",
     StoryURL: (string) (len=62) "http://www.disneyanimation.com/technology/innovations/hyperion",
     UpdatedAt: (time.Time) 2023-09-07 03:21:54 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=5) "jauer"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=226) "I don't really see why this is NYT-worthy. State <em>paper</em>, sure, but NYT? This isn't particularly groundbreaking.<p>There are existing regional sci/edu networks doing 100G as well as field-specific networks (e.g. ESnet)."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=60) "Research Scientists to Use Network Much Faster Than Internet"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=112) "http://www.nytimes.com/2015/08/01/science/research-scientists-to-use-network-much-faster-than-internet.html?_r=0"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=12) "author_jauer",
      (string) (len=13) "story_9997146"
     },
     Author: (string) (len=5) "jauer",
     Children: ([]int) (len=1 cap=1) {
      (int) 9997645
     },
     CommentText: (string) (len=232) "I don&#x27;t really see why this is NYT-worthy. State paper, sure, but NYT? This isn&#x27;t particularly groundbreaking.<p>There are existing regional sci&#x2F;edu networks doing 100G as well as field-specific networks (e.g. ESnet).",
     CreatedAt: (time.Time) 2015-08-03 16:46:33 +0000 UTC,
     CreatedAtI: (int) 1438620393,
     ObjectID: (string) (len=7) "9997583",
     ParentID: (int) 9997146,
     Points: (*int)(<nil>),
     StoryID: (int) 9997146,
     StoryTitle: (string) (len=60) "Research Scientists to Use Network Much Faster Than Internet",
     StoryURL: (string) (len=112) "http://www.nytimes.com/2015/08/01/science/research-scientists-to-use-network-much-faster-than-internet.html?_r=0",
     UpdatedAt: (time.Time) 2023-09-07 03:21:54 +0000 UTC
    },
    (struct { HighlightResult struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" } "json:\"_highlightResult\""; Tags []string "json:\"_tags\""; Author string "json:\"author\""; Children []int "json:\"children\""; CommentText string "json:\"comment_text\""; CreatedAt time.Time "json:\"created_at\""; CreatedAtI int "json:\"created_at_i\""; ObjectID string "json:\"objectID\""; ParentID int "json:\"parent_id\""; Points *int "json:\"points\""; StoryID int "json:\"story_id\""; StoryTitle string "json:\"story_title\""; StoryURL string "json:\"story_url\""; UpdatedAt time.Time "json:\"updated_at\"" }) {
     HighlightResult: (struct { Author struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"author\""; CommentText struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"comment_text\""; StoryTitle struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_title\""; StoryURL struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" } "json:\"story_url\"" }) {
      Author: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=4) "woah"
      },
      CommentText: (struct { FullyHighlighted bool "json:\"fullyHighlighted\""; MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       FullyHighlighted: (bool) false,
       MatchLevel: (string) (len=4) "full",
       MatchedWords: ([]string) (len=1 cap=1) {
        (string) (len=5) "paper"
       },
       Value: (string) (len=457) "It's not about the hiring team looking for anything specific that a degree could give you, it's that they've bought into the old idea that the piece of <em>paper</em> is a hard wall that separates them from the homeless guy outside. The corollary of &quot;I'm superior and secure in my position because of this degree&quot; is &quot;someone without a degree is inferior&quot;. Fear and self-doubt are the only reasons that anyone requires unrelated degrees."
      },
      StoryTitle: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=27) "The Unemployable Programmer"
      },
      StoryURL: (struct { MatchLevel string "json:\"matchLevel\""; MatchedWords []string "json:\"matchedWords\""; Value string "json:\"value\"" }) {
       MatchLevel: (string) (len=4) "none",
       MatchedWords: ([]string) {
       },
       Value: (string) (len=27) "http://unemployable.pen.io/"
      }
     },
     Tags: ([]string) (len=3 cap=4) {
      (string) (len=7) "comment",
      (string) (len=11) "author_woah",
      (string) (len=13) "story_9994899"
     },
     Author: (string) (len=4) "woah",
     Children: ([]int) (len=1 cap=1) {
      (int) 9998717
     },
     CommentText: (string) (len=468) "It&#x27;s not about the hiring team looking for anything specific that a degree could give you, it&#x27;s that they&#x27;ve bought into the old idea that the piece of paper is a hard wall that separates them from the homeless guy outside. The corollary of &quot;I&#x27;m superior and secure in my position because of this degree&quot; is &quot;someone without a degree is inferior&quot;. Fear and self-doubt are the only reasons that anyone requires unrelated degrees.",
     CreatedAt: (time.Time) 2015-08-03 16:18:26 +0000 UTC,
     CreatedAtI: (int) 1438618706,
     ObjectID: (string) (len=7) "9997262",
     ParentID: (int) 9996411,
     Points: (*int)(<nil>),
     StoryID: (int) 9994899,
     StoryTitle: (string) (len=27) "The Unemployable Programmer",
     StoryURL: (string) (len=27) "http://unemployable.pen.io/",
     UpdatedAt: (time.Time) 2023-09-07 03:21:54 +0000 UTC
    }
   },
   HitsPerPage: (int) 20,
   NbHits: (int) 170006,
   NbPages: (int) 50,
   Page: (int) 0,
   Params: (string) (len=66) "query=Paper&tags=comment&advancedSyntax=true&analyticsTags=backend",
   ProcessingTimeMS: (int) 9,
   ProcessingTimingsMS: (struct { Request struct { RoundTrip int "json:\"roundTrip\"" } "json:\"_request\""; AfterFetch struct { Format struct { Highlighting int "json:\"highlighting\""; Total int "json:\"total\"" } "json:\"format\""; Merge struct { Total int "json:\"total\"" } "json:\"merge\""; Total int "json:\"total\"" } "json:\"afterFetch\""; Fetch struct { Query int "json:\"query\""; Scanning int "json:\"scanning\""; Total int "json:\"total\"" } "json:\"fetch\""; Total int "json:\"total\"" }) {
    Request: (struct { RoundTrip int "json:\"roundTrip\"" }) {
     RoundTrip: (int) 18
    },
    AfterFetch: (struct { Format struct { Highlighting int "json:\"highlighting\""; Total int "json:\"total\"" } "json:\"format\""; Merge struct { Total int "json:\"total\"" } "json:\"merge\""; Total int "json:\"total\"" }) {
     Format: (struct { Highlighting int "json:\"highlighting\""; Total int "json:\"total\"" }) {
      Highlighting: (int) 2,
      Total: (int) 2
     },
     Merge: (struct { Total int "json:\"total\"" }) {
      Total: (int) 0
     },
     Total: (int) 0
    },
    Fetch: (struct { Query int "json:\"query\""; Scanning int "json:\"scanning\""; Total int "json:\"total\"" }) {
     Query: (int) 4,
     Scanning: (int) 3,
     Total: (int) 8
    },
    Total: (int) 9
   },
   Query: (string) (len=5) "Paper",
   ServerTimeMS: (int) 11
  })
 },
 DiscordData: (data.DiscordData) {
  Invites: (*[]discord.DiscordInviteResponse)(0xc000228c78)((len=1 cap=1) {
   (discord.DiscordInviteResponse) {
    Code: (string) (len=7) "papermc",
    Guild: (discord.Guild) {
     ID: (string) (len=18) "289587909051416579",
     Name: (string) (len=7) "PaperMC"
    },
    Channel: (struct { ID string "json:\"id\""; Name string "json:\"name\""; Type int "json:\"type\"" }) {
     ID: (string) (len=18) "739630246642319360",
     Name: (string) (len=7) "welcome",
     Type: (int) 0
    },
    ApproximatePresenceCount: (int) 16755,
    ApproximateMemberCount: (int) 46279,
    ExpiresAt: (*time.Time)(<nil>)
   }
  })
 },
 HackernewsSentiment: (string) (len=570) "The overall sentiment about the mentioned Github repository seems to be positive, focusing on the benefits of collaborations with universities for startups and the advantages of SBIR/STTR grants over VC funding. The comments highlight the credibility, resources, and expertise that universities bring to scientific startups, and the flexibility and fewer constraints associated with grants. By working with universities, startups can gain credibility, access specialized knowledge, and benefit from collaborations, making it a strategic move for many tech entrepreneurs.",
 RepoEli5: (string) (len=141) "This project is like a special, super-fast playground for Minecraft where they fix things to make it even more fun to play with your friends!",
 ProjClassifiers: ([]string) <nil>
})
