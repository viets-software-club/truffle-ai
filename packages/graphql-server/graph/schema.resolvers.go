package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"

	"github.com/viets-software-club/truffle-ai/graphql-server/graph/model"
)

// CreateBookmark is the resolver for the createBookmark field.
func (r *mutationResolver) CreateBookmark(ctx context.Context, repo model.RepositoryInput, categories []string) (bool, error) {

	opCtx := graphql.GetOperationContext(ctx)
	authUserId := opCtx.Headers.Get("authusersid")
	err := r.Controller.CreateBookmarkWithCategories(authUserId, repo.Owner, repo.Name, categories)
	if err != nil {
		fmt.Println("error")

		fmt.Println(err)
		return false, err
	}
	fmt.Println("success")

	return true, nil
}

// RemoveBookmark is the resolver for the removeBookmark field.
func (r *mutationResolver) RemoveBookmark(ctx context.Context, projBookmarkID int) (bool, error) {
	err := r.Controller.RemoveBookmark(projBookmarkID)
	if err != nil {
		fmt.Println(err)
		return false, err
	}
	return true, nil
}

// RemoveBookmarkByProjRepoID is the resolver for the removeBookmarkByProjRepoId field.
func (r *mutationResolver) RemoveBookmarkByProjRepoID(ctx context.Context, projRepoID int) (bool, error) {
	err := r.Controller.RemoveBookmarkByProjRepoId(projRepoID)
	if err != nil {
		fmt.Println(err)
		return false, err
	}
	return true, nil
}

// HelloWorld is the resolver for the helloWorld field.
func (r *queryResolver) HelloWorld(ctx context.Context) (string, error) {
	return "Hello world!", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
